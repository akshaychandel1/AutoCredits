import React ,{ useState, useEffect, useRef, useCallback } from "react"; 
import {jsPDF} from 'jspdf'
import { Link, useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import {
  FaCar, FaInfoCircle,FaPlus,FaArrowRight,
  FaMapMarkerAlt,FaCheckCircle,FaExclamationTriangle,FaCloudUploadAlt,FaListAlt,FaExternalLinkAlt, FaTags,FaTag,FaSpinner,
  FaUser,FaReceipt,
  FaPhone,
  FaEnvelope,
  FaSave,
  FaChevronLeft,
  FaChevronRight,
  FaCheck,
  FaFileInvoiceDollar,
  FaFileAlt,
  FaIdCard,
  FaFileUpload,
  FaCreditCard,
  FaUpload,
  FaTrash,
} from "react-icons/fa";
import { 
  Plus, 
  Download, 
  ChevronUp, 
  ChevronDown, 
  Trash2, 
  FileText, 
  Save,
  CheckCircle, // ADD THIS
  AlertTriangle // ADD THIS
} from 'lucide-react';

// import { Plus, Download, ChevronUp, ChevronDown, Trash2, FileText, Save,  CheckCircle,
//   AlertTriangle } from 'lucide-react';

import icici from './logos/ICICI.jpeg'
import hdfc from './logos/hdfc.jpeg'
import bajaj from './logos/bajaj.jpeg'
import indiau from './logos/indiaunited.jpeg'
import uindia from './logos/unitedindia.jpeg'
import nis from './logos/nis.jpeg'
import orient from './logos/orient.jpeg'
import tata from './logos/tata.jpeg'
import reliance from './logos/reliance.png'
import chola from './logos/chola.png'
// ================== VALIDATION RULES ==================
const validationRules = {
  // Step 1: Case Details validation
  validateStep1: (form) => {
  const errors = {};

  // Buyer Type validation
  if (!form.buyer_type) {
    errors.buyer_type = "Buyer type is required";
  }

  // Mobile validation
  if (!form.mobile) {
    errors.mobile = "Mobile number is required";
  } else if (!/^\d{10}$/.test(form.mobile)) {
    errors.mobile = "Mobile number must be 10 digits";
  }

  // Individual buyer validations
  if (form.buyer_type === "individual") {
    // Customer Name validation
    if (!form.customerName) {
      errors.customerName = "Customer name is required";
    } else if (form.customerName.length < 2) {
      errors.customerName = "Customer name must be at least 2 characters";
    }

    // Age validation for individual
    if (!form.age) {
      errors.age = "Age is required";
    } else if (form.age < 1 || form.age > 130) {
      errors.age = "Age must be between 1 and 130 years";
    }

    // Gender validation
    if (!form.gender) {
      errors.gender = "Gender is required";
    }

    // Email validation
    if (!form.email) {
      errors.email = "Email address is required";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      errors.email = "Please enter a valid email address";
    }

    // PAN validation (if provided)
    if (form.panNumber && !/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/.test(form.panNumber)) {
      errors.panNumber = "Please enter a valid PAN number";
    }

    // Aadhaar validation (if provided)
    if (form.aadhaarNumber && !/^\d{12}$/.test(form.aadhaarNumber.replace(/\s/g, ''))) {
      errors.aadhaarNumber = "Aadhaar number must be 12 digits";
    }
  }

  // Corporate buyer validations
  if (form.buyer_type === "corporate") {
    // Company Name validation
    if (!form.companyName) {
      errors.companyName = "Company name is required";
    } else if (form.companyName.length < 2) {
      errors.companyName = "Company name must be at least 2 characters";
    }

    // Contact Person Name validation
    if (!form.contactPersonName) {
      errors.contactPersonName = "Contact person name is required";
    } else if (form.contactPersonName.length < 2) {
      errors.contactPersonName = "Contact person name must be at least 2 characters";
    }

    // Email validation
    if (!form.email) {
      errors.email = "Email address is required";
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(form.email)) {
      errors.email = "Please enter a valid email address";
    }

    // Company PAN validation
    if (!form.companyPanNumber) {
      errors.companyPanNumber = "Company PAN number is required";
    } else if (!/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/.test(form.companyPanNumber)) {
      errors.companyPanNumber = "Please enter a valid PAN number";
    }

    // GST Number validation
    if (!form.gstNumber) {
      errors.gstNumber = "GST number is required";
    } else if (!/^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}Z[0-9A-Z]{1}$/.test(form.gstNumber)) {
      errors.gstNumber = "Please enter a valid GST number";
    }
  }

  // Common validations for both buyer types
  // Address validation
  if (!form.residenceAddress) {
    errors.residenceAddress = form.buyer_type === "corporate" 
      ? "Office address is required" 
      : "Residence address is required";
  } else if (form.residenceAddress.length < 10) {
    errors.residenceAddress = "Please enter a complete address";
  }

  // Pincode validation
  if (!form.pincode) {
    errors.pincode = "Pincode is required";
  } else if (!/^\d{6}$/.test(form.pincode)) {
    errors.pincode = "Pincode must be 6 digits";
  }

  // City validation
  if (!form.city) {
    errors.city = "City is required";
  } else if (form.city.length < 2) {
    errors.city = "Please enter a valid city name";
  }

  // Alternate Phone validation (if provided)
  if (form.alternatePhone && !/^\d{10}$/.test(form.alternatePhone)) {
    errors.alternatePhone = "Alternate phone number must be 10 digits";
  }

  // Nominee validation (if any nominee field is filled)
  if (form.nomineeName || form.relation || form.nomineeAge) {
    if (!form.nomineeName) {
      errors.nomineeName = "Nominee name is required when adding nominee details";
    } else if (form.nomineeName.length < 2) {
      errors.nomineeName = "Nominee name must be at least 2 characters";
    }
    
    if (!form.relation) {
      errors.relation = "Nominee relation is required";
    }
    
    if (!form.nomineeAge) {
      errors.nomineeAge = "Nominee age is required";
    } else if (form.nomineeAge < 1 || form.nomineeAge > 130) {
      errors.nomineeAge = "Nominee age must be between 1 and 130 years";
    }
  }

  // Reference validation (if any reference field is filled)
  if (form.referenceName || form.referencePhone) {
    if (form.referenceName && form.referenceName.length < 2) {
      errors.referenceName = "Reference name must be at least 2 characters";
    }
    
    if (form.referencePhone && !/^\d{10}$/.test(form.referencePhone)) {
      errors.referencePhone = "Reference phone number must be 10 digits";
    }
  }

  return errors;
},

  // Step 2: Vehicle Details validation
  validateStep2: (form) => {
    const errors = {};

    // City validation
    if (!form.regNo) {
      errors.city = "City is required";
    }

    // Vehicle Make validation
    if (!form.make) {
      errors.make = "Vehicle make is required";
    }

    // Vehicle Model validation
    if (!form.model) {
      errors.model = "Vehicle model is required";
    }

    // Vehicle Variant validation
    if (!form.variant) {
      errors.variant = "Vehicle variant is required";
    }

    // Engine Number validation
    if (!form.engineNo) {
      errors.engineNo = "Engine number is required";
    } else if (form.engineNo.length < 3) {
      errors.engineNo = "Please enter a valid engine number";
    }

    // Chassis Number validation
    if (!form.chassisNo) {
      errors.chassisNo = "Chassis number is required";
    } else if (form.chassisNo.length < 3) {
      errors.chassisNo = "Please enter a valid chassis number";
    }

    // Manufacture Date validation
    if (!form.makeMonth) {
      errors.makeMonth = "Manufacture month is required";
    }
    if (!form.makeYear) {
      errors.makeYear = "Manufacture year is required";
    } else if (form.makeYear) {
      const currentYear = new Date().getFullYear();
      const makeYear = parseInt(form.makeYear);
      if (makeYear < 1900 || makeYear > currentYear) {
        errors.makeYear = "Please enter a valid manufacture year";
      }
    }

    return errors;
  },

  // Step 3: Insurance Quotes validation
validateStep3: (form, acceptedQuote = null) => {
  const errors = {};

  // Primary validation: Require at least one insurance quote
  if (!form.insuranceQuotes || form.insuranceQuotes.length === 0) {
    errors.insuranceQuotes = "At least one insurance quote is required";
  }

  // CRITICAL: Require an accepted quote to proceed
  if (!acceptedQuote) {
    errors.acceptedQuote = "Please accept a quote to proceed to the next step";
  }
    // Primary validation: Require at least one insurance quote
    if (!form.insuranceQuotes || form.insuranceQuotes.length === 0) {
      errors.insuranceQuotes = "At least one insurance quote is required";
    }

    // CRITICAL: Require an accepted quote to proceed
    if (!acceptedQuote) {
      errors.acceptedQuote = "Please accept a quote to proceed to the next step";
    }

    // Optional: Validate individual quote fields if using old system
    if ((!form.insuranceQuotes || form.insuranceQuotes.length === 0) && !form.insurer) {
      if (!form.insurer) errors.insurer = "Insurance company is required";
      if (!form.coverageType) errors.coverageType = "Coverage type is required";
      if (!form.premium) {
        errors.premium = "Premium amount is required";
      } else if (parseFloat(form.premium) <= 0) {
        errors.premium = "Premium amount must be greater than 0";
      }
      if (!form.idv) {
        errors.idv = "IDV amount is required";
      } else if (parseFloat(form.idv) <= 0) {
        errors.idv = "IDV amount must be greater than 0";
      }
    }
    

    // NCB validation (applies to both systems)
    if (form.ncb && (parseFloat(form.ncb) < 0 || parseFloat(form.ncb) > 100)) {
      errors.ncb = "NCB discount must be between 0% and 100%";
    }

    return errors;
  },


  // Step 4: New Policy Details validation
  validateStep4: (form) => {
    const errors = {};

    // Policy Issued Status validation
    if (!form.policyIssued) {
      errors.policyIssued = "Policy issued status is required";
    }

    // Insurance Company validation
    if (!form.insuranceCompany) {
      errors.insuranceCompany = "Insurance company is required";
    }

    // Policy/Covernote Number validation (if policy is issued)
    if (form.policyIssued === "yes") {
      if (!form.policyNumber && !form.covernoteNumber) {
        errors.policyNumber = "Policy number or covernote number is required when policy is issued";
      }
    }

    // Issue Date validation (if provided)
    if (form.issueDate) {
      const issueDate = new Date(form.issueDate);
      const today = new Date();
      
    
    }

    // Due Date validation (if provided)
    if (form.dueDate && form.issueDate) {
      const dueDate = new Date(form.dueDate);
      const issueDate = new Date(form.issueDate);
      
      if (dueDate <= issueDate) {
        errors.dueDate = "Due date must be after issue date";
      }
    }

    // NCB Discount validation (if provided)
    if (form.ncbDiscount && (parseFloat(form.ncbDiscount) < 0 || parseFloat(form.ncbDiscount) > 100)) {
      errors.ncbDiscount = "NCB discount must be between 0% and 100%";
    }

    // IDV Amount validation
    if (!form.idvAmount) {
      errors.idvAmount = "IDV amount is required";
    } else if (parseFloat(form.idvAmount) <= 0) {
      errors.idvAmount = "IDV amount must be greater than 0";
    }

    // Total Premium validation
    if (!form.totalPremium) {
      errors.totalPremium = "Total premium is required";
    } else if (parseFloat(form.totalPremium) <= 0) {
      errors.totalPremium = "Total premium must be greater than 0";
    }

    return errors;
  },

  // Step 5: Documents validation
  validateStep5: (form) => {
    const errors = {};

    // Documents validation - require at least one uploaded document
    if (!form.documents || form.documents.length === 0) {
      errors.documents = "At least one document is required";
    }

    return errors;
  },

  // Step 6: Payment validation
  validateStep6: (form) => {
    const errors = {};

    // Payment Made By validation
    if (!form.paymentMadeBy) {
      errors.paymentMadeBy = "Payment made by is required";
    }

    // Payment Mode validation
    if (!form.paymentMode) {
      errors.paymentMode = "Payment mode is required";
    }

    // Payment Amount validation
    if (!form.paymentAmount) {
      errors.paymentAmount = "Payment amount is required";
    } else if (parseFloat(form.paymentAmount) <= 0) {
      errors.paymentAmount = "Payment amount must be greater than 0";
    }

    // Payment Date validation
    if (!form.paymentDate) {
      errors.paymentDate = "Payment date is required";
    } else {
      const paymentDate = new Date(form.paymentDate);
      const today = new Date();
      
    }

    // Transaction ID validation
    if (!form.transactionId) {
      errors.transactionId = "Transaction ID is required";
    } else if (form.transactionId.length < 3) {
      errors.transactionId = "Please enter a valid transaction ID";
    }

    // Receipt Date validation
    if (!form.receiptDate) {
      errors.receiptDate = "Receipt date is required";
    } else if (form.paymentDate && form.receiptDate) {
      const receiptDate = new Date(form.receiptDate);
      const paymentDate = new Date(form.paymentDate);
      
      if (receiptDate < paymentDate) {
        errors.receiptDate = "Receipt date cannot be before payment date";
      }
    }

    // Bank Name validation
    if (!form.bankName) {
      errors.bankName = "Bank name is required";
    } else if (form.bankName.length < 2) {
      errors.bankName = "Please enter a valid bank name";
    }

    return errors;
  }
};

const steps = [
  "Case Details",
  "Vehicle Details",
  "Insurance Quotes",
  "Previous Policy",
  "New Policy Details",
  "Documents",
  "Payment",
  "Payout" 
];

const API_BASE_URL = "https://asia-south1-acillp-8c3f8.cloudfunctions.net/app/v1";

// ================== STEP 1: Case Details ==================
const CaseDetails = ({ form, handleChange, handleSave, isSaving, errors }) => (
  <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
    <div className="flex items-start justify-between">
      <div className="flex items-center gap-3">
        <div className="p-2 rounded-full bg-gray-100 text-gray-700">
          <FaUser />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-800">
            Step 1: Customer Information
          </h3>
          <p className="text-xs text-gray-500">
            Fill personal, contact and nominee details
          </p>
        </div>
      </div>
    </div>

    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
      {/* Buyer Type */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Buyer Type *
        </label>
        <div className="flex items-center gap-4">
          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="radio"
              name="buyer_type"
              value="individual"
              checked={form.buyer_type === "individual"}
              onChange={handleChange}
              className="form-radio"
            />
            <span>Individual</span>
          </label>
          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="radio"
              name="buyer_type"
              value="corporate"
              checked={form.buyer_type === "corporate"}
              onChange={handleChange}
              className="form-radio"
            />
            <span>Company</span>
          </label>
        </div>
        {errors.buyer_type && <p className="text-red-500 text-xs mt-1">{errors.buyer_type}</p>}
      </div>

      {/* Age (for individual) */}
      {form.buyer_type === "individual" && (
        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            Age *
          </label>
          <input
            type="number"
            name="age"
            value={form.age || ""}
            onChange={handleChange}
            placeholder="Enter age"
            min="1"
            max="130"
            className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
              errors.age ? "border-red-500" : "border-gray-300"
            }`}
          />
          {errors.age && <p className="text-red-500 text-xs mt-1">{errors.age}</p>}
        </div>
      )}

      {/* Mobile */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Mobile Number *
        </label>
        <div className="flex items-center gap-2">
          <span className="text-gray-500 px-3 py-2 border border-gray-200 rounded-l-md bg-gray-50">
            +91
          </span>
          <input
            type="text"
            name="mobile"
            value={form.mobile || ""}
            onChange={handleChange}
            placeholder="Enter 10-digit mobile number"
            className={`w-full border rounded-r-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
              errors.mobile ? "border-red-500" : "border-gray-300"
            }`}
          />
        </div>
        {errors.mobile && <p className="text-red-500 text-xs mt-1">{errors.mobile}</p>}
      </div>

      {/* Alternate Phone Number */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Alternate Phone Number
        </label>
        <div className="flex items-center gap-2">
          <span className="text-gray-500 px-3 py-2 border border-gray-200 rounded-l-md bg-gray-50">
            +91
          </span>
          <input
            type="text"
            name="alternatePhone"
            value={form.alternatePhone || ""}
            onChange={handleChange}
            placeholder="Enter alternate number"
            className="w-full border border-gray-300 rounded-r-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
          />
        </div>
      </div>

      {/* Individual Fields */}
      {form.buyer_type === "individual" && (
        <>
          {/* Customer Name */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Customer Name *
            </label>
            <div className="flex items-center">
              <FaUser className="text-gray-400 mr-2" />
              <input
                type="text"
                name="customerName"
                value={form.customerName || ""}
                onChange={handleChange}
                placeholder="Enter customer name"
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.customerName ? "border-red-500" : "border-gray-300"
                }`}
              />
            </div>
            {errors.customerName && <p className="text-red-500 text-xs mt-1">{errors.customerName}</p>}
          </div>

          {/* Email */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Email Address *
            </label>
            <div className="flex items-center">
              <FaEnvelope className="text-gray-400 mr-2" />
              <input
                type="email"
                name="email"
                value={form.email || ""}
                onChange={handleChange}
                placeholder="Enter email address"
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.email ? "border-red-500" : "border-gray-300"
                }`}
              />
            </div>
            {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
          </div>

          {/* Gender */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Gender *
            </label>
            <select
              name="gender"
              value={form.gender || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.gender ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select gender</option>
              <option value="male">Male</option>
              <option value="female">Female</option>
              <option value="other">Other</option>
            </select>
            {errors.gender && <p className="text-red-500 text-xs mt-1">{errors.gender}</p>}
          </div>

          {/* PAN */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              PAN Number
            </label>
            <input
              type="text"
              name="panNumber"
              value={form.panNumber || ""}
              onChange={handleChange}
              placeholder="ABCDE1234F"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.panNumber ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.panNumber && <p className="text-red-500 text-xs mt-1">{errors.panNumber}</p>}
          </div>

          {/* Aadhaar */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Aadhaar Number
            </label>
            <input
              type="text"
              name="aadhaarNumber"
              value={form.aadhaarNumber || ""}
              onChange={handleChange}
              placeholder="1234 5678 9012"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.aadhaarNumber ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.aadhaarNumber && <p className="text-red-500 text-xs mt-1">{errors.aadhaarNumber}</p>}
          </div>
        </>
      )}

      {/* Corporate Fields */}
      {form.buyer_type === "corporate" && (
        <>
          {/* Company Name */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Company Name *
            </label>
            <div className="flex items-center">
              <FaUser className="text-gray-400 mr-2" />
              <input
                type="text"
                name="companyName"
                value={form.companyName || ""}
                onChange={handleChange}
                placeholder="Enter company name"
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.companyName ? "border-red-500" : "border-gray-300"
                }`}
              />
            </div>
            {errors.companyName && <p className="text-red-500 text-xs mt-1">{errors.companyName}</p>}
          </div>

          {/* Contact Person Name */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Contact Person Name *
            </label>
            <input
              type="text"
              name="contactPersonName"
              value={form.contactPersonName || ""}
              onChange={handleChange}
              placeholder="Enter contact person name"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.contactPersonName ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.contactPersonName && <p className="text-red-500 text-xs mt-1">{errors.contactPersonName}</p>}
          </div>

          {/* Email */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Email Address *
            </label>
            <div className="flex items-center">
              <FaEnvelope className="text-gray-400 mr-2" />
              <input
                type="email"
                name="email"
                value={form.email || ""}
                onChange={handleChange}
                placeholder="Enter company email address"
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.email ? "border-red-500" : "border-gray-300"
                }`}
              />
            </div>
            {errors.email && <p className="text-red-500 text-xs mt-1">{errors.email}</p>}
          </div>

          {/* PAN Number */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              PAN Number *
            </label>
            <input
              type="text"
              name="companyPanNumber"
              value={form.companyPanNumber || ""}
              onChange={handleChange}
              placeholder="ABCDE1234F"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.companyPanNumber ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.companyPanNumber && <p className="text-red-500 text-xs mt-1">{errors.companyPanNumber}</p>}
          </div>

          {/* GST Number */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              GST Number *
            </label>
            <input
              type="text"
              name="gstNumber"
              value={form.gstNumber || ""}
              onChange={handleChange}
              placeholder="Enter GST number"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.gstNumber ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.gstNumber && <p className="text-red-500 text-xs mt-1">{errors.gstNumber}</p>}
          </div>
        </>
      )}

      {/* Address Fields (Common for both) */}
      <div className="md:col-span-2">
        <label className="block mb-1 text-sm font-medium text-gray-600">
          {form.buyer_type === "corporate" ? "Office Address *" : "Residence Address *"}
        </label>
        <input
          type="text"
          name="residenceAddress"
          value={form.residenceAddress || ""}
          onChange={handleChange}
          placeholder={form.buyer_type === "corporate" ? "Enter complete office address" : "Enter complete address"}
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.residenceAddress ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.residenceAddress && <p className="text-red-500 text-xs mt-1">{errors.residenceAddress}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Pincode *
        </label>
        <input
          type="text"
          name="pincode"
          value={form.pincode || ""}
          onChange={handleChange}
          placeholder="123456"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.pincode ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.pincode && <p className="text-red-500 text-xs mt-1">{errors.pincode}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          City *
        </label>
        <input
          type="text"
          name="city"
          value={form.city || ""}
          onChange={handleChange}
          placeholder="Enter city"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.city ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.city && <p className="text-red-500 text-xs mt-1">{errors.city}</p>}
      </div>

      {/* Nominee Info (Common for both, optional) */}
      <div className="md:col-span-2">
        <h4 className="text-md font-semibold mt-6">Nominee Information (Optional)</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-3">
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Nominee Name
            </label>
            <input
              type="text"
              name="nomineeName"
              value={form.nomineeName || ""}
              onChange={handleChange}
              placeholder="Nominee Name"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.nomineeName ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.nomineeName && <p className="text-red-500 text-xs mt-1">{errors.nomineeName}</p>}
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Relationship
            </label>
            <select
              name="relation"
              value={form.relation || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.relation ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select relation</option>
              <option value="spouse">Spouse</option>
              <option value="child">Child</option>
              <option value="parent">Parent</option>
              <option value="sibling">Sibling</option>
              <option value="grandparent">Grandparent</option>
              <option value="grandchild">Grandchild</option>
              <option value="uncle">Uncle</option>
              <option value="aunt">Aunt</option>
              <option value="nephew">Nephew</option>
              <option value="niece">Niece</option>
              <option value="cousin">Cousin</option>
              <option value="father_in_law">Father-in-law</option>
              <option value="mother_in_law">Mother-in-law</option>
              <option value="brother_in_law">Brother-in-law</option>
              <option value="sister_in_law">Sister-in-law</option>
              <option value="son_in_law">Son-in-law</option>
              <option value="daughter_in_law">Daughter-in-law</option>
              <option value="step_father">Step Father</option>
              <option value="step_mother">Step Mother</option>
              <option value="step_son">Step Son</option>
              <option value="step_daughter">Step Daughter</option>
              <option value="step_brother">Step Brother</option>
              <option value="step_sister">Step Sister</option>
              <option value="adopted_son">Adopted Son</option>
              <option value="adopted_daughter">Adopted Daughter</option>
              <option value="foster_child">Foster Child</option>
              <option value="legal_guardian">Legal Guardian</option>
              <option value="trust">Trust</option>
              <option value="friend">Friend</option>
              <option value="business_partner">Business Partner</option>
              <option value="employee">Employee</option>
              <option value="employer">Employer</option>
              <option value="other">Other</option>
            </select>
            {errors.relation && <p className="text-red-500 text-xs mt-1">{errors.relation}</p>}
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Nominee Age
            </label>
            <input
              type="number"
              name="nomineeAge"
              value={form.nomineeAge || ""}
              onChange={handleChange}
              placeholder="Nominee Age"
              min="1"
              max="130"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.nomineeAge ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.nomineeAge && <p className="text-red-500 text-xs mt-1">{errors.nomineeAge}</p>}
          </div>
        </div>
      </div>

      {/* Reference Info */}
      <div className="md:col-span-2">
        <h4 className="text-md font-semibold mt-6">Reference Information (Optional)</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-3">
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Reference Name
            </label>
            <input
              type="text"
              name="referenceName"
              value={form.referenceName || ""}
              onChange={handleChange}
              placeholder="Reference Name"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Reference Phone Number
            </label>
            <input
              type="text"
              name="referencePhone"
              value={form.referencePhone || ""}
              onChange={handleChange}
              placeholder="Reference Phone Number"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
            />
          </div>
        </div>
      </div>
    </div>
  </div>
);
// ================== STEP 2: Vehicle Details ==================
const VehicleDetails = ({ form, handleChange, handleSave, isSaving, errors }) => (
  <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
    <div className="flex items-start justify-between">
      <div className="flex items-center gap-3">
        <div className="p-2 rounded-full bg-gray-100 text-gray-700">
          <FaCar />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-800">
           Step 2: Vehicle Details
          </h3>
          <p className="text-xs text-gray-500">
            Provide accurate vehicle information
          </p>
        </div>
      </div>
      {/* <button
        type="button"
        onClick={handleSave}
        disabled={isSaving}
        className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
      >
        <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
      </button> */}
    </div>

    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
      <div className="md:col-span-2">
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Registration Number *
        </label>
        <input
          type="text"
          name="regNo"
          value={form.regNo || ""}
          onChange={handleChange}
          placeholder="Enter Vehicle Number"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.city ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.city && <p className="text-red-500 text-xs mt-1">{errors.city}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Vehicle Make *
        </label>
        <select
          name="make"
          value={form.make || ""}
          onChange={handleChange}
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.make ? "border-red-500" : "border-gray-300"
          }`}
        >
          <option value="">Select make</option>
          <option value="Maruti">Maruti</option>
          <option value="Hyundai">Hyundai</option>
          <option value="Honda">Honda</option>
        </select>
        {errors.make && <p className="text-red-500 text-xs mt-1">{errors.make}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Vehicle Model *
        </label>
        <input
          type="text"
          name="model"
          value={form.model || ""}
          onChange={handleChange}
          placeholder="Select model"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.model ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.model && <p className="text-red-500 text-xs mt-1">{errors.model}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Vehicle Variant *
        </label>
        <input
          type="text"
          name="variant"
          value={form.variant || ""}
          onChange={handleChange}
          placeholder="Select variant"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.variant ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.variant && <p className="text-red-500 text-xs mt-1">{errors.variant}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Engine Number *
        </label>
        <input
          type="text"
          name="engineNo"
          value={form.engineNo || ""}
          onChange={handleChange}
          placeholder="Enter engine number"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.engineNo ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.engineNo && <p className="text-red-500 text-xs mt-1">{errors.engineNo}</p>}
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Chassis Number *
        </label>
        <input
          type="text"
          name="chassisNo"
          value={form.chassisNo || ""}
          onChange={handleChange}
          placeholder="Enter chassis number"
          className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
            errors.chassisNo ? "border-red-500" : "border-gray-300"
          }`}
        />
        {errors.chassisNo && <p className="text-red-500 text-xs mt-1">{errors.chassisNo}</p>}
      </div>

      <div className="md:col-span-2">
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Manufacture Date *
        </label>
        <div className="flex gap-3">
          <div className="w-1/2">
            <select
              name="makeMonth"
              value={form.makeMonth || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.makeMonth ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Month</option>
              {[
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
              ].map((m) => (
                <option key={m} value={m}>
                  {m}
                </option>
              ))}
            </select>
            {errors.makeMonth && <p className="text-red-500 text-xs mt-1">{errors.makeMonth}</p>}
          </div>
          <div className="w-1/2">
            <input
              type="number"
              name="makeYear"
              value={form.makeYear || ""}
              onChange={handleChange}
              placeholder="Year"
              min='1500'
              max='3000'
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.makeYear ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.makeYear && <p className="text-red-500 text-xs mt-1">{errors.makeYear}</p>}
          </div>
        </div>
      </div>

      <div className="md:col-span-3">
        <div className="mt-4 p-3 rounded-md bg-gray-50 border border-gray-100 text-sm text-gray-600">
          <strong>Note:</strong> All vehicle details must be accurate as they
          will be verified during policy issuance.
        </div>
      </div>
    </div>
  </div>
);

// ================== STEP 3.5: Previous Policy Details ==================
const PreviousPolicyDetails = ({ form, handleChange, handleSave, isSaving, errors }) => {
  // Insurance companies dropdown options
  const insuranceCompanies = [
    "ICICI Lombard",
    "HDFC Ergo", 
    "Bajaj Allianz",
    "New India Assurance",
    "United India",
    "National Insurance",
    "Oriental Insurance",
    "Tata AIG",
    "Reliance General",
    "Cholamandalam",
  ];

  // NCB options dropdown
  const ncbOptions = [0, 20, 25, 35, 45, 50];

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaFileInvoiceDollar />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Step 3: Previous Policy Details
            </h3>
            <p className="text-xs text-gray-500">
              For renewal cases & policy already expired cases
            </p>
          </div>
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Previous Policy Information (All Fields Mandatory)
        </h4>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Insurance Company - Dropdown */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Insurance Company *
            </label>
            <select
              name="previousInsuranceCompany"
              value={form.previousInsuranceCompany || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.previousInsuranceCompany ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select Insurance Company</option>
              {insuranceCompanies.map((company, index) => (
                <option key={index} value={company}>
                  {company}
                </option>
              ))}
            </select>
            {errors.previousInsuranceCompany && <p className="text-red-500 text-xs mt-1">{errors.previousInsuranceCompany}</p>}
          </div>

          {/* Policy Number */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Policy Number *
            </label>
            <input
              type="text"
              name="previousPolicyNumber"
              value={form.previousPolicyNumber || ""}
              onChange={handleChange}
              placeholder="Enter previous policy number"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.previousPolicyNumber ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.previousPolicyNumber && <p className="text-red-500 text-xs mt-1">{errors.previousPolicyNumber}</p>}
          </div>

          {/* Policy Type */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Policy Type *
            </label>
            <select
              name="previousPolicyType"
              value={form.previousPolicyType || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.previousPolicyType ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select policy type</option>
              <option value="comprehensive">Comprehensive</option>
              <option value="thirdParty">Third Party</option>
            </select>
            {errors.previousPolicyType && <p className="text-red-500 text-xs mt-1">{errors.previousPolicyType}</p>}
          </div>

          {/* Issue Date */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Issue Date *
            </label>
            <input
              type="date"
              name="previousIssueDate"
              value={form.previousIssueDate || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.previousIssueDate ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.previousIssueDate && <p className="text-red-500 text-xs mt-1">{errors.previousIssueDate}</p>}
          </div>

          {/* Due Date */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Due Date *
            </label>
            <input
              type="date"
              name="previousDueDate"
              value={form.previousDueDate || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.previousDueDate ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.previousDueDate && <p className="text-red-500 text-xs mt-1">{errors.previousDueDate}</p>}
          </div>

          {/* Claim Taken Last Year */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Claim Taken Last Year *
            </label>
            <div className="flex gap-4">
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="previousClaimTaken"
                  value="yes"
                  checked={form.previousClaimTaken === "yes"}
                  onChange={handleChange}
                  className="h-4 w-4"
                />
                Yes
              </label>
              <label className="flex items-center gap-2">
                <input
                  type="radio"
                  name="previousClaimTaken"
                  value="no"
                  checked={form.previousClaimTaken === "no"}
                  onChange={handleChange}
                  className="h-4 w-4"
                />
                No
              </label>
            </div>
            {errors.previousClaimTaken && <p className="text-red-500 text-xs mt-1">{errors.previousClaimTaken}</p>}
          </div>

          {/* NCB Discount - Dropdown */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              NCB Discount (%) *
            </label>
            <select
              name="previousNcbDiscount"
              value={form.previousNcbDiscount || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.previousNcbDiscount ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select NCB %</option>
              {ncbOptions.map(ncb => (
                <option key={ncb} value={ncb}>
                  {ncb}%
                </option>
              ))}
            </select>
            {errors.previousNcbDiscount && <p className="text-red-500 text-xs mt-1">{errors.previousNcbDiscount}</p>}
          </div>
        </div>
      </div>

      
    </div>
  );
};

// Updated validation function
const previousPolicyValidation = (form) => {
  const errors = {};

  if (!form.previousInsuranceCompany) {
    errors.previousInsuranceCompany = "Previous insurance company is required";
  }

  if (!form.previousPolicyNumber) {
    errors.previousPolicyNumber = "Previous policy number is required";
  }

  if (!form.previousPolicyType) {
    errors.previousPolicyType = "Previous policy type is required";
  }

  if (!form.previousIssueDate) {
    errors.previousIssueDate = "Previous issue date is required";
  }

  if (!form.previousDueDate) {
    errors.previousDueDate = "Previous due date is required";
  }

  if (!form.previousClaimTaken) {
    errors.previousClaimTaken = "Claim history is required";
  }

  if (!form.previousNcbDiscount) {
    errors.previousNcbDiscount = "Previous NCB discount is required";
  } else if (parseFloat(form.previousNcbDiscount) < 0 || parseFloat(form.previousNcbDiscount) > 100) {
    errors.previousNcbDiscount = "NCB discount must be between 0% and 100%";
  }

  return errors;
};
// ================== STEP 4: Insurance Quotes ==================
const InsuranceQuotes = ({ form, handleChange, handleSave, isSaving, errors, onInsuranceQuotesUpdate, onQuoteAccepted, isEditMode = false }) => {
  // Use quotes from form props with localStorage fallback
  const [quotes, setQuotes] = useState(() => {
    try {
      // Priority 1: Quotes from form (for edit mode)
      if (form.insuranceQuotes && form.insuranceQuotes.length > 0) {
        console.log("🔄 Loading quotes from form:", form.insuranceQuotes.length);
        return form.insuranceQuotes;
      }
      // Priority 2: Quotes from localStorage (for new cases)
      const savedQuotes = localStorage.getItem('insuranceQuotes');
      return savedQuotes ? JSON.parse(savedQuotes) : [];
    } catch (error) {
      console.error('Error loading quotes:', error);
      return [];
    }
  });
  
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedQuotes, setSelectedQuotes] = useState([]);
  const [expandedQuotes, setExpandedQuotes] = useState([]);
  const [acceptedQuote, setAcceptedQuote] = useState(null);
  
  // Determine NCB eligibility based on previous claim
  const isNcbEligible = form.previousClaimTaken !== "yes";
  
  // Set default NCB value based on claim status
  const getDefaultNcb = () => {
    if (!isNcbEligible) {
      return "0"; // 0% if claim was taken
    }
    return "25"; // 25% default if no claim
  };

  const [manualQuote, setManualQuote] = useState({
    insuranceCompany: '',
    coverageType: 'comprehensive',
    idv: '',
    policyDuration: '1',
    ncbDiscount: getDefaultNcb(),
    odAmount: '',
    thirdPartyAmount: '',
    premium: '',
    addOns: {
      zeroDep: { selected: false, amount: '', rate: '' },
      consumables: { selected: false, amount: '', rate: '' },
      roadSideAssist: { selected: false, amount: '', rate: '' },
      keyReplacement: { selected: false, amount: '', rate: '' },
      engineProtect: { selected: false, amount: '', rate: '' },
      returnToInvoice: { selected: false, amount: '', rate: '' },
      personalAccident: { selected: false, amount: '', rate: '' },
      tyreProtection: { selected: false, amount: '', rate: '' },
      emergencyMedical: { selected: false, amount: '', rate: '' }
    }
  });

  // Load accepted quote in edit mode
  useEffect(() => {
    if (isEditMode && quotes.length > 0 && !acceptedQuote) {
      // Strategy 1: Look for quote with accepted flag
      let previouslyAcceptedQuote = quotes.find(quote => quote.accepted === true);
      
      // Strategy 2: If no accepted flag, use the first quote (fallback)
      if (!previouslyAcceptedQuote && quotes.length > 0) {
        previouslyAcceptedQuote = quotes[0];
        console.log("🔄 No accepted flag found, using first quote as fallback");
      }
      
      if (previouslyAcceptedQuote) {
        console.log("🔄 Loading accepted quote in edit mode:", previouslyAcceptedQuote.insuranceCompany);
        setAcceptedQuote(previouslyAcceptedQuote);
        
        // Notify parent component
        if (onQuoteAccepted) {
          onQuoteAccepted(previouslyAcceptedQuote);
        }
      }
    }
  }, [isEditMode, quotes, acceptedQuote, onQuoteAccepted]);

  // Function to accept a quote for policy creation
  const acceptQuote = (quote) => {
    setAcceptedQuote(quote);
    console.log("✅ Quote accepted:", quote.insuranceCompany, "Premium: ₹" + quote.totalPremium);
    
    // Call callback to inform parent component
    if (onQuoteAccepted) {
      onQuoteAccepted(quote);
    }
  };

  // Function to unaccept quote
  const unacceptQuote = () => {
    setAcceptedQuote(null);
    console.log("❌ Quote unaccepted");
    
    // Call callback to inform parent component
    if (onQuoteAccepted) {
      onQuoteAccepted(null);
    }
  };

  // Update manualQuote when claim status changes
  useEffect(() => {
    setManualQuote(prev => ({
      ...prev,
      ncbDiscount: getDefaultNcb()
    }));
  }, [form.previousClaimTaken]);

  // Save quotes to localStorage AND sync with parent form
  useEffect(() => {
    try {
      localStorage.setItem('insuranceQuotes', JSON.stringify(quotes));
      console.log("💾 Saved quotes to localStorage:", quotes.length);
    } catch (error) {
      console.error('Error saving quotes to localStorage:', error);
    }
  }, [quotes]);

  // Sync quotes with parent form whenever quotes change
  useEffect(() => {
    if (onInsuranceQuotesUpdate) {
      const currentQuotes = quotes || [];
      const formQuotes = form.insuranceQuotes || [];
      
      if (JSON.stringify(currentQuotes) !== JSON.stringify(formQuotes)) {
        console.log("🔄 Syncing quotes to parent:", quotes.length);
        onInsuranceQuotesUpdate(quotes);
      }
    }
  }, [quotes, onInsuranceQuotesUpdate, form.insuranceQuotes]);

  // Sync with form.insuranceQuotes when they change externally (edit mode)
  useEffect(() => {
    if (form.insuranceQuotes && JSON.stringify(form.insuranceQuotes) !== JSON.stringify(quotes)) {
      console.log("🔄 External quotes update detected:", form.insuranceQuotes.length);
      setQuotes(form.insuranceQuotes);
    }
  }, [form.insuranceQuotes]);

  // Calculate add-ons total
  const calculateAddOnsTotal = () => {
    return Object.entries(manualQuote.addOns).reduce((total, [key, addOn]) => {
      if (addOn.selected) {
        const amount = parseFloat(addOn.amount) || 0;
        return total + amount;
      }
      return total;
    }, 0);
  };

  // Calculate total premium with GST as (odAmount + thirdPartyAmount + addOnsTotal) + 18% GST
  const calculateTotalPremium = () => {
    const odAmount = parseFloat(manualQuote.odAmount) || 0;
    const thirdPartyAmount = parseFloat(manualQuote.thirdPartyAmount) || 0;
    const addOnsTotal = calculateAddOnsTotal();
    
    const baseAmount = odAmount + thirdPartyAmount + addOnsTotal;
    const gstAmount = baseAmount * 0.18;
    const totalWithGst = baseAmount + gstAmount;
    
    return Math.round(totalWithGst);
  };

  // Calculate base premium without GST for display
  const calculateBasePremium = () => {
    const odAmount = parseFloat(manualQuote.odAmount) || 0;
    const thirdPartyAmount = parseFloat(manualQuote.thirdPartyAmount) || 0;
    const addOnsTotal = calculateAddOnsTotal();
    
    return odAmount + thirdPartyAmount + addOnsTotal;
  };

  // Calculate GST amount for display
  const calculateGstAmount = () => {
    const baseAmount = calculateBasePremium();
    return baseAmount * 0.18;
  };

  // Insurance companies with real image paths and colors
  const insuranceCompanies = [
    { 
      name: "ICICI Lombard", 
      logo: icici,
      fallbackLogo: "🏦",
      color: "#FF6B35",
      bgColor: "#FFF0EB"
    },
    { 
      name: "HDFC Ergo", 
      logo: hdfc,
      fallbackLogo: "🏛️",
      color: "#2E8B57",
      bgColor: "#F0FFF0"
    },
    { 
      name: "Bajaj Allianz", 
      logo: bajaj,
      fallbackLogo: "🛡️",
      color: "#0056B3",
      bgColor: "#F0F8FF"
    },
    { 
      name: "New India Assurance", 
      logo: indiau,
      fallbackLogo: "🇮🇳",
      color: "#FF8C00",
      bgColor: "#FFF8F0"
    },
    { 
      name: "United India", 
      logo: uindia,
      fallbackLogo: "🤝",
      color: "#8B4513",
      bgColor: "#FFF8F0"
    },
    { 
      name: "National Insurance", 
      logo: nis,
      fallbackLogo: "🏢",
      color: "#228B22",
      bgColor: "#F0FFF0"
    },
    { 
      name: "Oriental Insurance", 
      logo: orient,
      fallbackLogo: "🌅",
      color: "#DC143C",
      bgColor: "#FFF0F5"
    },
    { 
      name: "Tata AIG", 
      logo: tata,
      fallbackLogo: "🚗",
      color: "#0066CC",
      bgColor: "#F0F8FF"
    },
    { 
      name: "Reliance General", 
      logo: reliance,
      fallbackLogo: "⚡",
      color: "#FF4500",
      bgColor: "#FFF0EB"
    },
    { 
      name: "Cholamandalam", 
      logo: chola,
      fallbackLogo: "💎",
      color: "#800080",
      bgColor: "#F8F0FF"
    }
  ];

  // Add-on descriptions only (no fixed rates)
  const addOnDescriptions = {
    zeroDep: "Zero Depreciation Cover",
    consumables: "Consumables Cover",
    roadSideAssist: "Road Side Assistance",
    keyReplacement: "Key & Lock Replacement",
    engineProtect: "Engine Protect",
    returnToInvoice: "Return to Invoice",
    personalAccident: "Personal Accident Cover",
    tyreProtection: "Tyre Protection",
    emergencyMedical: "Emergency Medical"
  };

  // NCB options
  const ncbOptions = [0, 20, 25, 35, 45, 50];

  // Handle manual quote input changes
  const handleManualQuoteChange = (e) => {
    const { name, value } = e.target;
    
    // Prevent NCB changes if not eligible
    if (name === "ncbDiscount" && !isNcbEligible) {
      return;
    }
    
    setManualQuote(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle add-on changes
  const handleAddOnChange = (addOnKey, field, value) => {
    setManualQuote(prev => {
      const updatedAddOns = { ...prev.addOns };
      
      if (field === 'selected') {
        updatedAddOns[addOnKey] = {
          ...updatedAddOns[addOnKey],
          selected: value,
          amount: '',
          rate: ''
        };
      } else if (field === 'rate' && value && prev.idv) {
        // Calculate amount when rate changes and IDV is available
        const calculatedAmount = Math.round((parseFloat(prev.idv) || 0) * (parseFloat(value) / 100));
        updatedAddOns[addOnKey] = {
          ...updatedAddOns[addOnKey],
          [field]: value,
          amount: calculatedAmount.toString()
        };
      } else if (field === 'amount' && value && prev.idv) {
        // Calculate rate when amount changes and IDV is available
        const calculatedRate = ((parseFloat(value) || 0) / (parseFloat(prev.idv) || 1) * 100).toFixed(2);
        updatedAddOns[addOnKey] = {
          ...updatedAddOns[addOnKey],
          [field]: value,
          rate: calculatedRate
        };
      } else {
        updatedAddOns[addOnKey] = {
          ...updatedAddOns[addOnKey],
          [field]: value
        };
      }

      return {
        ...prev,
        addOns: updatedAddOns
      };
    });
  };

  // Auto-calculate add-ons when IDV changes
  React.useEffect(() => {
    if (manualQuote.idv) {
      const updatedAddOns = { ...manualQuote.addOns };
      let needsUpdate = false;

      Object.keys(updatedAddOns).forEach(key => {
        const addOn = updatedAddOns[key];
        if (addOn.selected && addOn.rate) {
          const calculatedAmount = Math.round((parseFloat(manualQuote.idv) || 0) * (parseFloat(addOn.rate) / 100));
          if (calculatedAmount !== parseFloat(addOn.amount || 0)) {
            updatedAddOns[key] = {
              ...addOn,
              amount: calculatedAmount.toString()
            };
            needsUpdate = true;
          }
        }
      });

      if (needsUpdate) {
        setManualQuote(prev => ({
          ...prev,
          addOns: updatedAddOns
        }));
      }
    }
  }, [manualQuote.idv]);

  // Add manual quote
  const addManualQuote = () => {
    if (!manualQuote.insuranceCompany || !manualQuote.coverageType || !manualQuote.idv) {
      alert("Please fill all required fields: Insurance Company, Coverage Type, and IDV");
      return;
    }

    const company = insuranceCompanies.find(c => c.name === manualQuote.insuranceCompany);
    const addOnsPremium = calculateAddOnsTotal();
    const totalPremium = calculateTotalPremium();
    const basePremium = calculateBasePremium();
    const gstAmount = calculateGstAmount();

    const newQuote = {
      id: Date.now().toString(),
      insuranceCompany: manualQuote.insuranceCompany,
      companyLogo: company?.logo || '',
      companyFallbackLogo: company?.fallbackLogo || '🏢',
      companyColor: company?.color || '#000',
      companyBgColor: company?.bgColor || '#fff',
      coverageType: manualQuote.coverageType,
      idv: parseFloat(manualQuote.idv),
      policyDuration: parseInt(manualQuote.policyDuration),
      ncbDiscount: parseInt(manualQuote.ncbDiscount),
      odAmount: manualQuote.odAmount ? parseFloat(manualQuote.odAmount) : 0,
      thirdPartyAmount: manualQuote.thirdPartyAmount ? parseFloat(manualQuote.thirdPartyAmount) : 0,
      premium: basePremium,
      gstAmount: gstAmount,
      totalPremium: totalPremium,
      addOnsPremium: addOnsPremium,
      selectedAddOns: Object.entries(manualQuote.addOns)
        .filter(([_, addOn]) => addOn.selected)
        .reduce((acc, [key, addOn]) => {
          acc[key] = {
            description: addOnDescriptions[key],
            amount: parseFloat(addOn.amount) || 0,
            rate: parseFloat(addOn.rate) || 0
          };
          return acc;
        }, {}),
      createdAt: new Date().toISOString(),
      accepted: false // Initialize as not accepted
    };

    const updatedQuotes = [...quotes, newQuote];
    console.log("➕ Adding new quote. Previous:", quotes.length, "New:", updatedQuotes.length);
    setQuotes(updatedQuotes);

    // Reset manual quote form but keep NCB setting based on eligibility
    setManualQuote({
      insuranceCompany: '',
      coverageType: 'comprehensive',
      idv: '',
      policyDuration: '1',
      ncbDiscount: getDefaultNcb(),
      odAmount: '',
      thirdPartyAmount: '',
      premium: '',
      addOns: {
        zeroDep: { selected: false, amount: '', rate: '' },
        consumables: { selected: false, amount: '', rate: '' },
        roadSideAssist: { selected: false, amount: '', rate: '' },
        keyReplacement: { selected: false, amount: '', rate: '' },
        engineProtect: { selected: false, amount: '', rate: '' },
        returnToInvoice: { selected: false, amount: '', rate: '' },
        personalAccident: { selected: false, amount: '', rate: '' },
        tyreProtection: { selected: false, amount: '', rate: '' },
        emergencyMedical: { selected: false, amount: '', rate: '' }
      }
    });
  };

  // Remove quote
  const removeQuote = (index) => {
    console.log("🗑️ Removing quote at index:", index);
    const quoteToRemove = quotes[index];
    
    // If removing the accepted quote, unaccept it first
    if (acceptedQuote && acceptedQuote.id === quoteToRemove.id) {
      unacceptQuote();
    }
    
    const updatedQuotes = quotes.filter((_, i) => i !== index);
    setQuotes(updatedQuotes);
    setSelectedQuotes(selectedQuotes.filter(selectedIndex => selectedIndex !== index));
    setExpandedQuotes(expandedQuotes.filter(expandedIndex => expandedIndex !== index));
  };

  // Clear all quotes
  const clearAllQuotes = () => {
    if (window.confirm('Are you sure you want to clear all quotes? This action cannot be undone.')) {
      console.log("🧹 Clearing all quotes");
      const updatedQuotes = [];
      setQuotes(updatedQuotes);
      setSelectedQuotes([]);
      setExpandedQuotes([]);
      setAcceptedQuote(null);
      
      // Clear localStorage too
      localStorage.removeItem('insuranceQuotes');
      
      // Notify parent about quote unacceptance
      if (onQuoteAccepted) {
        onQuoteAccepted(null);
      }
    }
  };

  // Toggle quote selection
  const toggleQuoteSelection = (index) => {
    setSelectedQuotes(prev =>
      prev.includes(index)
        ? prev.filter(i => i !== index)
        : [...prev, index]
    );
  };

  // Toggle quote expansion
  const toggleQuoteExpansion = (index) => {
    setExpandedQuotes(prev =>
      prev.includes(index)
        ? prev.filter(i => i !== index)
        : [...prev, index]
    );
  };

  // Select all quotes
  const selectAllQuotes = () => {
    setSelectedQuotes(quotes.map((_, index) => index));
  };

  // Deselect all quotes
  const deselectAllQuotes = () => {
    setSelectedQuotes([]);
  };

  // Enhanced PDF generation with professional layout
  const downloadSelectedQuotesPDF = () => {
    if (selectedQuotes.length === 0) {
      alert("Please select at least one quote to download");
      return;
    }

    const selectedQuoteData = selectedQuotes.map(index => quotes[index]);
    downloadQuotesPDF(selectedQuoteData);
  };

  // Professional PDF generation function
  const downloadQuotesPDF = (quotesToDownload) => {
    try {
      setIsGenerating(true);
      
      const pdf = new jsPDF();
      const pageWidth = pdf.internal.pageSize.width;
      const pageHeight = pdf.internal.pageSize.height;
      const margin = 20;
      const contentWidth = pageWidth - (2 * margin);

      // Set professional color scheme
      const primaryColor = [41, 128, 185];
      const secondaryColor = [52, 152, 219];
      const accentColor = [46, 204, 113];
      const textColor = [51, 51, 51];
      const lightGray = [245, 245, 245];

      // Header with gradient effect
      pdf.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
      pdf.rect(0, 0, pageWidth, 80, 'F');
      
      // Company Logo and Title
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.setTextColor(255, 255, 255);
      pdf.text('INSURANCE QUOTES COMPARISON', pageWidth / 2, 35, { align: 'center' });
      
      pdf.setFontSize(12);
      pdf.text('AutoCredit Insurance - Professional Quote Analysis', pageWidth / 2, 45, { align: 'center' });
      
      // Customer Information Box
      pdf.setFillColor(255, 255, 255);
      pdf.rect(margin, 60, contentWidth, 25, 'F');
      pdf.setDrawColor(200, 200, 200);
      pdf.rect(margin, 60, contentWidth, 25, 'S');
      
      pdf.setFontSize(10);
      pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CUSTOMER DETAILS:', margin + 5, 70);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Name: ${form.customerName || 'Not Provided'}`, margin + 5, 77);
      pdf.text(`Vehicle: ${form.make || ''} ${form.model || ''} ${form.variant || ''}`, margin + 80, 77);
      pdf.text(`Date: ${new Date().toLocaleDateString('en-IN')}`, pageWidth - margin - 5, 77, { align: 'right' });

      let yPosition = 95;

      // Summary Statistics
      if (quotesToDownload.length > 1) {
        const lowestPremium = Math.min(...quotesToDownload.map(q => q.totalPremium));
        const highestPremium = Math.max(...quotesToDownload.map(q => q.totalPremium));
        const avgPremium = quotesToDownload.reduce((sum, q) => sum + q.totalPremium, 0) / quotesToDownload.length;

        pdf.setFillColor(lightGray[0], lightGray[1], lightGray[2]);
        pdf.rect(margin, yPosition, contentWidth, 20, 'F');
        pdf.setDrawColor(200, 200, 200);
        pdf.rect(margin, yPosition, contentWidth, 20, 'S');
        
        pdf.setFontSize(9);
        pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
        pdf.setFont('helvetica', 'bold');
        pdf.text('QUOTE SUMMARY:', margin + 5, yPosition + 8);
        pdf.setFont('helvetica', 'normal');
        
        pdf.text(`Total Quotes: ${quotesToDownload.length}`, margin + 5, yPosition + 15);
        pdf.text(`Lowest Premium: ₹${lowestPremium.toLocaleString('en-IN')}`, margin + 60, yPosition + 15);
        pdf.text(`Highest Premium: ₹${highestPremium.toLocaleString('en-IN')}`, margin + 120, yPosition + 15);
        pdf.text(`Average Premium: ₹${avgPremium.toLocaleString('en-IN')}`, pageWidth - margin - 5, yPosition + 15, { align: 'right' });
        
        yPosition += 30;
      }

      // Main Comparison Table
      createProfessionalComparisonTable(pdf, quotesToDownload, margin, yPosition, pageWidth, pageHeight);

      // Footer
      const footerY = pageHeight - 15;
      pdf.setFontSize(8);
      pdf.setTextColor(100, 100, 100);
      pdf.text('Generated by AutoCredit Insurance | Contact: support@autocredit.com | Phone: +91-XXXXX-XXXXX', 
               pageWidth / 2, footerY, { align: 'center' });

      const fileName = `insurance-quotes-${form.customerName || 'customer'}-${new Date().getTime()}.pdf`;
      pdf.save(fileName);
    } catch (error) {
      console.error('Error generating PDF:', error);
      alert('Error generating PDF. Please try again.');
    } finally {
      setIsGenerating(false);
    }
  };

  // Professional table creation function
  const createProfessionalComparisonTable = (pdf, quotes, startX, startY, pageWidth, pageHeight) => {
    const margin = 20;
    const tableWidth = pageWidth - (2 * margin);
    
    // Enhanced column structure for better comparison
    const colWidths = [
      tableWidth * 0.16, // Company
      tableWidth * 0.10, // Coverage
      tableWidth * 0.12, // IDV
      tableWidth * 0.10, // Base Premium
      tableWidth * 0.08, // Add-ons
      tableWidth * 0.08, // NCB
      tableWidth * 0.12, // Total Premium
      tableWidth * 0.08, // Duration
      tableWidth * 0.16  // Key Features
    ];
    
    let yPosition = startY;
    
    // Table headers
    const headers = ['Insurance Company', 'Coverage', 'IDV (₹)', 'Base Premium', 'Add-ons', 'NCB %', 'Total Premium', 'Term', 'Key Features'];
    
    // Draw professional table header
    pdf.setFillColor(52, 152, 219);
    pdf.rect(margin, yPosition, tableWidth, 12, 'F');
    
    pdf.setFontSize(9);
    pdf.setTextColor(255, 255, 255);
    pdf.setFont('helvetica', 'bold');
    
    let xPosition = margin;
    headers.forEach((header, index) => {
      pdf.text(header, xPosition + 2, yPosition + 8);
      xPosition += colWidths[index];
    });
    
    yPosition += 12;
    
    // Sort quotes by total premium (lowest first)
    const sortedQuotes = [...quotes].sort((a, b) => a.totalPremium - b.totalPremium);
    
    // Table rows
    pdf.setTextColor(0, 0, 0);
    pdf.setFont('helvetica', 'normal');
    pdf.setFontSize(8);
    
    sortedQuotes.forEach((quote, rowIndex) => {
      // Check for page break
      if (yPosition > pageHeight - 40) {
        pdf.addPage();
        yPosition = 20;
        // Redraw header on new page
        pdf.setFillColor(52, 152, 219);
        pdf.rect(margin, yPosition, tableWidth, 12, 'F');
        pdf.setFontSize(9);
        pdf.setTextColor(255, 255, 255);
        pdf.setFont('helvetica', 'bold');
        
        let headerX = margin;
        headers.forEach((header, index) => {
          pdf.text(header, headerX + 2, yPosition + 8);
          headerX += colWidths[index];
        });
        
        yPosition += 12;
        pdf.setTextColor(0, 0, 0);
        pdf.setFont('helvetica', 'normal');
        pdf.setFontSize(8);
      }
      
      // Alternate row colors for better readability
      if (rowIndex % 2 === 0) {
        pdf.setFillColor(250, 250, 250);
      } else {
        pdf.setFillColor(255, 255, 255);
      }
      pdf.rect(margin, yPosition, tableWidth, 25, 'F');
      pdf.setDrawColor(220, 220, 220);
      pdf.rect(margin, yPosition, tableWidth, 25, 'S');
      
      xPosition = margin;
      
      // Company name (truncated if too long)
      const companyName = quote.insuranceCompany.length > 12 ? 
        quote.insuranceCompany.substring(0, 12) + '...' : quote.insuranceCompany;
      pdf.setFont('helvetica', 'bold');
      pdf.text(companyName, xPosition + 2, yPosition + 8);
      xPosition += colWidths[0];
      
      // Coverage type
      pdf.setFont('helvetica', 'normal');
      const coverageType = quote.coverageType === 'comprehensive' ? 'Comp' : '3rd Party';
      pdf.text(coverageType, xPosition + 2, yPosition + 8);
      xPosition += colWidths[1];
      
      // IDV
      pdf.text(`₹${(quote.idv || 0).toLocaleString('en-IN')}`, xPosition + 2, yPosition + 8);
      xPosition += colWidths[2];
      
      // Base Premium
      pdf.text(`₹${(quote.premium || 0).toLocaleString('en-IN')}`, xPosition + 2, yPosition + 8);
      xPosition += colWidths[3];
      
      // Add-ons count with amount
      const addOnsCount = Object.keys(quote.selectedAddOns || {}).length;
      const addOnsText = addOnsCount > 0 ? 
        `${addOnsCount} (₹${quote.addOnsPremium.toLocaleString('en-IN')})` : '0';
      pdf.text(addOnsText, xPosition + 2, yPosition + 8);
      xPosition += colWidths[4];
      
      // NCB with discount amount
      const ncbDiscountAmount = Math.round((quote.premium || 0) * (quote.ncbDiscount / 100));
      pdf.text(`${quote.ncbDiscount}%`, xPosition + 2, yPosition + 8);
      pdf.setFontSize(7);
      pdf.setTextColor(0, 128, 0);
      pdf.text(`(₹${ncbDiscountAmount.toLocaleString('en-IN')})`, xPosition + 2, yPosition + 13);
      pdf.setFontSize(8);
      pdf.setTextColor(0, 0, 0);
      xPosition += colWidths[5];
      
      // Total Premium (highlighted) - Mark best price
      pdf.setFont('helvetica', 'bold');
      if (rowIndex === 0 && sortedQuotes.length > 1) {
        pdf.setTextColor(46, 204, 113); // Green for best price
        pdf.text(`₹${(quote.totalPremium || 0).toLocaleString('en-IN')} ✓`, xPosition + 2, yPosition + 8);
      } else {
        pdf.setTextColor(0, 0, 0);
        pdf.text(`₹${(quote.totalPremium || 0).toLocaleString('en-IN')}`, xPosition + 2, yPosition + 8);
      }
      pdf.setFont('helvetica', 'normal');
      xPosition += colWidths[6];
      
      // Duration
      pdf.text(`${quote.policyDuration}Y`, xPosition + 2, yPosition + 8);
      xPosition += colWidths[7];
      
      // Key Features (first 2-3 add-ons or main features)
      const addOnsList = Object.values(quote.selectedAddOns || {});
      let keyFeatures = 'Basic';
      if (addOnsList.length > 0) {
        keyFeatures = addOnsList.slice(0, 2).map(addOn => 
          addOn.description.split(' ')[0]
        ).join(', ');
        if (addOnsList.length > 2) {
          keyFeatures += '...';
        }
      }
      pdf.text(keyFeatures, xPosition + 2, yPosition + 8);
      
      // Additional info in second line
      pdf.setFontSize(7);
      pdf.setTextColor(100, 100, 100);
      const savedAmount = ncbDiscountAmount > 0 ? `Save: ₹${ncbDiscountAmount.toLocaleString('en-IN')}` : '';
      pdf.text(savedAmount, margin + 2, yPosition + 18);
      
      // Reset for next row
      pdf.setFontSize(8);
      pdf.setTextColor(0, 0, 0);
      
      yPosition += 25;
    });

    // Add recommendation note if multiple quotes
    if (sortedQuotes.length > 1) {
      yPosition += 5;
      pdf.setFontSize(9);
      pdf.setTextColor(46, 204, 113);
      pdf.setFont('helvetica', 'bold');
      pdf.text('✓ Best Value: ' + sortedQuotes[0].insuranceCompany + ' (₹' + 
               sortedQuotes[0].totalPremium.toLocaleString('en-IN') + ')', margin, yPosition);
    }

    return yPosition;
  };

  // Calculate current totals for display
  const currentBasePremium = calculateBasePremium();
  const currentGstAmount = calculateGstAmount();
  const currentTotalPremium = calculateTotalPremium();
  const currentAddOnsTotal = calculateAddOnsTotal();

  // Component for company logo with fallback
  const CompanyLogo = ({ company, className = "w-8 h-8" }) => {
    const [imgError, setImgError] = useState(false);

    if (imgError || !company?.logo) {
      return (
        <div 
          className={`${className} rounded-full flex items-center justify-center text-lg`}
          style={{ backgroundColor: company?.bgColor }}
        >
          {company?.fallbackLogo}
        </div>
      );
    }

    return (
      <img
        src={company.logo}
        alt={`${company.name} logo`}
        className={`${className} rounded-full object-cover`}
        onError={() => setImgError(true)}
      />
    );
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-6">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h3 className="text-lg font-semibold text-gray-800">Step 4: Insurance Quotes</h3>
          <p className="text-sm text-gray-500">
            Quotes: {quotes.length} | Required: At least 1 | {acceptedQuote ? `✅ ${acceptedQuote.insuranceCompany} Accepted` : '❌ No Quote Accepted'}
            {isEditMode && acceptedQuote && <span className="text-green-600 ml-2">• Loaded from saved data</span>}
          </p>
        </div>
        {quotes.length > 0 && (
          <button
            onClick={clearAllQuotes}
            className="px-4 py-2 bg-red-600 text-white text-sm rounded-lg hover:bg-red-700 transition-colors"
          >
            Clear All Quotes
          </button>
        )}
      </div>
      
      {/* Edit Mode Banner */}
      {isEditMode && (
        <div className="mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
          <div className="flex items-center space-x-3">
            <FaInfoCircle className="w-5 h-5 text-blue-600" />
            <div>
              <h4 className="font-semibold text-blue-800">Edit Mode</h4>
              <p className="text-sm text-blue-600">
                {acceptedQuote 
                  ? `Accepted quote loaded: ${acceptedQuote.insuranceCompany} - ₹${acceptedQuote.totalPremium?.toLocaleString('en-IN')}`
                  : 'Loading your previously saved quotes...'
                }
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Validation Error Display */}
      {errors.insuranceQuotes && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-red-600 text-sm">{errors.insuranceQuotes}</p>
        </div>
      )}

      {/* Accepted Quote Validation Error */}
      {errors.acceptedQuote && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center space-x-2">
            <AlertTriangle className="w-5 h-5 text-red-600" />
            <p className="text-red-600 text-sm font-medium">{errors.acceptedQuote}</p>
          </div>
          <p className="text-red-500 text-xs mt-1">
            You must accept a quote before proceeding to the next step
          </p>
        </div>
      )}

      {/* Quote Acceptance Status */}
      {acceptedQuote && (
        <div className="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <CheckCircle className="w-6 h-6 text-green-600" />
              <div>
                <h4 className="font-semibold text-green-800">Quote Accepted</h4>
                <p className="text-sm text-green-600">
                  {acceptedQuote.insuranceCompany} - ₹{acceptedQuote.totalPremium?.toLocaleString('en-IN')}
                  {acceptedQuote.ncbDiscount > 0 && ` (with ${acceptedQuote.ncbDiscount}% NCB)`}
                </p>
              </div>
            </div>
            <button
              onClick={unacceptQuote}
              className="px-3 py-1 bg-red-100 text-red-700 text-sm rounded hover:bg-red-200 transition-colors"
            >
              Change Quote
            </button>
          </div>
        </div>
      )}

      {/* NCB Eligibility Status */}
      <div className={`mb-4 p-3 rounded-lg border ${
        !isNcbEligible 
          ? 'bg-red-50 border-red-200' 
          : 'bg-green-50 border-green-200'
      }`}>
        <div className="flex items-center justify-between">
          <div>
            <p className={`text-sm font-medium ${
              !isNcbEligible ? 'text-red-700' : 'text-green-700'
            }`}>
              <strong>NCB Status:</strong> {!isNcbEligible ? 'Not Eligible' : 'Eligible'}
            </p>
            <p className={`text-xs ${
              !isNcbEligible ? 'text-red-600' : 'text-green-600'
            }`}>
              {!isNcbEligible 
                ? 'Claim was taken in previous policy - NCB set to 0%' 
                : 'No claim in previous policy - Default NCB is 25% (can be changed)'
              }
            </p>
          </div>
          {!isNcbEligible && (
            <div className="px-2 py-1 bg-red-100 text-red-800 text-xs rounded-full font-bold">
              NCB LOST
            </div>
          )}
        </div>
      </div>

      {/* Debug Info */}
      <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
        <div className="flex justify-between items-center">
          <div>
            <p className="text-sm text-blue-700">
              <strong>Quotes Status:</strong> {quotes.length} quote(s) added
            </p>
            <p className="text-xs text-blue-600">
              {quotes.length === 0 ? "Add at least one quote to proceed" : 
               acceptedQuote ? "✅ Quote accepted - can proceed to next step" : 
               "❌ Please accept a quote to proceed to next step"}
            </p>
          </div>
          <button
            onClick={() => {
              console.log("=== QUOTES DEBUG ===");
              console.log("Local quotes:", quotes);
              console.log("Form insuranceQuotes:", form.insuranceQuotes);
              console.log("Previous Claim:", form.previousClaimTaken);
              console.log("NCB Eligible:", isNcbEligible);
              console.log("Accepted Quote:", acceptedQuote);
              console.log("Can proceed:", quotes.length > 0 && acceptedQuote !== null);
            }}
            className="px-3 py-1 bg-blue-500 text-white text-xs rounded hover:bg-blue-600"
          >
            Debug Quotes
          </button>
        </div>
      </div>
      
      {/* Add Quote Form */}
      <div className="bg-gray-50 rounded-lg p-6 mb-6">
        <h3 className="text-lg font-semibold text-gray-800 mb-4">Add New Quote</h3>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">
          {/* Insurance Company */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Insurance Company *
            </label>
            <select
              name="insuranceCompany"
              value={manualQuote.insuranceCompany}
              onChange={handleManualQuoteChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            >
              <option value="">Select Company</option>
              {insuranceCompanies.map((company, index) => (
                <option key={index} value={company.name}>
                  {company.name}
                </option>
              ))}
            </select>
          </div>

          {/* Coverage Type */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Coverage Type *
            </label>
            <select
              name="coverageType"
              value={manualQuote.coverageType}
              onChange={handleManualQuoteChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            >
              <option value="comprehensive">Comprehensive</option>
              <option value="thirdParty">Third Party</option>
            </select>
          </div>

          {/* IDV */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              IDV (₹) *
            </label>
            <input
              type="number"
              name="idv"
              value={manualQuote.idv}
              onChange={handleManualQuoteChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter IDV amount"
            />
          </div>

          {/* Policy Duration */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Policy Duration (Years)
            </label>
            <select
              name="policyDuration"
              value={manualQuote.policyDuration}
              onChange={handleManualQuoteChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
            >
              <option value="1">1 Year</option>
              <option value="2">2 Years</option>
              <option value="3">3 Years</option>
            </select>
          </div>

          {/* NCB Discount */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              NCB Discount (%)
            </label>
            <select
              name="ncbDiscount"
              value={manualQuote.ncbDiscount}
              onChange={handleManualQuoteChange}
              disabled={!isNcbEligible}
              className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500 ${
                !isNcbEligible 
                  ? 'bg-gray-100 border-gray-300 text-gray-500 cursor-not-allowed' 
                  : 'border-gray-300'
              }`}
            >
              {ncbOptions.map(ncb => (
                <option key={ncb} value={ncb}>
                  {ncb}% {!isNcbEligible && ncb === 0 ? '(Auto-set)' : ''}
                </option>
              ))}
            </select>
            {!isNcbEligible && (
              <p className="text-xs text-red-600 mt-1">
                NCB disabled - claim was taken in previous policy
              </p>
            )}
          </div>

          {/* OD Amount */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              OD Amount (₹) *
            </label>
            <input
              type="number"
              name="odAmount"
              value={manualQuote.odAmount}
              onChange={handleManualQuoteChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter OD amount"
              required
            />
          </div>

          {/* Third Party Amount */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              3rd Party Amount (₹) *
            </label>
            <input
              type="number"
              name="thirdPartyAmount"
              value={manualQuote.thirdPartyAmount}
              onChange={handleManualQuoteChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-500"
              placeholder="Enter 3rd party amount"
              required
            />
          </div>

          {/* Premium Summary */}
          <div className="col-span-full bg-purple-50 p-4 rounded-lg border border-purple-200">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Base Premium:</span>
                <div className="font-semibold text-lg">₹{currentBasePremium.toLocaleString('en-IN')}</div>
                <div className="text-xs text-gray-500">(OD + 3rd Party + Add-ons)</div>
              </div>
              <div>
                <span className="text-gray-600">Add-ons Total:</span>
                <div className="font-semibold text-lg text-purple-600">₹{currentAddOnsTotal.toLocaleString('en-IN')}</div>
              </div>
              <div>
                <span className="text-gray-600">GST (18%):</span>
                <div className="font-semibold text-lg text-blue-600">₹{currentGstAmount.toLocaleString('en-IN')}</div>
              </div>
              <div>
                <span className="text-gray-600">Total Premium:</span>
                <div className="font-semibold text-lg text-green-600">₹{currentTotalPremium.toLocaleString('en-IN')}</div>
              </div>
            </div>
          </div>
        </div>

        {/* Add-ons Section */}
        <div className="mb-6">
          <h4 className="text-md font-semibold text-gray-800 mb-3">Add-ons (Optional)</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
            {Object.entries(addOnDescriptions).map(([key, description]) => (
              <div key={key} className="flex items-center space-x-3 p-3 border border-gray-200 rounded-lg bg-white hover:border-purple-300 transition-colors">
                <input
                  type="checkbox"
                  checked={manualQuote.addOns[key].selected}
                  onChange={(e) => handleAddOnChange(key, 'selected', e.target.checked)}
                  className="w-4 h-4 text-purple-600 rounded focus:ring-purple-500"
                />
                <div className="flex-1">
                  <label className="text-sm font-medium text-gray-700 block mb-2">
                    {description}
                  </label>
                  <div className="grid grid-cols-2 gap-2">
                    <div>
                      <label className="text-xs text-gray-500 block mb-1">Rate (%)</label>
                      <input
                        type="number"
                        step="0.01"
                        value={manualQuote.addOns[key].rate}
                        onChange={(e) => handleAddOnChange(key, 'rate', e.target.value)}
                        className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-purple-500"
                        placeholder="0.00%"
                        disabled={!manualQuote.addOns[key].selected}
                      />
                    </div>
                    <div>
                      <label className="text-xs text-gray-500 block mb-1">Amount (₹)</label>
                      <input
                        type="number"
                        value={manualQuote.addOns[key].amount}
                        onChange={(e) => handleAddOnChange(key, 'amount', e.target.value)}
                        className="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-purple-500"
                        placeholder="0"
                        disabled={!manualQuote.addOns[key].selected}
                      />
                    </div>
                  </div>
                  {manualQuote.addOns[key].selected && manualQuote.idv && (
                    <div className="text-xs text-gray-500 mt-1">
                      Based on IDV: ₹{manualQuote.idv}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Add Quote Button */}
        <button
          onClick={addManualQuote}
          disabled={!manualQuote.insuranceCompany || !manualQuote.coverageType || !manualQuote.idv || !manualQuote.odAmount || !manualQuote.thirdPartyAmount}
          className="flex items-center px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors shadow-md"
        >
          <Plus className="w-5 h-5 mr-2" />
          Add Quote
        </button>
      </div>

      {/* Quotes List */}
      {quotes.length > 0 && (
        <div className="space-y-6">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-gray-800">
              Generated Quotes ({quotes.length}) {acceptedQuote && <span className="text-green-600 text-sm">• 1 Accepted</span>}
            </h3>
            
            <div className="flex gap-2">
              <button
                onClick={selectAllQuotes}
                className="px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 transition-colors"
              >
                Select All
              </button>
              <button
                onClick={deselectAllQuotes}
                className="px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 transition-colors"
              >
                Deselect All
              </button>
              <button
                onClick={downloadSelectedQuotesPDF}
                disabled={selectedQuotes.length === 0 || isGenerating}
                className="flex items-center px-4 py-2 bg-green-600 text-white text-sm rounded-lg hover:bg-green-700 disabled:bg-gray-400 transition-colors"
              >
                <Download className="w-4 h-4 mr-1" />
                {isGenerating ? 'Generating...' : `Download Selected (${selectedQuotes.length})`}
              </button>
            </div>
          </div>

          <div className="grid grid-cols-1 gap-6">
            {quotes.map((quote, index) => {
              const company = insuranceCompanies.find(c => c.name === quote.insuranceCompany);
              const isExpanded = expandedQuotes.includes(index);
              const isAccepted = acceptedQuote && acceptedQuote.id === quote.id;
              
              return (
                <div key={index} className={`border border-gray-200 rounded-xl overflow-hidden hover:shadow-lg transition-shadow bg-white ${
                  isAccepted ? 'ring-2 ring-green-500 ring-opacity-50' : ''
                }`}>
                  {/* Quote Header */}
                  <div 
                    className="p-4 text-white relative"
                    style={{ backgroundColor: company?.color || '#0055AA' }}
                  >
                    <div className="flex justify-between items-center">
                      <div className="flex items-center space-x-3">
                        <input
                          type="checkbox"
                          checked={selectedQuotes.includes(index)}
                          onChange={() => toggleQuoteSelection(index)}
                          className="w-5 h-5 text-white bg-white rounded border-white"
                        />
                        <CompanyLogo company={company} className="w-10 h-10" />
                        <div>
                          <div className="flex items-center space-x-2">
                            <h4 className="font-bold text-lg">{quote.insuranceCompany}</h4>
                            {isAccepted && (
                              <span className="bg-green-500 text-white px-2 py-0.5 rounded-full text-xs font-bold flex items-center">
                                <CheckCircle className="w-3 h-3 mr-1" />
                                ACCEPTED
                              </span>
                            )}
                          </div>
                          <div className="flex items-center space-x-2 text-sm opacity-90">
                            <span>IDV: ₹{quote.idv?.toLocaleString('en-IN')}</span>
                            <span>•</span>
                            <span>{quote.policyDuration} Year{quote.policyDuration > 1 ? 's' : ''}</span>
                            <span>•</span>
                            <span>NCB: {quote.ncbDiscount}%</span>
                            {!isNcbEligible && (
                              <span className="bg-red-500 text-white px-2 py-0.5 rounded-full text-xs font-bold">
                                NCB Lost
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                      <div className="flex items-center space-x-3">
                        <span className="bg-white text-gray-800 px-3 py-1 rounded-full text-sm font-semibold">
                          {quote.coverageType === 'comprehensive' ? 'COMPREHENSIVE' : 'THIRD PARTY'}
                        </span>
                        {!isAccepted && (
                          <button
                            onClick={() => acceptQuote(quote)}
                            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-sm font-medium"
                          >
                            Accept Quote
                          </button>
                        )}
                        <button
                          onClick={() => toggleQuoteExpansion(index)}
                          className="text-white hover:bg-black hover:bg-opacity-20 p-1 rounded"
                        >
                          {isExpanded ? <ChevronUp className="w-5 h-5" /> : <ChevronDown className="w-5 h-5" />}
                        </button>
                        <button
                          onClick={() => removeQuote(index)}
                          className="text-white hover:bg-black hover:bg-opacity-20 p-1 rounded"
                        >
                          <Trash2 className="w-5 h-5" />
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Quote Body - Only show if expanded */}
                  {isExpanded && (
                    <div className="p-6">
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {/* Left Column - Premium Breakdown */}
                        <div className="space-y-4">
                          <h5 className="font-semibold text-gray-800 text-lg border-b pb-2">Premium Breakup</h5>
                          
                          <div className="space-y-3">
                            <div className="flex justify-between items-center">
                              <span className="text-gray-600">Own Damage</span>
                              <span className="font-semibold">₹{quote.odAmount?.toLocaleString('en-IN')}</span>
                            </div>
                            
                            <div className="flex justify-between items-center">
                              <span className="text-gray-600">3rd Party Amount</span>
                              <span className="font-semibold">₹{quote.thirdPartyAmount?.toLocaleString('en-IN')}</span>
                            </div>

                            {Object.keys(quote.selectedAddOns || {}).length > 0 && (
                              <div className="pt-2 border-t">
                                <div className="text-gray-600 mb-2">Add Ons</div>
                                <div className="space-y-2">
                                  {Object.entries(quote.selectedAddOns).map(([key, addOn]) => (
                                    <div key={key} className="flex justify-between items-center text-sm">
                                      <span className="text-gray-500">{addOn.description}</span>
                                      <span className="text-green-600 font-semibold">+₹{addOn.amount?.toLocaleString('en-IN')}</span>
                                    </div>
                                  ))}
                                </div>
                              </div>
                            )}
                            
                            <div className="flex justify-between items-center pt-2 border-t">
                              <span className="text-gray-600">Base Premium</span>
                              <span className="font-semibold">₹{quote.premium?.toLocaleString('en-IN')}</span>
                            </div>

                            <div className={`flex justify-between items-center ${
                              quote.ncbDiscount > 0 ? 'text-green-600' : 'text-gray-500'
                            }`}>
                              <span>NCB Discount {quote.ncbDiscount}%</span>
                              <span>-₹{Math.round((quote.premium || 0) * (quote.ncbDiscount / 100)).toLocaleString('en-IN')}</span>
                            </div>

                            <div className="flex justify-between items-center">
                              <span className="text-gray-600">GST (18%)</span>
                              <span className="font-semibold text-blue-600">+₹{quote.gstAmount?.toLocaleString('en-IN')}</span>
                            </div>
                            
                            <div className="pt-3 border-t">
                              <div className="flex justify-between items-center">
                                <span className="font-bold text-gray-800 text-lg">Total Premium</span>
                                <span className="font-bold text-green-600 text-xl">₹{quote.totalPremium?.toLocaleString('en-IN')}</span>
                              </div>
                            </div>
                          </div>
                        </div>

                        {/* Right Column - Additional Details */}
                        <div className="space-y-4">
                          <h5 className="font-semibold text-gray-800 text-lg border-b pb-2">Coverage Details</h5>
                          
                          <div className="space-y-3">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Policy Term</span>
                              <span className="font-semibold">{quote.policyDuration} Year{quote.policyDuration > 1 ? 's' : ''}</span>
                            </div>
                            
                            <div className="flex justify-between">
                              <span className="text-gray-600">Coverage Type</span>
                              <span className="font-semibold">{quote.coverageType === 'comprehensive' ? 'Comprehensive' : 'Third Party'}</span>
                            </div>
                            
                            <div className="flex justify-between">
                              <span className="text-gray-600">IDV</span>
                              <span className="font-semibold">₹{quote.idv?.toLocaleString('en-IN')}</span>
                            </div>

                            <div className="pt-2">
                              <div className="text-gray-600 mb-2">Included Add-ons</div>
                              <div className="flex flex-wrap gap-2">
                                {Object.keys(quote.selectedAddOns || {}).length > 0 ? (
                                  Object.entries(quote.selectedAddOns).map(([key, addOn]) => (
                                    <span 
                                      key={key} 
                                      className="px-3 py-1 bg-purple-100 text-purple-800 text-xs rounded-full font-medium"
                                      style={{ backgroundColor: company?.bgColor, color: company?.color }}
                                    >
                                      {addOn.description}
                                    </span>
                                  ))
                                ) : (
                                  <span className="text-gray-400 text-sm">No add-ons selected</span>
                                )}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>
      )}

      {quotes.length === 0 && (
        <div className="text-center py-12 text-gray-500 bg-gray-50 rounded-lg">
          <FileText className="w-16 h-16 mx-auto text-gray-300 mb-4" />
          <h3 className="text-lg font-semibold mb-2">No Quotes Added Yet</h3>
          <p>Add at least one insurance quote to proceed to the next step</p>
          {errors.insuranceQuotes && (
            <p className="text-red-500 text-sm mt-2">
              ❌ {errors.insuranceQuotes}
            </p>
          )}
        </div>
      )}
    </div>
  );
};
// ================== STEP 5: New Policy Details ==================
const NewPolicyDetails = ({ form, handleChange, handleSave, isSaving, errors, acceptedQuote }) => {
  // Insurance companies dropdown options (same as InsuranceQuotes)
  const insuranceCompanies = [
    "ICICI Lombard",
    "HDFC Ergo", 
    "Bajaj Allianz",
    "New India Assurance",
    "United India",
    "National Insurance",
    "Oriental Insurance",
    "Tata AIG",
    "Reliance General",
    "Cholamandalam",
    "Other"
  ];

  // NCB options dropdown (same as InsuranceQuotes)
  const ncbOptions = [0, 20, 25, 35, 45, 50];

  // Policy duration options (same as InsuranceQuotes)
  const policyDurationOptions = [
    { value: "1 Year", label: "1 Year" },
    { value: "2 Years", label: "2 Years" },
    { value: "3 Years", label: "3 Years" }
  ];

  // Effect to auto-fill when acceptedQuote changes
  useEffect(() => {
    if (acceptedQuote && !form.policyPrefilled) {
      console.log("🔄 Auto-filling policy details from accepted quote:", acceptedQuote.insuranceCompany);
      
      // Auto-fill policy details from accepted quote
      handleChange({
        target: { name: 'insuranceCompany', value: acceptedQuote.insuranceCompany }
      });
      handleChange({
        target: { name: 'idvAmount', value: acceptedQuote.idv.toString() }
      });
      handleChange({
        target: { name: 'totalPremium', value: acceptedQuote.totalPremium.toString() }
      });
      handleChange({
        target: { name: 'ncbDiscount', value: acceptedQuote.ncbDiscount.toString() }
      });
      handleChange({
        target: { name: 'insuranceDuration', value: `${acceptedQuote.policyDuration} Year${acceptedQuote.policyDuration > 1 ? 's' : ''}` }
      });
      
      // Set current date as issue date
      const today = new Date().toISOString().split('T')[0];
      handleChange({
        target: { name: 'issueDate', value: today }
      });
      
      // Calculate due date based on policy duration
      const dueDate = new Date();
      dueDate.setFullYear(dueDate.getFullYear() + parseInt(acceptedQuote.policyDuration));
      const dueDateString = dueDate.toISOString().split('T')[0];
      handleChange({
        target: { name: 'dueDate', value: dueDateString }
      });
      
      // Mark as prefilled to prevent re-triggering
      handleChange({
        target: { name: 'policyPrefilled', value: 'true' }
      });
    }
  }, [acceptedQuote]);

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaFileAlt />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Step 5: New Policy Details
            </h3>
            {acceptedQuote && (
              <p className="text-sm text-green-600 flex items-center gap-1 mt-1">
                <CheckCircle className="w-4 h-4" />
                Pre-filled from accepted quote: {acceptedQuote.insuranceCompany}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Quote Acceptance Status Banner */}
      {acceptedQuote ? (
        <div className="mb-6 p-4 bg-green-50 border border-green-200 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <CheckCircle className="w-6 h-6 text-green-600" />
              <div>
                <h4 className="font-semibold text-green-800">Quote Accepted & Auto-Filled</h4>
                <p className="text-sm text-green-600">
                  {acceptedQuote.insuranceCompany} - ₹{acceptedQuote.totalPremium?.toLocaleString('en-IN')}
                  {acceptedQuote.ncbDiscount > 0 && ` (with ${acceptedQuote.ncbDiscount}% NCB)`}
                </p>
              </div>
            </div>
            <div className="text-xs text-green-700 bg-green-100 px-2 py-1 rounded">
              ✅ Ready for Policy Creation
            </div>
          </div>
        </div>
      ) : (
        <div className="mb-6 p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
          <div className="flex items-center gap-2">
            <AlertTriangle className="w-5 h-5 text-yellow-600" />
            <div>
              <p className="text-yellow-700 text-sm font-medium">
                <strong>Case Status: Pending Quote Acceptance</strong>
              </p>
              <p className="text-yellow-600 text-sm">
                Please accept a quote in Step 4 to auto-fill policy details
              </p>
            </div>
          </div>
        </div>
      )}

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Policy Status
        </h4>
        <label className="block text-sm font-medium text-gray-600 mb-2">
          Policy Issued Status *
        </label>
        <div className="flex gap-6 items-center mb-3">
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="policyIssued"
              value="yes"
              checked={form.policyIssued === "yes"}
              onChange={handleChange}
              className="h-4 w-4"
            />
            Yes - Policy Issued
          </label>
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="policyIssued"
              value="no"
              checked={form.policyIssued === "no"}
              onChange={handleChange}
              className="h-4 w-4"
            />
            No - Pending
          </label>
        </div>
        {errors.policyIssued && <p className="text-red-500 text-xs mt-1 mb-3">{errors.policyIssued}</p>}
        <div
          className={`text-sm px-4 py-3 rounded-md border 
    ${
      form.policyIssued === "yes"
        ? "bg-green-50 border-green-300 text-green-700"
        : form.policyIssued === "no"
        ? "bg-red-50 border-red-300 text-red-700"
        : errors.policyIssued
        ? "bg-red-50 border-red-300 text-red-700"
        : "bg-yellow-50 border-yellow-300 text-yellow-700"
    }`}
        >
          {form.policyIssued === "yes" ? (
            <strong>Policy Issued:</strong>
          ) : form.policyIssued === "no" ? (
            <strong>Policy Pending:</strong>
          ) : (
            <strong>Status Unknown:</strong>
          )}{" "}
          {form.policyIssued === "yes"
            ? "Policy is successfully issued by the insurance company."
            : form.policyIssued === "no"
            ? "Policy details can be updated once the policy is issued by the insurance company."
            : errors.policyIssued
            ? "Please select policy status to proceed."
            : "Please select policy status."}
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Policy Information {acceptedQuote && <span className="text-green-600 text-sm">(Auto-filled from accepted quote)</span>}
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Insurance Company - Dropdown */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Insurance Company *
            </label>
            <select
              name="insuranceCompany"
              value={form.insuranceCompany || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.insuranceCompany ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select Insurance Company</option>
              {insuranceCompanies.map((company, index) => (
                <option key={index} value={company}>
                  {company}
                </option>
              ))}
            </select>
            {acceptedQuote && form.insuranceCompany === acceptedQuote.insuranceCompany && (
              <p className="text-xs text-green-600 mt-1 flex items-center gap-1">
                <CheckCircle className="w-3 h-3" />
                From accepted quote
              </p>
            )}
            {errors.insuranceCompany && <p className="text-red-500 text-xs mt-1">{errors.insuranceCompany}</p>}
          </div>

          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Policy Number
            </label>
            <input
              type="text"
              name="policyNumber"
              value={form.policyNumber || ""}
              onChange={handleChange}
              placeholder="Policy Number"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.policyNumber ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.policyNumber && <p className="text-red-500 text-xs mt-1">{errors.policyNumber}</p>}
          </div>

          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Issue Date
            </label>
            <input
              type="date"
              name="issueDate"
              value={form.issueDate || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.issueDate ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.issueDate && <p className="text-red-500 text-xs mt-1">{errors.issueDate}</p>}
          </div>

          <div>
  <label className="block mb-1 text-sm font-medium text-gray-600">
    Policy Date
  </label>
  <input
    type="date"
    name="dueDate"
    value={form.dueDate || ""}
    onChange={handleChange}
    className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
      errors.dueDate ? "border-red-500" : "border-gray-300"
    }`}
  />
  {errors.dueDate && <p className="text-red-500 text-xs mt-1">{errors.dueDate}</p>}
  <p className="text-xs text-gray-500 mt-1">
    Enter the policy date manually
  </p>
</div>

          {/* NCB Discount - Dropdown */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              NCB Discount (%)
            </label>
            <select
              name="ncbDiscount"
              value={form.ncbDiscount || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.ncbDiscount ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select NCB %</option>
              {ncbOptions.map(ncb => (
                <option key={ncb} value={ncb}>
                  {ncb}%
                </option>
              ))}
            </select>
            {acceptedQuote && form.ncbDiscount === acceptedQuote.ncbDiscount.toString() && (
              <p className="text-xs text-green-600 mt-1 flex items-center gap-1">
                <CheckCircle className="w-3 h-3" />
                From accepted quote: {acceptedQuote.ncbDiscount}%
              </p>
            )}
            {errors.ncbDiscount && <p className="text-red-500 text-xs mt-1">{errors.ncbDiscount}</p>}
          </div>

          {/* Insurance Duration - Dropdown */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Insurance Duration
            </label>
            <select
              name="insuranceDuration"
              value={form.insuranceDuration || ""}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
            >
              <option value="">Select Duration</option>
              {policyDurationOptions.map((option, index) => (
                <option key={index} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
            {acceptedQuote && form.insuranceDuration === `${acceptedQuote.policyDuration} Year${acceptedQuote.policyDuration > 1 ? 's' : ''}` && (
              <p className="text-xs text-green-600 mt-1 flex items-center gap-1">
                <CheckCircle className="w-3 h-3" />
                From accepted quote
              </p>
            )}
          </div>

          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              IDV Amount (₹) *
            </label>
            <input
              type="number"
              name="idvAmount"
              value={form.idvAmount || ""}
              onChange={handleChange}
              placeholder="From accepted quote"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.idvAmount ? "border-red-500" : "border-gray-300"
              }`}
            />
            {acceptedQuote && form.idvAmount === acceptedQuote.idv.toString() && (
              <p className="text-xs text-green-600 mt-1 flex items-center gap-1">
                <CheckCircle className="w-3 h-3" />
                From accepted quote: ₹{acceptedQuote.idv?.toLocaleString('en-IN')}
              </p>
            )}
            {errors.idvAmount && <p className="text-red-500 text-xs mt-1">{errors.idvAmount}</p>}
          </div>

          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Total Premium (₹) *
            </label>
            <input
              type="number"
              name="totalPremium"
              value={form.totalPremium || ""}
              onChange={handleChange}
              placeholder="From accepted quote"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.totalPremium ? "border-red-500" : "border-gray-300"
              }`}
            />
            {acceptedQuote && form.totalPremium === acceptedQuote.totalPremium.toString() && (
              <p className="text-xs text-green-600 mt-1 flex items-center gap-1">
                <CheckCircle className="w-3 h-3" />
                From accepted quote: ₹{acceptedQuote.totalPremium?.toLocaleString('en-IN')}
              </p>
            )}
            {errors.totalPremium && <p className="text-red-500 text-xs mt-1">{errors.totalPremium}</p>}
          </div>
        </div>
      </div>

    
    </div>
  );
};
// ================== STEP 6: Documents (Updated with Requirements & Tagging) ==================
const Documents = ({ form, handleChange, handleSave, isSaving, errors }) => {
  const [uploading, setUploading] = useState(false);
  const [customTagInputs, setCustomTagInputs] = useState({});
  const [showCustomInputs, setShowCustomInputs] = useState({});

  // Document requirements based on case type
  const getDocumentRequirements = () => {
    const requirements = {
      newCar: {
        mandatory: ["Invoice"],
        optional: ["New Policy", "New policy covernote"]
      },
      usedCar: {
        mandatory: ["RC", "Form 29", "Form 30 page 1", "Form 30 page 2"],
        optional: ["New Policy", "New policy covernote", "Inspection report"]
      },
      usedCarRenewal: {
        mandatory: ["RC", "Previous Year Policy"],
        optional: []
      },
      policyExpired: {
        mandatory: ["RC", "Previous Year Policy"],
        optional: []
      }
    };

    return requirements.usedCar; // Default to used car, you can make this dynamic
  };

  const documentRequirements = getDocumentRequirements();

  // Handle document tagging - SIMPLIFIED
  const handleDocumentTag = (docId, tag) => {
    const currentTags = form.documentTags || {};
    const updatedTags = { ...currentTags };
    
    if (tag === "other") {
      // When selecting "other", show the custom input
      updatedTags[docId] = "";
      setShowCustomInputs(prev => ({
        ...prev,
        [docId]: true
      }));
      setCustomTagInputs(prev => ({
        ...prev,
        [docId]: ""
      }));
    } else {
      updatedTags[docId] = tag;
      // Hide custom input when selecting a predefined option
      setShowCustomInputs(prev => ({
        ...prev,
        [docId]: false
      }));
    }
    
    handleChange({
      target: {
        name: 'documentTags',
        value: updatedTags
      }
    });
  };

  // Handle custom tag input
  const handleCustomTagInput = (docId, value) => {
    // Update custom inputs state
    setCustomTagInputs(prev => ({
      ...prev,
      [docId]: value
    }));

    // Update the documentTags with custom value
    const currentTags = form.documentTags || {};
    const updatedTags = {
      ...currentTags,
      [docId]: value
    };
    
    handleChange({
      target: {
        name: 'documentTags',
        value: updatedTags
      }
    });
  };

  // Handle file selection - IMPROVED MULTIPLE FILE UPLOAD
  const handleFiles = async (e) => {
    const files = Array.from(e.target.files);
    
    if (files.length === 0) return;

    console.log("🔄 Selected files:", files.length, "files:", files.map(f => f.name));

    setUploading(true);

    try {
      // Upload files and get URLs
      const uploadedFiles = await uploadFiles(files);
      
      // Combine existing documents with new ones
      const existingDocuments = form.documents || {};
      const newDocuments = { ...existingDocuments };
      
      // Add new documents with unique keys
      uploadedFiles.forEach((uploadedFile, index) => {
        const docId = `doc_${Date.now()}_${index}`;
        newDocuments[docId] = uploadedFile;
      });
      
      console.log("📄 Updated documents object:", newDocuments);
      console.log("📊 Total documents after upload:", Object.keys(newDocuments).length);
      
      // Update form with the new documents object
      handleChange({
        target: {
          name: 'documents',
          value: newDocuments
        }
      });
      
    } catch (error) {
      console.error("❌ Error uploading files:", error);
      alert(`Error uploading files: ${error.message}`);
    } finally {
      setUploading(false);
      // Clear the file input
      e.target.value = '';
    }
  };

  // Upload multiple files and return file objects
  const uploadFiles = async (files) => {
    console.log(`📤 Starting upload for ${files.length} files...`);
    
    const uploadPromises = files.map(file => uploadFile(file));
    const results = await Promise.allSettled(uploadPromises);
    
    const successfulUploads = results
      .filter(result => result.status === 'fulfilled' && result.value)
      .map(result => result.value);
    
    const failedUploads = results.filter(result => result.status === 'rejected');
    
    if (failedUploads.length > 0) {
      console.warn(`⚠️ ${failedUploads.length} files failed to upload`);
      failedUploads.forEach((result, index) => {
        console.error(`Failed upload ${index + 1}:`, result.reason);
      });
    }
    
    console.log(`✅ Successfully uploaded ${successfulUploads.length} files`);
    return successfulUploads;
  };

  // Upload single file
  const uploadFile = async (file) => {
    console.log(`🚀 Starting upload for: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
    
    try {
      const fileUrl = await uploadSingleFile(file);    
      console.log(`✅ Upload completed: ${file.name} -> ${fileUrl}`);
      return {
        url: fileUrl,
        name: file.name,
        type: file.type,
        size: file.size,
        uploadedAt: new Date().toISOString()
      };
      
    } catch (error) {
      console.error(`❌ Error uploading file ${file.name}:`, error);
      throw error;
    }
  };

  const uploadSingleFile = async (fileObj) => {
    try {
      const formData = new FormData();
      formData.append('file', fileObj);

      let config = {
        method: 'post',
        maxBodyLength: Infinity,
        url: 'https://asia-south1-acillp-8c3f8.cloudfunctions.net/files',
        headers: { 
          'Content-Type': 'multipart/form-data',
        },
        data: formData
      };

      const response = await axios.request(config);
      console.log(`📡 Upload response for ${fileObj.name}:`, response.data);
      return response.data.path;
    } catch (error) {
      console.error(`Error uploading file ${fileObj.name}:`, error);
      throw error;
    }
  }

  // Remove document from form.documents
  const removeDocument = (docId) => {
    const currentDocuments = form.documents || {};
    const updatedDocuments = { ...currentDocuments };
    delete updatedDocuments[docId];
    
    // Also remove from tags
    const currentTags = form.documentTags || {};
    const updatedTags = { ...currentTags };
    delete updatedTags[docId];

    handleChange({
      target: {
        name: 'documents',
        value: updatedDocuments
      }
    });
    
    handleChange({
      target: {
        name: 'documentTags',
        value: updatedTags
      }
    });

    // Remove from custom inputs
    setCustomTagInputs(prev => {
      const newInputs = { ...prev };
      delete newInputs[docId];
      return newInputs;
    });

    setShowCustomInputs(prev => {
      const newInputs = { ...prev };
      delete newInputs[docId];
      return newInputs;
    });
  };

  // Clear all documents
  const clearAllDocuments = () => {
    if (window.confirm("Are you sure you want to remove all documents?")) {
      handleChange({
        target: {
          name: 'documents',
          value: {}
        }
      });
      
      handleChange({
        target: {
          name: 'documentTags',
          value: {}
        }
      });
      
      setCustomTagInputs({});
      setShowCustomInputs({});
    }
  };

  // Format file name from URL
  const getFileNameFromUrl = (fileObj) => {
    if (typeof fileObj === 'string') {
      return fileObj.split('/').pop() || 'Document';
    }
    return fileObj?.name || 'Document';
  };

  // Get file URL
  const getFileUrl = (fileObj) => {
    if (typeof fileObj === 'string') {
      return fileObj;
    }
    return fileObj?.url || '';
  };

  // Get file icon based on file extension
  const getFileIcon = (fileObj) => {
    const fileName = typeof fileObj === 'string' ? fileObj : fileObj?.name || fileObj?.url || '';
    const fileUrl = fileName.toLowerCase();
    if (fileUrl.includes('.pdf')) return '📄';
    if (fileUrl.match(/\.(jpg|jpeg|png|gif|webp)$/)) return '🖼️';
    if (fileUrl.match(/\.(doc|docx)$/)) return '📝';
    if (fileUrl.match(/\.(xls|xlsx)$/)) return '📊';
    return '📎';
  };

  // Format file size
  const formatFileSize = (bytes) => {
    if (!bytes) return '';
    if (bytes < 1024) return bytes + ' bytes';
    if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + ' KB';
    return (bytes / (1024 * 1024)).toFixed(1) + ' MB';
  };

  // Get current documents count
  const currentDocuments = form.documents || {};
  const documentsCount = Object.keys(currentDocuments).length;
  const taggedDocumentsCount = Object.values(form.documentTags || {}).filter(tag => tag && tag !== '').length;

  // SIMPLIFIED: Check if we should show custom input
  const shouldShowCustomInput = (docId) => {
    return showCustomInputs[docId] === true;
  };

  // Get dropdown value
  const getDropdownValue = (docId) => {
    const currentTag = form.documentTags?.[docId];
    if (!currentTag) return "";
    
    // If tag is in predefined lists, show it
    if ([...documentRequirements.mandatory, ...documentRequirements.optional].includes(currentTag)) {
      return currentTag;
    }
    
    // Otherwise show "other"
    return "other";
  };

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaFileAlt />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Step 6: Documents
            </h3>
            <p className="text-xs text-gray-500">
              Upload and manage policy documents with tagging
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          {documentsCount > 0 && (
            <button
              type="button"
              onClick={clearAllDocuments}
              disabled={uploading}
              className="flex items-center gap-2 bg-red-100 text-red-700 px-3 py-2 rounded-md text-sm hover:bg-red-200 disabled:opacity-50 transition-colors"
            >
              <FaTrash /> Clear All
            </button>
          )}
        </div>
      </div>

      {errors.documents && (
        <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
          <p className="text-red-600 text-sm">{errors.documents}</p>
        </div>
      )}

      {/* Document Requirements */}
      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Document Requirements
        </h4>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <h5 className="font-medium text-green-700 mb-2 flex items-center gap-2">
              <FaCheckCircle className="text-green-600" />
              Mandatory Documents
            </h5>
            <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
              {documentRequirements.mandatory.map((doc, index) => (
                <li key={index}>{doc}</li>
              ))}
            </ul>
          </div>
          
          {documentRequirements.optional.length > 0 && (
            <div>
              <h5 className="font-medium text-purple-700 mb-2 flex items-center gap-2">
                <FaInfoCircle className="text-purple-600" />
                Optional Documents
              </h5>
              <ul className="list-disc pl-5 text-sm text-gray-600 space-y-1">
                {documentRequirements.optional.map((doc, index) => (
                  <li key={index}>{doc}</li>
                ))}
              </ul>
            </div>
          )}
        </div>
        
        <div className="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
          <p className="text-sm text-yellow-700 flex items-center gap-2">
            <FaExclamationTriangle className="text-yellow-600" />
            <strong>Note:</strong> Upload all documents first, then tag each document in the section below.
          </p>
        </div>
      </div>

      {/* Documents Count */}
      <div className="mb-4 p-3 bg-purple-50 border border-purple-200 rounded-lg">
        <div className="flex justify-between items-center">
          <div>
            <h4 className="font-semibold text-purple-800">Documents Status</h4>
            <p className="text-xs text-purple-700">
              Total Documents: {documentsCount} | Tagged: {taggedDocumentsCount}
            </p>
          </div>
          <div className="flex items-center gap-2">
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${
              documentsCount > 0 ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
            }`}>
              {documentsCount > 0 ? 'Documents Ready' : 'No Documents'}
            </span>
          </div>
        </div>
      </div>

      {/* Upload Area */}
      <div className="border rounded-xl p-5">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h4 className="text-md font-semibold text-gray-700">
              Upload Documents
            </h4>
            <p className="text-sm text-gray-500 mt-1">
              {documentsCount} document(s) uploaded • {taggedDocumentsCount} tagged
            </p>
          </div>
        </div>

        {/* Upload Area */}
        <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center mb-6 hover:border-gray-400 transition-colors">
          <div className="flex justify-center mb-4 text-gray-500">
            <FaCloudUploadAlt size={40} />
          </div>
          <p className="text-gray-600 font-medium mb-2">
            Drag and drop files here
          </p>
          <p className="text-gray-400 text-sm mb-4">
            or click to browse your files (Multiple files supported)
          </p>
          
          <input
            type="file"
            multiple
            onChange={handleFiles}
            className="hidden"
            id="file-upload"
            accept=".pdf,.jpg,.jpeg,.png,.doc,.docx,.xls,.xlsx,.txt"
            disabled={uploading}
          />
          <label
            htmlFor="file-upload"
            className={`inline-flex items-center gap-2 px-6 py-3 rounded-md text-sm font-medium cursor-pointer transition-colors ${
              uploading 
                ? 'bg-gray-400 text-gray-200 cursor-not-allowed' 
                : 'bg-black text-white hover:bg-gray-800'
            }`}
          >
            {uploading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                Uploading...
              </>
            ) : (
              <>
                <FaFileUpload /> 
                Choose Multiple Files
              </>
            )}
          </label>
          
          <p className="text-gray-400 text-xs mt-4">
            Supported: PDF, JPG, PNG, DOC, DOCX, XLS, XLSX, TXT • Max file size: 10MB each
          </p>
        </div>

        {/* Upload Progress */}
        {uploading && (
          <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
            <p className="text-sm text-blue-700 flex items-center gap-2">
              <FaSpinner className="animate-spin" />
              Uploading files... Please wait.
            </p>
          </div>
        )}

        {/* Documents List */}
        {documentsCount > 0 && (
          <div className="mt-6">
            <h5 className="text-md font-semibold text-gray-700 mb-4 flex items-center gap-2">
              <FaListAlt />
              Uploaded Documents ({documentsCount})
            </h5>
            
            <div className="space-y-3 max-h-96 overflow-y-auto border rounded-lg p-2">
              {Object.entries(currentDocuments).map(([docId, fileObj]) => (
                <div
                  key={docId}
                  className="flex items-center justify-between p-4 border rounded-lg bg-gray-50 hover:bg-white transition-colors"
                >
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <span className="text-xl">
                      {getFileIcon(fileObj)}
                    </span>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2">
                        <p className="font-medium text-sm truncate">
                          {getFileNameFromUrl(fileObj)}
                        </p>
                        <span className="text-xs text-green-600 font-medium flex items-center gap-1">
                          <FaCheckCircle size={10} />
                          Uploaded
                        </span>
                      </div>
                      
                      <div className="flex items-center gap-3 text-xs text-gray-500 mt-1">
                        <span>{formatFileSize(fileObj.size)}</span>
                        <span>•</span>
                        <span className="truncate flex-1">{getFileUrl(fileObj)}</span>
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    <a
                      href={getFileUrl(fileObj)}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="p-2 text-green-600 hover:text-green-800 transition-colors"
                      title="View document"
                    >
                      <FaExternalLinkAlt />
                    </a>
                    
                    <button
                      onClick={() => removeDocument(docId)}
                      disabled={uploading}
                      className="p-2 text-red-600 hover:text-red-800 disabled:opacity-50 transition-colors"
                      title="Remove document"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* Empty State */}
        {documentsCount === 0 && !uploading && (
          <div className="text-center py-8">
            <div className="text-gray-400 mb-2">
              <FaFileAlt size={48} className="mx-auto" />
            </div>
            <p className="text-gray-500 text-sm">
              No documents uploaded yet. Upload documents to continue.
            </p>
          </div>
        )}

        {/* Tagging Section - FIXED: Now properly shows input for "other" */}
        {documentsCount > 0 && (
          <div className="border rounded-xl p-5 mt-6">
            <h4 className="text-md font-semibold text-gray-700 mb-4 flex items-center gap-2">
              <FaTags />
              Document Tagging
            </h4>
            <p className="text-sm text-gray-600 mb-4">
              Tag each uploaded document with its document type. Select "Other" for custom document types.
            </p>
            
            <div className="space-y-4">
              {Object.entries(currentDocuments).map(([docId, fileObj]) => (
                <div key={docId} className="flex flex-col md:flex-row md:items-center justify-between p-4 border rounded-lg bg-gray-50 gap-4">
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <span className="text-xl">
                      {getFileIcon(fileObj)}
                    </span>
                    <div className="flex-1 min-w-0">
                      <p className="font-medium text-sm truncate">
                        {getFileNameFromUrl(fileObj)}
                      </p>
                      <p className="text-xs text-gray-500 truncate">
                        {formatFileSize(fileObj.size)}
                      </p>
                    </div>
                  </div>
                  
                  <div className="flex flex-col md:flex-row items-start md:items-center gap-3 w-full md:w-auto">
                    <div className="flex flex-col md:flex-row gap-3 w-full">
                      <select
                        value={getDropdownValue(docId)}
                        onChange={(e) => handleDocumentTag(docId, e.target.value)}
                        className="border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none w-full md:w-48"
                      >
                        <option value="">Select document type</option>
                        <optgroup label="Mandatory">
                          {documentRequirements.mandatory.map((docType) => (
                            <option key={docType} value={docType}>{docType}</option>
                          ))}
                        </optgroup>
                        {documentRequirements.optional.length > 0 && (
                          <optgroup label="Optional">
                            {documentRequirements.optional.map((docType) => (
                              <option key={docType} value={docType}>{docType}</option>
                            ))}
                          </optgroup>
                        )}
                        <option value="other">Other (Custom)</option>
                      </select>
                      
                      {/* FIXED: Simple condition to show input */}
                      {shouldShowCustomInput(docId) && (
                        <input
                          type="text"
                          value={customTagInputs[docId] || ""}
                          onChange={(e) => handleCustomTagInput(docId, e.target.value)}
                          placeholder="Enter custom document name"
                          className="border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none w-full md:w-48"
                        />
                      )}
                    </div>
                    
                    {form.documentTags?.[docId] && form.documentTags[docId] !== "" && (
                      <span className="px-3 py-1 bg-green-100 text-green-800 text-xs rounded-full whitespace-nowrap flex items-center gap-1">
                        <FaTag size={10} />
                        {form.documentTags[docId]}
                      </span>
                    )}
                  </div>
                </div>
              ))}
            </div>

            {/* Tagging Summary */}
            <div className="mt-4 p-3 bg-green-50 border border-green-200 rounded-md">
              <p className="text-sm text-green-700 flex items-center gap-2">
                <FaCheckCircle />
                <strong>Tagging Progress:</strong> {taggedDocumentsCount} of {documentsCount} documents tagged
              </p>
              {taggedDocumentsCount === documentsCount && documentsCount > 0 && (
                <p className="text-sm text-green-600 mt-1">
                  ✅ All documents have been tagged! You can proceed to the next step.
                </p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
// ================== STEP 7: Payment ==================
const Payment = ({ 
  form, 
  handleChange, 
  handleSave, 
  isSaving, 
  errors, 
  paymentHistory = [], 
  totalPremium, 
  onNextStep, 
  paymentLedger: propPaymentLedger, 
  onPaymentLedgerUpdate 
}) => {
  // Calculate remaining amount
  const totalPaidAmount = propPaymentLedger.reduce((sum, payment) => sum + (parseFloat(payment.amount) || 0), 0);
  const currentPaymentAmount = parseFloat(form.paymentAmount) || 0;
  const remainingAmount = (parseFloat(totalPremium) || 0) - totalPaidAmount;
  
  // Payment modes including subvention options
  const paymentModeOptions = [
    "Online Transfer/UPI",
    "Cash",
    "Cheque",
    "Credit/Debit Card",
    "Bank Subvention", 
    "Dealer Subvention",
    "Manufacturer Subvention",
    "Special Offer Subvention"
  ];

  // Payment made by options
  const paymentMadeByOptions = [
    { value: "Customer", label: "Customer" },
    { value: "In House", label: "In House" }
  ];

  // State for payment ledger - use prop if provided, otherwise local state
  const [paymentLedger, setPaymentLedger] = useState(propPaymentLedger || paymentHistory || []);

  // Handle radio button change
  const handleRadioChange = (fieldName, value) => {
    handleChange({ 
      target: { 
        name: fieldName, 
        value: value 
      } 
    });
  };

  // Add payment to ledger function - FIXED
  const addPaymentToLedger = async () => {
    if (!form.paymentAmount || !form.paymentDate || !form.paymentMode || !form.paymentMadeBy) {
      alert("Please fill all required payment fields");
      return;
    }

    const newPayment = {
      id: Date.now().toString(),
      date: form.paymentDate,
      description: `Payment - ${form.paymentMode}`,
      amount: parseFloat(form.paymentAmount),
      mode: form.paymentMode,
      status: 'Completed',
      transactionId: form.transactionId || 'N/A',
      bankName: form.bankName || 'N/A',
      paymentMadeBy: form.paymentMadeBy,
      receiptDate: form.receiptDate || form.paymentDate
    };

    const updatedLedger = [...paymentLedger, newPayment];
    setPaymentLedger(updatedLedger);
    
    // Notify parent component about ledger update
    if (onPaymentLedgerUpdate) {
      onPaymentLedgerUpdate(updatedLedger);
    }
    
    // FIXED: Proper payment data structure for backend
    const totalPaid = updatedLedger.reduce((sum, payment) => sum + payment.amount, 0);
    const paymentStatus = totalPaid >= totalPremium ? 'Fully Paid' : 'Payment Pending';

    const paymentData = {
      payment_info: {
        paymentMadeBy: form.paymentMadeBy,
        paymentMode: form.paymentMode,
        paymentAmount: parseFloat(form.paymentAmount),
        paymentDate: form.paymentDate,
        transactionId: form.transactionId || '',
        receiptDate: form.receiptDate || form.paymentDate,
        bankName: form.bankName || '',
        subvention_payment: form.paymentMode.includes('Subvention') ? form.paymentMode : "No Subvention",
        paymentStatus: paymentStatus,
        totalPaidAmount: totalPaid
      },
      payment_ledger: updatedLedger
    };

    console.log("💰 Sending payment data to backend:", paymentData);

    try {
      // Save to backend
      await handleSave(paymentData);
      
      // Clear current payment form (keep paymentMadeBy)
      handleChange({ target: { name: 'paymentAmount', value: '' } });
      handleChange({ target: { name: 'paymentDate', value: '' } });
      handleChange({ target: { name: 'transactionId', value: '' } });
      handleChange({ target: { name: 'paymentMode', value: '' } });
      handleChange({ target: { name: 'receiptDate', value: '' } });
      handleChange({ target: { name: 'bankName', value: '' } });
      
    } catch (error) {
      console.error('Error saving payment:', error);
      alert('Error saving payment. Please try again.');
    }
  };

  // Handle next step - FIXED
  const handleNextStep = async () => {
    const subventionAmount = calculateSubventionAmount();
    
    // If there's subvention, update the form for payout step
    if (subventionAmount > 0) {
      handleChange({ 
        target: { 
          name: 'subVention', 
          value: subventionAmount 
        } 
      });
    }
    
    // Calculate total paid for payout reference
    const totalPaid = paymentLedger.reduce((sum, payment) => sum + payment.amount, 0);
    const paymentStatus = totalPaid >= totalPremium ? 'Fully Paid' : 'Payment Pending';
    
    // FIXED: Final payment data structure
    const finalPaymentData = {
      payment_info: {
        paymentMadeBy: form.paymentMadeBy,
        paymentMode: form.paymentMode,
        paymentAmount: currentPaymentAmount,
        paymentDate: form.paymentDate,
        transactionId: form.transactionId || '',
        receiptDate: form.receiptDate || '',
        bankName: form.bankName || '',
        subvention_payment: form.paymentMode.includes('Subvention') ? form.paymentMode : "No Subvention",
        paymentStatus: paymentStatus,
        totalPaidAmount: totalPaid
      },
      payment_ledger: paymentLedger
    };

    console.log("💰 Final payment data before next step:", finalPaymentData);

    // Update payment status in form
    handleChange({
      target: {
        name: 'paymentStatus',
        value: paymentStatus
      }
    });

    handleChange({
      target: {
        name: 'totalPaidAmount',
        value: totalPaid
      }
    });

    // Save current state before proceeding
    try {
      await handleSave(finalPaymentData);
      
      // Wait a moment for save to complete, then proceed
      setTimeout(() => {
        if (onNextStep && typeof onNextStep === 'function') {
          onNextStep();
        } else {
          console.error('onNextStep is not a function');
        }
      }, 1000);
      
    } catch (error) {
      console.error('Error saving before next step:', error);
    }
  };

  // Calculate subvention amount for payout
  const calculateSubventionAmount = () => {
    const subventionModes = [
      "Bank Subvention", 
      "Dealer Subvention",
      "Manufacturer Subvention",
      "Special Offer Subvention"
    ];
    
    if (subventionModes.includes(form.paymentMode)) {
      return parseFloat(form.paymentAmount) || 0;
    }
    return 0;
  };

  // Ensure form fields are properly initialized
  useEffect(() => {
    const initialFields = {
      paymentMadeBy: form.paymentMadeBy || "Customer",
      paymentMode: form.paymentMode || "",
      paymentAmount: form.paymentAmount || "",
      paymentDate: form.paymentDate || "",
      transactionId: form.transactionId || "",
      receiptDate: form.receiptDate || "",
      bankName: form.bankName || "",
      subvention_payment: form.subvention_payment || "No Subvention"
    };
    
    Object.keys(initialFields).forEach(key => {
      if (!form[key] && initialFields[key] !== "") {
        handleChange({
          target: {
            name: key,
            value: initialFields[key]
          }
        });
      }
    });
  }, []);

  // Update ledger when propPaymentLedger changes
  useEffect(() => {
    if (propPaymentLedger && propPaymentLedger.length >= 0) {
      setPaymentLedger(propPaymentLedger);
    }
  }, [propPaymentLedger]);

  // Calculate overall payment status
  const overallPaymentStatus = remainingAmount <= 0 ? 'Fully Paid' : 'Payment Pending';
  const paymentStatusColor = remainingAmount <= 0 ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaCreditCard />
          </div>
          <h3 className="text-lg font-semibold text-gray-800">
            7: Payment
          </h3>
        </div>
        <div className={`px-3 py-1 rounded-full text-sm font-medium ${paymentStatusColor}`}>
          {overallPaymentStatus}
        </div>
      </div>

      {/* Payment Summary Card */}
      <div className="bg-purple-50 border rounded-xl p-5 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <p className="text-sm text-gray-500">Total Premium:</p>
            <p className="font-semibold text-lg">₹{totalPremium || 0}</p>
            <p className="text-xs text-gray-500 mt-1">From accepted quote</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Total Paid:</p>
            <p className="font-semibold text-lg text-green-600">
              ₹{paymentLedger.reduce((sum, payment) => sum + payment.amount, 0)}
            </p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Current Payment:</p>
            <p className="font-semibold text-lg text-blue-600">₹{currentPaymentAmount}</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Remaining Amount:</p>
            <p className={`font-semibold text-lg ${remainingAmount > 0 ? 'text-red-600' : 'text-green-600'}`}>
              ₹{Math.max(remainingAmount, 0)}
            </p>
          </div>
        </div>
        
        {/* Progress Bar */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-gray-600 mb-1">
            <span>Payment Progress</span>
            <span>{Math.round((paymentLedger.reduce((sum, payment) => sum + payment.amount, 0) / totalPremium) * 100)}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className={`h-2 rounded-full transition-all duration-300 ${
                remainingAmount <= 0 ? 'bg-green-600' : 'bg-yellow-500'
              }`}
              style={{ 
                width: `${Math.min((paymentLedger.reduce((sum, payment) => sum + payment.amount, 0) / totalPremium) * 100, 100)}%` 
              }}
            ></div>
          </div>
        </div>

        {/* Payment Status Messages */}
        {remainingAmount <= 0 && paymentLedger.length > 0 && (
          <div className="mt-3 p-2 bg-green-100 border border-green-400 rounded-md">
            <p className="text-sm text-green-800">
              ✅ Policy fully paid! Ready to proceed to payout.
            </p>
          </div>
        )}

        {remainingAmount > 0 && paymentLedger.length > 0 && (
          <div className="mt-3 p-2 bg-yellow-100 border border-yellow-400 rounded-md">
            <p className="text-sm text-yellow-800">
              ⚠️ Payment pending: ₹{remainingAmount} remaining. You can still proceed to payout.
            </p>
          </div>
        )}

        {/* Warning if payment exceeds remaining amount */}
        {currentPaymentAmount > remainingAmount && remainingAmount > 0 && (
          <div className="mt-3 p-2 bg-orange-100 border border-orange-400 rounded-md">
            <p className="text-sm text-orange-800">
              ⚠️ Payment amount exceeds remaining balance
            </p>
          </div>
        )}
      </div>

      {/* Payment Made By Radio Buttons */}
      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Payment Made By
        </h4>
        <div className="flex gap-6">
          {paymentMadeByOptions.map((option) => (
            <label key={option.value} className="flex items-center gap-2 cursor-pointer">
              <input
                type="radio"
                name="paymentMadeBy"
                value={option.value}
                checked={form.paymentMadeBy === option.value}
                onChange={() => handleRadioChange('paymentMadeBy', option.value)}
                className="w-4 h-4 text-purple-600 focus:ring-purple-500"
              />
              <span className="text-sm font-medium text-gray-700">{option.label}</span>
            </label>
          ))}
        </div>
        {errors.paymentMadeBy && <p className="text-red-500 text-xs mt-2">{errors.paymentMadeBy}</p>}
      </div>

      {/* Payment Information */}
      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Add New Payment
        </h4>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-600 mb-1">
              Payment Mode *
            </label>
            <select
              name="paymentMode"
              value={form.paymentMode || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.paymentMode ? "border-red-500" : "border-gray-300"
              }`}
            >
              <option value="">Select payment mode</option>
              {paymentModeOptions.map((option) => (
                <option key={option} value={option}>
                  {option}
                </option>
              ))}
            </select>
            {errors.paymentMode && <p className="text-red-500 text-xs mt-1">{errors.paymentMode}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600 mb-1">
              Payment Amount (₹) *
            </label>
            <input
              type="number"
              name="paymentAmount"
              value={form.paymentAmount || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.paymentAmount ? "border-red-500" : "border-gray-300"
              }`}
              placeholder="0"
              max={remainingAmount + currentPaymentAmount}
            />
            {errors.paymentAmount && <p className="text-red-500 text-xs mt-1">{errors.paymentAmount}</p>}
            <p className="text-xs text-gray-500 mt-1">
              Maximum: ₹{remainingAmount}
            </p>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600 mb-1">
              Payment Date *
            </label>
            <input
              type="date"
              name="paymentDate"
              value={form.paymentDate || ""}
              onChange={handleChange}
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.paymentDate ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.paymentDate && <p className="text-red-500 text-xs mt-1">{errors.paymentDate}</p>}
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-600 mb-1">
              Transaction ID
            </label>
            <input
              type="text"
              name="transactionId"
              value={form.transactionId || ""}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
              placeholder="Enter transaction ID (optional)"
            />
            <p className="text-xs text-gray-500 mt-1">Optional for cash payments</p>
          </div>


          <div>
            <label className="block text-sm font-medium text-gray-600 mb-1">
              Bank Name
            </label>
            <input
              type="text"
              name="bankName"
              value={form.bankName || ""}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
              placeholder="Enter bank name"
            />
            <p className="text-xs text-gray-500 mt-1">Required for bank transfers</p>
          </div>
        </div>

        {/* Subvention Info Display */}
        {form.paymentMode && form.paymentMode.includes('Subvention') && (
          <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
            <div className="flex items-center gap-2">
              <FaInfoCircle className="text-blue-500" />
              <span className="text-sm font-medium text-blue-800">Subvention Payment</span>
            </div>
            <p className="text-xs text-blue-600 mt-1">
              This payment will be recorded as {form.paymentMode}. The amount will be considered for payout calculations.
            </p>
          </div>
        )}

        {/* Add Payment Button */}
        <div className="mt-6 flex justify-end">
          <button
            type="button"
            onClick={addPaymentToLedger}
            disabled={!form.paymentAmount || !form.paymentDate || !form.paymentMode || !form.paymentMadeBy}
            className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
          >
            <FaPlus /> Add Payment to Ledger
          </button>
        </div>
      </div>

      {/* Payment Ledger Section */}
      <div className="border rounded-xl p-5">
        <div className="flex items-center justify-between mb-4">
          <h4 className="text-md font-semibold text-gray-700">
            Payment Ledger
          </h4>
          <div className="flex items-center gap-4">
            <span className="text-sm text-gray-500">
              {paymentLedger.length} payment(s) recorded
            </span>
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${paymentStatusColor}`}>
              {overallPaymentStatus}
            </span>
          </div>
        </div>
        
        {paymentLedger.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="bg-gray-50">
                  <th className="text-left p-3 font-medium text-gray-600">Date</th>
                  <th className="text-left p-3 font-medium text-gray-600">Description</th>
                  <th className="text-left p-3 font-medium text-gray-600">Payment Mode</th>
                  <th className="text-left p-3 font-medium text-gray-600">Made By</th>
                  <th className="text-right p-3 font-medium text-gray-600">Amount</th>
                  <th className="text-left p-3 font-medium text-gray-600">Status</th>
                </tr>
              </thead>
              <tbody>
                {paymentLedger.map((payment) => (
                  <tr key={payment.id} className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="p-3 text-gray-700">{payment.date}</td>
                    <td className="p-3 text-gray-700">{payment.description}</td>
                    <td className="p-3 text-gray-700">
                      {payment.mode}
                      {payment.mode.includes('Subvention') && (
                        <span className="ml-2 px-1 bg-blue-100 text-blue-800 text-xs rounded">Subvention</span>
                      )}
                    </td>
                    <td className="p-3 text-gray-700">{payment.paymentMadeBy}</td>
                    <td className="p-3 text-right text-green-600 font-medium">₹{payment.amount}</td>
                    <td className="p-3">
                      <span className="inline-flex items-center px-2 py-1 rounded-full text-xs bg-green-100 text-green-800">
                        {payment.status}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
              <tfoot>
                <tr className="bg-gray-50">
                  <td colSpan="4" className="p-3 text-right font-medium text-gray-700">Total Paid:</td>
                  <td className="p-3 text-right font-bold text-gray-800">
                    ₹{paymentLedger.reduce((sum, payment) => sum + payment.amount, 0)}
                  </td>
                  <td className="p-3">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${paymentStatusColor}`}>
                      {overallPaymentStatus}
                    </span>
                  </td>
                </tr>
                <tr className="bg-purple-50">
                  <td colSpan="4" className="p-3 text-right font-medium text-gray-700">Remaining Balance:</td>
                  <td className="p-3 text-right font-bold text-red-600">
                    ₹{Math.max(totalPremium - paymentLedger.reduce((sum, payment) => sum + payment.amount, 0), 0)}
                  </td>
                  <td className="p-3"></td>
                </tr>
              </tfoot>
            </table>
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500">
            <FaReceipt className="mx-auto text-3xl mb-3 text-gray-300" />
            <p>No payment records found</p>
            <p className="text-sm">Add payments using the form above</p>
          </div>
        )}
      </div>

      {/* Next Step Button */}
      <div className="mt-6 flex justify-between items-center">
        <div className="text-sm text-gray-600">
          {paymentLedger.length > 0 ? (
            remainingAmount <= 0 ? (
              <span className="text-green-600">✅ All payments completed</span>
            ) : (
              <span className="text-yellow-600">⚠️ ₹{remainingAmount} payment pending</span>
            )
          ) : (
            <span className="text-red-600">Please add at least one payment</span>
          )}
        </div>
        
        <button
          onClick={handleNextStep}
          disabled={paymentLedger.length === 0 || isSaving}
          className="inline-flex items-center gap-2 px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isSaving ? "Saving..." : "Proceed to Payout"} 
          <FaArrowRight />
        </button>
      </div>
    </div>
  );
};
// ================== STEP 8: Payout Details ==================
const PayoutDetails = ({ form, handleChange, handleSave, isSaving, errors, acceptedQuote, totalPremium, paymentLedger = [] }) => {
  // Debug: Log the accepted quote to see what data we're receiving
  useEffect(() => {
    console.log("🔍 PayoutDetails - Accepted Quote:", acceptedQuote);
    console.log("🔍 PayoutDetails - NCB from quote:", acceptedQuote?.ncbDiscount);
    console.log("🔍 PayoutDetails - Premium from quote:", acceptedQuote?.premium);
    console.log("🔍 PayoutDetails - Insurer from quote:", acceptedQuote?.insuranceCompany);
  }, [acceptedQuote]);

  // Extract NCB percentage from accepted quote - FIXED LOGIC
  const extractNcbPercentage = () => {
    if (!acceptedQuote) {
      console.log("❌ No accepted quote found");
      return 0;
    }
    
    // Check different possible properties for NCB
    const ncbValue = acceptedQuote.ncbDiscount || acceptedQuote.ncb || 0;
    console.log("🔍 Raw NCB value found:", ncbValue);
    
    if (ncbValue === undefined || ncbValue === null) {
      console.log("❌ No NCB value found in accepted quote");
      return 0;
    }
    
    // Handle different NCB formats: "20%", "20", 20, etc.
    if (typeof ncbValue === 'string') {
      // Remove % sign and convert to number
      const percentage = parseFloat(ncbValue.replace('%', ''));
      console.log("🔍 Parsed NCB percentage from string:", percentage);
      return isNaN(percentage) ? 0 : percentage;
    } else if (typeof ncbValue === 'number') {
      console.log("🔍 NCB as number:", ncbValue);
      return ncbValue;
    }
    
    console.log("❌ Could not parse NCB value:", ncbValue);
    return 0;
  };

  const ncbPercentage = extractNcbPercentage();
  
  // Calculate derived values
  const odAmount = parseFloat(form.odAmount) || 0;
  const ncbAmount = odAmount * (ncbPercentage / 100);
  const subVention = ncbAmount; // Sub vention = NCB Amount
  const netAmount = ncbAmount - subVention; // This will always be 0

  // Auto-populate from accepted quote when component mounts
  useEffect(() => {
    if (acceptedQuote) {
      console.log("📊 Auto-populating payout from accepted quote:", acceptedQuote);
      console.log("💰 NCB Percentage from quote:", ncbPercentage + "%");
      
      // Set net premium from accepted quote premium
      if (acceptedQuote.premium && !form.netPremium) {
        const premiumValue = parseFloat(acceptedQuote.premium);
        console.log("💰 Setting net premium from quote:", premiumValue);
        handleChange({
          target: {
            name: 'netPremium',
            value: premiumValue
          }
        });
      }
      
      // Set OD amount (using premium as OD amount if no specific OD in quote)
      if (!form.odAmount) {
        const odValue = acceptedQuote.odAmount || acceptedQuote.premium;
        if (odValue) {
          const odAmountValue = parseFloat(odValue);
          console.log("💰 Setting OD amount from quote:", odAmountValue);
          handleChange({
            target: {
              name: 'odAmount',
              value: odAmountValue
            }
          });
        }
      }
      
      // Set insurer if available
      if (acceptedQuote.insuranceCompany && !form.insuranceCompany) {
        console.log("🏢 Setting insurer from quote:", acceptedQuote.insuranceCompany);
        handleChange({
          target: {
            name: 'insuranceCompany',
            value: acceptedQuote.insuranceCompany
          }
        });
      }
    }
  }, [acceptedQuote]);

  // Also populate from total premium if available
  useEffect(() => {
    if (totalPremium && totalPremium > 0 && !form.netPremium) {
      console.log("💰 Setting net premium from totalPremium:", totalPremium);
      handleChange({
        target: {
          name: 'netPremium',
          value: parseFloat(totalPremium)
        }
      });
    }
  }, [totalPremium]);

  // Auto-calculate NCB and Subvention when OD amount or NCB percentage changes
  useEffect(() => {
    if (form.odAmount && ncbPercentage >= 0) { // Changed to >= 0 to allow 0 NCB
      const calculatedNcb = (parseFloat(form.odAmount) * (ncbPercentage / 100)).toFixed(2);
      const calculatedSubVention = calculatedNcb;
      
      console.log("🔄 Auto-calculating NCB:", calculatedNcb, "Subvention:", calculatedSubVention);
      
      // Only update if the calculated value is different from current value
      if (parseFloat(form.ncbAmount || 0) !== parseFloat(calculatedNcb)) {
        handleChange({
          target: {
            name: 'ncbAmount',
            value: calculatedNcb
          }
        });
      }
      
      // Auto-set subvention to equal NCB amount
      if (parseFloat(form.subVention || 0) !== parseFloat(calculatedSubVention)) {
        handleChange({
          target: {
            name: 'subVention',
            value: calculatedSubVention
          }
        });
      }
    }
  }, [form.odAmount, ncbPercentage]);

  // Handle OD amount change manually to trigger NCB and Subvention calculation
  const handleOdAmountChange = (e) => {
    const { name, value } = e.target;
    handleChange(e);
    
    if (value && ncbPercentage >= 0) { // Changed to >= 0 to allow 0 NCB
      const calculatedNcb = (parseFloat(value) * (ncbPercentage / 100)).toFixed(2);
      const calculatedSubVention = calculatedNcb;
      
      console.log("🔄 OD changed - Calculating NCB:", calculatedNcb);
      
      setTimeout(() => {
        handleChange({
          target: {
            name: 'ncbAmount',
            value: calculatedNcb
          }
        });
        handleChange({
          target: {
            name: 'subVention',
            value: calculatedSubVention
          }
        });
      }, 100);
    }
  };

  // Calculate total paid from payment ledger
  const totalPaid = paymentLedger.reduce((sum, payment) => sum + (parseFloat(payment.amount) || 0), 0);

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaCreditCard />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Step 8: Payout Details
            </h3>
            <p className="text-xs text-gray-500">
              Financial breakdown and calculations
            </p>
          </div>
        </div>
      </div>

      {/* Quote Information Card */}
      {acceptedQuote && (
        <div className="bg-blue-50 border border-blue-200 rounded-xl p-5 mb-6">
          <h4 className="text-md font-semibold text-blue-700 mb-3">
            📋 Accepted Quote Information
          </h4>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span className="text-blue-600 font-medium">Insurer:</span>
              <div className="font-semibold">{acceptedQuote.insuranceCompany || 'Not specified'}</div>
            </div>
            <div>
              <span className="text-blue-600 font-medium">Premium:</span>
              <div className="font-semibold">₹{parseFloat(acceptedQuote.premium || 0).toLocaleString('en-IN')}</div>
            </div>
            <div>
              <span className="text-blue-600 font-medium">NCB:</span>
              <div className={`font-semibold ${ncbPercentage > 0 ? 'text-green-600' : ncbPercentage === 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                {ncbPercentage}%
              </div>
            </div>
            {acceptedQuote.coverageType && (
              <div>
                <span className="text-blue-600 font-medium">Coverage:</span>
                <div>{acceptedQuote.coverageType}</div>
              </div>
            )}
            {acceptedQuote.idv && (
              <div>
                <span className="text-blue-600 font-medium">IDV:</span>
                <div>₹{parseFloat(acceptedQuote.idv).toLocaleString('en-IN')}</div>
              </div>
            )}
          </div>
          {/* Debug info - can be removed in production */}
          <div className="mt-3 p-2 bg-yellow-100 border border-yellow-300 rounded text-xs">
            <div><strong>Debug Info:</strong></div>
            <div>NCB Percentage: {ncbPercentage}%</div>
            <div>OD Amount: ₹{odAmount.toLocaleString('en-IN')}</div>
            <div>Calculated NCB: ₹{ncbAmount.toLocaleString('en-IN')}</div>
            <div>Source: acceptedQuote.ncbDiscount = {acceptedQuote.ncbDiscount}</div>
          </div>
        </div>
      )}

      {/* Show warning if no accepted quote */}
      {!acceptedQuote && (
        <div className="bg-red-50 border border-red-200 rounded-xl p-5 mb-6">
          <h4 className="text-md font-semibold text-red-700 mb-2">
            ⚠️ No Accepted Quote Found
          </h4>
          <p className="text-sm text-red-600">
            Please go back to the Insurance Quotes step and accept a quote first.
          </p>
        </div>
      )}

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Payout Calculation
        </h4>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Net Premium */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Net Premium (₹) *
            </label>
            <input
              type="number"
              name="netPremium"
              value={form.netPremium || ""}
              onChange={handleChange}
              placeholder="Enter net premium amount"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.netPremium ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.netPremium && <p className="text-red-500 text-xs mt-1">{errors.netPremium}</p>}
            {acceptedQuote?.premium && (
              <p className="text-xs text-blue-500 mt-1">
                From quote: ₹{parseFloat(acceptedQuote.premium).toLocaleString('en-IN')}
              </p>
            )}
          </div>

          {/* OD Amount */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              OD Amount (₹) *
            </label>
            <input
              type="number"
              name="odAmount"
              value={form.odAmount || ""}
              onChange={handleOdAmountChange}
              placeholder="Enter OD amount"
              className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                errors.odAmount ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.odAmount && <p className="text-red-500 text-xs mt-1">{errors.odAmount}</p>}
            <p className="text-xs text-gray-500 mt-1">Own Damage Amount</p>
          </div>

          {/* NCB Percentage (Read-only from quote) */}
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              NCB Percentage *
            </label>
            <div className="flex items-center gap-2">
              <input
                type="number"
                name="ncbPercentage"
                value={ncbPercentage}
                readOnly
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm bg-gray-100 text-gray-700"
              />
              <span className="text-gray-500 font-medium">%</span>
            </div>
            <p className="text-xs text-blue-500 mt-1">
              From accepted quote: {ncbPercentage}%
              {ncbPercentage === 0 && " (No NCB - Claim was taken)"}
            </p>
          </div>

          {/* NCB Amount (Auto-calculated based on quote percentage) - REMOVED AS REQUESTED */}
          {/* Sub Vention (Auto-calculated as NCB Amount) - REMOVED AS REQUESTED */}
        </div>

        {/* Real-time Calculation Display */}
        <div className="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
          <h5 className="font-semibold text-gray-700 mb-3">Real-time Calculation</h5>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
            <div>
              <span className="text-gray-600">OD Amount:</span>
              <div className="font-semibold">₹{odAmount.toLocaleString('en-IN')}</div>
            </div>
            <div>
              <span className="text-gray-600">NCB ({ncbPercentage}%):</span>
              <div className={`font-semibold ${ncbPercentage > 0 ? 'text-purple-600' : ncbPercentage === 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                ₹{ncbAmount.toLocaleString('en-IN')}
              </div>
            </div>
            <div>
              <span className="text-gray-600">Sub Vention:</span>
              <div className={`font-semibold ${ncbPercentage > 0 ? 'text-blue-600' : ncbPercentage === 0 ? 'text-orange-600' : 'text-gray-600'}`}>
                ₹{subVention.toLocaleString('en-IN')}
              </div>
            </div>
            <div>
              <span className="text-gray-600">Net Amount:</span>
              <div className="font-semibold text-green-600">₹{netAmount.toLocaleString('en-IN')}</div>
            </div>
          </div>
          {ncbPercentage === 0 && (
            <div className="mt-3 p-2 bg-orange-100 border border-orange-300 rounded-md">
              <p className="text-xs text-orange-700">
                <strong>Note:</strong> NCB is 0% because a claim was taken in the previous policy year.
                Subvention equals NCB amount (₹0).
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};
// ================== PAYOUT VALIDATION ==================
const payoutValidation = (form, acceptedQuote) => {
  const errors = {};

  if (!form.netPremium) {
    errors.netPremium = "Net premium is required";
  } else if (parseFloat(form.netPremium) <= 0) {
    errors.netPremium = "Net premium must be greater than 0";
  }

  if (!form.odAmount) {
    errors.odAmount = "OD amount is required";
  } else if (parseFloat(form.odAmount) <= 0) {
    errors.odAmount = "OD amount must be greater than 0";
  }

  // REMOVED NCB Amount validation since the field is removed
  // if (!form.ncbAmount) {
  //   errors.ncbAmount = "NCB amount is required";
  // }

  return errors;
};
// ================== MAIN COMPONENT ==================

const NewPolicyPage = () => {
  const navigate = useNavigate();
  const { id } = useParams();
  const hasClearedStorage = useRef(false);
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    buyer_type: "individual",
    insurance_category: "motor",
    status: "draft",
    ts: Date.now(),
    created_by: "ADMIN123",
    insuranceQuotes: [],
    previousClaimTaken: "no",
    // Corporate fields
    companyName: "",
    contactPersonName: "",
    companyPanNumber: "",
    gstNumber: "",
    // Individual fields
    customerName: "",
    mobile: "",
    email: "",
    age: "",
    gender: "",
    panNumber: "",
    aadhaarNumber: "",
    residenceAddress: "",
    pincode: "",
    city: "",
    alternatePhone: "",
    // Nominee fields
    nomineeName: "",
    relation: "",
    nomineeAge: "",
    // Reference fields
    referenceName: "",
    referencePhone: "",
    // Vehicle fields
    regNo: "",
    make: "",
    model: "",
    variant: "",
    engineNo: "",
    chassisNo: "",
    makeMonth: "",
    makeYear: "",
    // Previous Policy fields
    previousInsuranceCompany: "",
    previousPolicyNumber: "",
    previousPolicyType: "",
    previousIssueDate: "",
    previousDueDate: "",
    previousNcbDiscount: "",
    // Insurance Quote fields
    insurer: "",
    coverageType: "",
    premium: "",
    idv: "",
    ncb: "",
    duration: "",
    // New Policy fields
    policyIssued: "",
    insuranceCompany: "",
    policyNumber: "",
    covernoteNumber: "",
    issueDate: "",
    dueDate: "",
    ncbDiscount: "",
    insuranceDuration: "",
    idvAmount: "",
    totalPremium: "",
    // Documents - changed to object for tagging
    documents: {},
    documentTags: {},
    // Payment fields
    paymentMadeBy: "Customer",
    paymentMode: "",
    paymentAmount: "",
    paymentDate: "",
    transactionId: "",
    receiptDate: "",
    bankName: "",
    subvention_payment: "No Subvention",
    paymentStatus: "Payment Pending",
    totalPaidAmount: 0,
    // Payout fields
    netPremium: "",
    odAmount: "",
    ncbAmount: "",
    subVention: "",
    // Additional fields
    policyPrefilled: false
  });
  const [policyId, setPolicyId] = useState(id || null);
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState("");
  const [errors, setErrors] = useState({});
  const [isCompleted, setIsCompleted] = useState(false);
  const [isEditMode, setIsEditMode] = useState(!!id);
  const [loadingPolicy, setLoadingPolicy] = useState(!!id);
  const [acceptedQuote, setAcceptedQuote] = useState(null);
  const [paymentLedger, setPaymentLedger] = useState([]);

  const steps = [
    "Case Details",
    "Vehicle Details", 
    "Previous Policy",
    "Insurance Quotes",
    "New Policy",
    "Documents",
    "Payment",
    "Payout"
  ];

  // Enhanced function to calculate total premium
  const getTotalPremium = () => {
    console.log("🔍 Calculating total premium...");
    
    // First check if we have an accepted quote with premium
    if (acceptedQuote && acceptedQuote.premium) {
      console.log("✅ Using premium from accepted quote:", acceptedQuote.premium);
      return parseFloat(acceptedQuote.premium);
    }
    
    // Then check if we have premium in the insurance quote section
    if (form.premium) {
      console.log("✅ Using premium from form.premium:", form.premium);
      return parseFloat(form.premium);
    }
    
    // Then check if we have totalPremium in policy info
    if (form.totalPremium) {
      console.log("✅ Using premium from form.totalPremium:", form.totalPremium);
      return parseFloat(form.totalPremium);
    }
    
    // Check insurance quotes array
    if (form.insuranceQuotes && form.insuranceQuotes.length > 0) {
      const acceptedQuoteFromArray = form.insuranceQuotes.find(quote => quote.accepted === true);
      if (acceptedQuoteFromArray && acceptedQuoteFromArray.premium) {
        console.log("✅ Using premium from accepted quote in insuranceQuotes array:", acceptedQuoteFromArray.premium);
        return parseFloat(acceptedQuoteFromArray.premium);
      }
    }
    
    console.log("❌ No premium found, defaulting to 0");
    // Default to 0 if no premium found
    return 0;
  };

  const totalPremium = getTotalPremium();

  // Debug effect to track premium calculation
  useEffect(() => {
    console.log("💰 Premium Calculation Debug:");
    console.log("   - acceptedQuote:", acceptedQuote);
    console.log("   - form.premium:", form.premium);
    console.log("   - form.totalPremium:", form.totalPremium);
    console.log("   - form.insuranceQuotes:", form.insuranceQuotes);
    console.log("   - Calculated totalPremium:", totalPremium);
  }, [acceptedQuote, form.premium, form.totalPremium, form.insuranceQuotes, totalPremium]);

  // Debug effect for payment ledger
  useEffect(() => {
    console.log("💰 Payment Ledger Updated:", {
      ledger: paymentLedger,
      length: paymentLedger.length,
      total: paymentLedger.reduce((sum, p) => sum + p.amount, 0)
    });
  }, [paymentLedger]);

  const handleQuoteAccepted = (quote) => {
    console.log("✅ Quote accepted in parent:", quote);
    setAcceptedQuote(quote);
    
    if (policyId) {
      setTimeout(() => {
        updatePolicy();
      }, 500);
    }
  };

  // ENHANCED: Function to update payment ledger from Payment component
  const handlePaymentLedgerUpdate = (ledger) => {
    console.log("💰 Payment ledger updated in main component:", {
      ledger: ledger,
      length: ledger.length,
      total: ledger.reduce((sum, payment) => sum + payment.amount, 0)
    });
    setPaymentLedger(ledger);
    
    // Update form with payment status and total paid amount
    const totalPaid = ledger.reduce((sum, payment) => sum + payment.amount, 0);
    const paymentStatus = totalPaid >= totalPremium ? 'Fully Paid' : 'Payment Pending';
    
    setForm(prev => ({
      ...prev,
      totalPaidAmount: totalPaid,
      paymentStatus: paymentStatus
    }));
  };

  // ============ FIXED CLEAR LOCALSTORAGE EFFECT ============
  useEffect(() => {
    if (!isEditMode && !id && !hasClearedStorage.current) {
      console.log("🧹 Clearing localStorage for new case");
      localStorage.removeItem('insuranceQuotes');
      
      setForm(prev => ({
        ...prev,
        insurer: "",
        coverageType: "", 
        premium: "",
        idv: "",
        ncb: "",
        duration: "",
        insuranceQuotes: [],
        previousClaimTaken: "no"
      }));
      
      setAcceptedQuote(null);
      setPaymentLedger([]); // Clear payment ledger for new case
      hasClearedStorage.current = true;
    }
  }, [isEditMode, id]);

  // Debug when component mounts
  useEffect(() => {
    console.log("Component mounted - Edit Mode:", isEditMode, "Policy ID:", id);
  }, [isEditMode, id]);

  useEffect(() => {
    if (id) {
      fetchPolicyData(id);
    }
  }, [id]);

  // Enhanced function to fetch policy data for editing with proper mapping
  const fetchPolicyData = async (policyId) => {
    setLoadingPolicy(true);
    try {
      console.log("🔍 Fetching policy data for ID:", policyId);
      const response = await axios.get(`${API_BASE_URL}/policies/${policyId}`);
      const policyData = response.data;
      
      console.log("📦 Full API Response:", policyData);
      
      if (!policyData || !policyData.data) {
        console.error("❌ No policy data received from API");
        setSaveMessage("❌ No policy data found for this ID");
        return;
      }

      const actualData = policyData.data;
      console.log("📊 Actual Policy Data:", actualData);
      
      // Transform documents array to object with tagging
      const documentsObject = {};
      const documentTagsObject = {};
      if (actualData.documents && Array.isArray(actualData.documents)) {
        actualData.documents.forEach((docUrl, index) => {
          const docId = `doc_${index}`;
          documentsObject[docId] = docUrl;
          documentTagsObject[docId] = docUrl.tag||""; // Initialize tags as empty
        });
      }

      // Find accepted quote from insurance_quotes array
      let acceptedQuoteData = null;
      if (actualData.insurance_quotes && Array.isArray(actualData.insurance_quotes)) {
        acceptedQuoteData = actualData.insurance_quotes.find(quote => quote.accepted === true);
        if (!acceptedQuoteData && actualData.insurance_quotes.length > 0) {
          acceptedQuoteData = actualData.insurance_quotes[0]; // Fallback to first quote
        }
      }

      // Create a clean transformed data object with ALL fields properly mapped
      const transformedData = {
        // Basic info
        buyer_type: actualData.buyer_type || "individual",
        insurance_category: actualData.insurance_category || "motor",
        status: actualData.status || "draft",
        
        // Customer details - handle both individual and corporate
        customerName: actualData.customer_details?.name || "",
        mobile: actualData.customer_details?.mobile || "",
        email: actualData.customer_details?.email || "",
        age: actualData.customer_details?.age || "",
        gender: actualData.customer_details?.gender || "",
        panNumber: actualData.customer_details?.panNumber || "",
        aadhaarNumber: actualData.customer_details?.aadhaarNumber || "",
        residenceAddress: actualData.customer_details?.residenceAddress || "",
        pincode: actualData.customer_details?.pincode || "",
        city: actualData.customer_details?.city || "",
        alternatePhone: actualData.customer_details?.alternatePhone || "",
        
        // Corporate fields
        companyName: actualData.customer_details?.companyName || "",
        contactPersonName: actualData.customer_details?.contactPersonName || "",
        companyPanNumber: actualData.customer_details?.companyPanNumber || "",
        gstNumber: actualData.customer_details?.gstNumber || "",
        
        // Nominee
        nomineeName: actualData.nominee?.name || "",
        relation: actualData.nominee?.relation || "",
        nomineeAge: actualData.nominee?.age || "",
        
        // Reference
        referenceName: actualData.refrence?.name || "",
        referencePhone: actualData.refrence?.phone || "",
        
        // Vehicle details
        regNo: actualData.vehicle_details?.regNo || "",
        make: actualData.vehicle_details?.make || "",
        model: actualData.vehicle_details?.model || "",
        variant: actualData.vehicle_details?.variant || "",
        engineNo: actualData.vehicle_details?.engineNo || "",
        chassisNo: actualData.vehicle_details?.chassisNo || "",
        makeMonth: actualData.vehicle_details?.makeMonth || "",
        makeYear: actualData.vehicle_details?.makeYear || "",
        
        // Previous policy
        previousInsuranceCompany: actualData.previous_policy?.insuranceCompany || "",
        previousPolicyNumber: actualData.previous_policy?.policyNumber || "",
        previousPolicyType: actualData.previous_policy?.policyType || "",
        previousIssueDate: actualData.previous_policy?.issueDate || "",
        previousDueDate: actualData.previous_policy?.dueDate || "",
        previousClaimTaken: actualData.previous_policy?.claimTakenLastYear || "no",
        previousNcbDiscount: actualData.previous_policy?.ncbDiscount || "",
        
        // Insurance quotes
        insuranceQuotes: actualData.insurance_quotes || [],
        
        // Insurance quote (legacy)
        insurer: actualData.insurance_quote?.insurer || "",
        coverageType: actualData.insurance_quote?.coverageType || "",
        premium: actualData.insurance_quote?.premium || "",
        idv: actualData.insurance_quote?.idv || "",
        ncb: actualData.insurance_quote?.ncb || "",
        duration: actualData.insurance_quote?.duration || "",
        
        // Policy info
        policyIssued: actualData.policy_info?.policyIssued || "",
        insuranceCompany: actualData.policy_info?.insuranceCompany || "",
        policyNumber: actualData.policy_info?.policyNumber || "",
        covernoteNumber: actualData.policy_info?.covernoteNumber || "",
        issueDate: actualData.policy_info?.issueDate || "",
        dueDate: actualData.policy_info?.dueDate || "",
        ncbDiscount: actualData.policy_info?.ncbDiscount || "",
        insuranceDuration: actualData.policy_info?.insuranceDuration || "",
        idvAmount: actualData.policy_info?.idvAmount || "",
        totalPremium: actualData.policy_info?.totalPremium || "",
        
        // Payment info
        paymentMadeBy: actualData.payment_info?.paymentMadeBy || "Customer",
        paymentMode: actualData.payment_info?.paymentMode || "",
        paymentAmount: actualData.payment_info?.paymentAmount || "",
        paymentDate: actualData.payment_info?.paymentDate || "",
        transactionId: actualData.payment_info?.transactionId || "",
        receiptDate: actualData.payment_info?.receiptDate || "",
        bankName: actualData.payment_info?.bankName || "",
        subvention_payment: actualData.payment_info?.subvention_payment || "No Subvention",
        paymentStatus: actualData.payment_info?.paymentStatus || "Payment Pending",
        totalPaidAmount: actualData.payment_info?.totalPaidAmount || 0,
         
        // Payout
        netPremium: actualData.payout?.netPremium || "",
        odAmount: actualData.payout?.odAmount || "",
        ncbAmount: actualData.payout?.ncbAmount || "",
        subVention: actualData.payout?.subVention || "",
        
        // Documents as object
        documents: documentsObject,
        documentTags: documentTagsObject,
        
        // System fields
        ts: actualData.ts || Date.now(),
        created_by: actualData.created_by || "ADMIN123",
        policyPrefilled: true
      };
      
      console.log("✅ Transformed Form Data:", transformedData);
      console.log("📋 Previous Claim Taken:", transformedData.previousClaimTaken);
      console.log("💰 Insurance Quotes after transformation:", transformedData.insuranceQuotes);
      console.log("📄 Documents as object:", transformedData.documents);
      console.log("💳 Payment Info:", {
        paymentMadeBy: transformedData.paymentMadeBy,
        paymentMode: transformedData.paymentMode,
        paymentAmount: transformedData.paymentAmount,
        paymentStatus: transformedData.paymentStatus,
        totalPaidAmount: transformedData.totalPaidAmount
      });
      
      setForm(transformedData);
      
      // Set accepted quote
      if (acceptedQuoteData) {
        console.log("✅ Setting accepted quote from data:", acceptedQuoteData);
        setAcceptedQuote(acceptedQuoteData);
      }
      
      // Set payment ledger from payment history if available
      if (actualData.payment_ledger && Array.isArray(actualData.payment_ledger)) {
        console.log("💰 Setting payment ledger from API:", actualData.payment_ledger);
        setPaymentLedger(actualData.payment_ledger);
      } else if (actualData.payment_info?.paymentHistory && Array.isArray(actualData.payment_info.paymentHistory)) {
        console.log("💰 Setting payment ledger from payment history:", actualData.payment_info.paymentHistory);
        setPaymentLedger(actualData.payment_info.paymentHistory);
      } else {
        console.log("💰 No payment ledger found in API response");
        setPaymentLedger([]);
      }
      
      setSaveMessage("✅ Policy data loaded successfully! You can now edit the form.");
      
    } catch (error) {
      console.error("❌ Error fetching policy data:", error);
      console.error("❌ Error details:", error.response?.data);
      setSaveMessage(`❌ Error loading policy data: ${error.message}`);
    } finally {
      setLoadingPolicy(false);
    }
  };

  // Enhanced handleChange to properly handle all field types including documents object
  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: "" }));
    }
    
    if (type === "radio") {
      setForm((f) => ({ ...f, [name]: value }));
      return;
    }
    
    if (type === "checkbox") {
      setForm((f) => ({ ...f, [name]: checked }));
      return;
    }
    
    if (type === "number") {
      setForm((f) => ({ ...f, [name]: value === "" ? "" : Number(value) }));
      return;
    }
    
    // Handle documents object updates
    if (name.startsWith("documents.")) {
      const docId = name.split('.')[1];
      setForm((f) => ({ 
        ...f, 
        documents: {
          ...f.documents,
          [docId]: value
        }
      }));
      return;
    }
    
    // Handle document tags updates
    if (name.startsWith("documentTags.")) {
      const docId = name.split('.')[1];
      setForm((f) => ({ 
        ...f, 
        documentTags: {
          ...f.documentTags,
          [docId]: value
        }
      }));
      return;
    }
    
    if (name === "insuranceQuotes" && Array.isArray(value)) {
      console.log("💰 Updating insuranceQuotes array:", value);
      setForm((f) => ({ ...f, [name]: value }));
      return;
    }
    
    if (name === "previousClaimTaken" && value === "yes") {
      setForm((f) => ({ 
        ...f, 
        [name]: value,
        ncb: "0%"
      }));
      return;
    }
    
    setForm((f) => ({ ...f, [name]: value }));
  };

  // Updated documents update handler for object format
  const handleDocumentsUpdate = (documentsObject) => {
    console.log("📄 Documents updated in main component (object):", documentsObject);
    setForm((f) => ({ 
      ...f, 
      documents: documentsObject,
      // Initialize empty tags for new documents
      documentTags: Object.keys(documentsObject).reduce((tags, docId) => ({
        ...tags,
        [docId]: f.documentTags?.[docId] || ""
      }), {})
    }));
  };

  // ============ FIXED INSURANCE QUOTES UPDATE ============
  const handleInsuranceQuotesUpdate = useCallback((quotesArray) => {
    // Prevent infinite loop by checking if quotes actually changed
    const currentQuotes = form.insuranceQuotes || [];
    const newQuotes = quotesArray || [];
    
    // Only update if quotes actually changed
    if (JSON.stringify(currentQuotes) !== JSON.stringify(newQuotes)) {
      console.log("💰 Insurance quotes updated in main component:", newQuotes.length, "quotes");
      setForm((f) => ({ 
        ...f, 
        insuranceQuotes: newQuotes 
      }));
    }
  }, [form.insuranceQuotes]);

  const handleNestedChange = (section, field, value) => {
    setForm((f) => ({
      ...f,
      [section]: {
        ...f[section],
        [field]: value
      }
    }));
  };

  // Validation functions
  const validateCurrentStep = () => {
    let stepErrors = {};
    
    switch (step) {
      case 1:
        stepErrors = validationRules.validateStep1(form);
        break;
      case 2:
        stepErrors = validationRules.validateStep2(form);
        break;
      case 3:
        stepErrors = previousPolicyValidation(form);
        break;
      case 4:
        stepErrors = validationRules.validateStep3(form, acceptedQuote);
        break;
      case 5:
        stepErrors = validationRules.validateStep4(form);
        break;
      case 6:
        stepErrors = validationRules.validateStep5(form);
        break;
      case 7:
        if (paymentLedger.length === 0) {
          stepErrors = validationRules.validateStep6(form);
          if (Object.keys(stepErrors).length > 0) {
            stepErrors.paymentLedger = "Please add at least one payment or fill all payment fields";
          }
        }
        break;
      case 8:
        stepErrors = payoutValidation(form, acceptedQuote);
        break;
      default:
        stepErrors = {};
    }
    
    setErrors(stepErrors);
    return Object.keys(stepErrors).length === 0;
  };

  const createPolicy = async () => {
    try {
      setIsSaving(true);
      
      // Prepare customer details based on buyer type
      const customerDetails = {
        name: form.customerName || "",
        mobile: form.mobile || "",
        email: form.email || "",
        residenceAddress: form.residenceAddress || "",
        pincode: form.pincode || "",
        city: form.city || "",
        alternatePhone: form.alternatePhone || ""
      };

      // Add individual or corporate specific fields
      if (form.buyer_type === "individual") {
        customerDetails.age = form.age || "";
        customerDetails.gender = form.gender || "";
        customerDetails.panNumber = form.panNumber || "";
        customerDetails.aadhaarNumber = form.aadhaarNumber || "";
      } else if (form.buyer_type === "corporate") {
        customerDetails.companyName = form.companyName || "";
        customerDetails.contactPersonName = form.contactPersonName || "";
        customerDetails.companyPanNumber = form.companyPanNumber || "";
        customerDetails.gstNumber = form.gstNumber || "";
      }

      const policyData = {
        buyer_type: form.buyer_type || "individual",
        customer_details: customerDetails,
        nominee: {
          name: form.nomineeName || "",
          relation: form.relation || "",
          age: form.nomineeAge || ""
        },
        refrence: {
          name: form.referenceName || "",
          phone: form.referencePhone || ""
        },
        insurance_category: form.insurance_category || "motor",
        status: form.status || "pending",
        insurance_quotes: form.insuranceQuotes || [],
        ts: Date.now(),
        created_by: form.created_by || "ADMIN123"
      };

      console.log("📝 Creating policy with data:", policyData);

      const response = await axios.post(`${API_BASE_URL}/policies`, policyData, {
        headers: {
          "Content-Type": "application/json"
        }
      });
      
      if (response.data && response.data.id) {
        setPolicyId(response.data.id);
        setSaveMessage("✅ Policy created successfully!");
        return response.data.id;
      } else {
        throw new Error("No policy ID in response");
      }
    } catch (error) {
      console.error("❌ Error creating policy:", error);
      let errorMessage = "Error creating policy";
      
      if (error.response) {
        errorMessage = `Server error: ${error.response.status} - ${JSON.stringify(error.response.data)}`;
      } else if (error.request) {
        errorMessage = "Network error: No response from server";
      } else {
        errorMessage = `Error: ${error.message}`;
      }
      
      setSaveMessage(errorMessage);
      throw error;
    } finally {
      setIsSaving(false);
    }
  };

  // ENHANCED updatePolicy function with payment data support
  const updatePolicy = async (overrideData = null) => {
    try {
      setIsSaving(true);
      
      if (!policyId && !isEditMode) {
        console.log("📝 No policy ID found, creating new policy...");
        const newPolicyId = await createPolicy();
        if (!newPolicyId) {
          throw new Error("Failed to create policy");
        }
        setPolicyId(newPolicyId);
        return;
      }

      if (!policyId) {
        throw new Error("Policy ID is required for update");
      }

      let updateData = {};
      
      // If overrideData is provided, use it directly (for payment data)
      if (overrideData) {
        console.log("🔄 Using override data for update:", overrideData);
        updateData = overrideData;
      } else {
        // Standard step-based update data
        switch (step) {
          case 1:
            // Prepare customer details based on buyer type
            const customerDetails = {
              name: form.customerName || "",
              mobile: form.mobile || "",
              email: form.email || "",
              residenceAddress: form.residenceAddress || "",
              pincode: form.pincode || "",
              city: form.city || "",
              alternatePhone: form.alternatePhone || ""
            };

            // Add individual or corporate specific fields
            if (form.buyer_type === "individual") {
              customerDetails.age = form.age || "";
              customerDetails.gender = form.gender || "";
              customerDetails.panNumber = form.panNumber || "";
              customerDetails.aadhaarNumber = form.aadhaarNumber || "";
            } else if (form.buyer_type === "corporate") {
              customerDetails.companyName = form.companyName || "";
              customerDetails.contactPersonName = form.contactPersonName || "";
              customerDetails.companyPanNumber = form.companyPanNumber || "";
              customerDetails.gstNumber = form.gstNumber || "";
            }

            updateData = {
              buyer_type: form.buyer_type,
              customer_details: customerDetails,
              nominee: {
                name: form.nomineeName || "",
                relation: form.relation || "",
                age: form.nomineeAge || ""
              },
              refrence: {
                name: form.referenceName || "",
                phone: form.referencePhone || ""
              }
            };
            break;
          case 2:
            updateData = {
              vehicle_details: {
                regNo: form.regNo || "",
                make: form.make || "",
                model: form.model || "",
                variant: form.variant || "",
                engineNo: form.engineNo || "",
                chassisNo: form.chassisNo || "",
                makeMonth: form.makeMonth || "",
                makeYear: form.makeYear || ""
              }
            };
            break;
          case 3:
            updateData = {
              previous_policy: {
                insuranceCompany: form.previousInsuranceCompany || "",
                policyNumber: form.previousPolicyNumber || "",
                policyType: form.previousPolicyType || "",
                issueDate: form.previousIssueDate || "",
                dueDate: form.previousDueDate || "",
                claimTakenLastYear: form.previousClaimTaken || "no",
                ncbDiscount: form.previousNcbDiscount || 0
              }
            };
            break;
          case 4:
            updateData = {
              insurance_quote: {
                insurer: form.insurer || "",
                coverageType: form.coverageType || "",
                premium: form.premium || "",
                idv: form.idv || "",
                ncb: form.ncb || "",
                duration: form.duration || ""
              }
            };
            break;
          case 5:
            updateData = {
              policy_info: {
                policyIssued: form.policyIssued || "",
                insuranceCompany: form.insuranceCompany || "",
                policyNumber: form.policyNumber || "",
                covernoteNumber: form.covernoteNumber || "",
                issueDate: form.issueDate || "",
                dueDate: form.dueDate || "",
                ncbDiscount: form.ncbDiscount || "",
                insuranceDuration: form.insuranceDuration || "",
                idvAmount: form.idvAmount || "",
                totalPremium: form.totalPremium || ""
              }
            };
            break;
          case 6:
            // Convert documents object back to array for API
            const docs = Object.keys(form.documents || {});
            let documentsArray = [];
            for(let i=0;i<docs.length;i++){
              const id = docs[i];
              let doc = (form.documents || {})[id];
              doc.tag = form.documentTags[id];
              documentsArray.push(doc);
            }
            updateData = {
              documents: documentsArray
            };
            break;
          case 7:
            // FIXED: Payment data structure with ledger
            const totalPaid = paymentLedger.reduce((sum, payment) => sum + payment.amount, 0);
            const paymentStatus = totalPaid >= totalPremium ? 'Fully Paid' : 'Payment Pending';
            
            updateData = {
              payment_info: {
                paymentMadeBy: form.paymentMadeBy || "",
                paymentMode: form.paymentMode || "",
                paymentAmount: form.paymentAmount || "",
                paymentDate: form.paymentDate || "",
                transactionId: form.transactionId || "",
                receiptDate: form.receiptDate || "",
                bankName: form.bankName || "",
                subvention_payment: form.subvention_payment || "No Subvention",
                paymentStatus: paymentStatus,
                totalPaidAmount: totalPaid
              },
              payment_ledger: paymentLedger
            };
            break;
          case 8:
            updateData = {
              payout: {
                netPremium: form.netPremium || 0,
                odAmount: form.odAmount || 0,
                ncbAmount: form.ncbAmount || 0,
                subVention: form.subVention || 0,
                netAmount: (form.ncbAmount || 0) - (form.subVention || 0),
              },
              payment_ledger: paymentLedger,
            };
            break;
          default:
            updateData = {};
        }
      }

      // Always include insurance quotes in updates
      if (form.insuranceQuotes && form.insuranceQuotes.length > 0) {
        updateData.insurance_quotes = form.insuranceQuotes;
      }
      
      // Include payment ledger if it exists and not already included
      if (paymentLedger.length > 0 && !updateData.payment_ledger) {
        updateData.payment_ledger = paymentLedger;
      }

       const totalPaidAmount = paymentLedger.reduce((sum, payment) => sum + (parseFloat(payment.amount) || 0), 0);
  const currentPaymentAmount = parseFloat(form.paymentAmount) || 0;
  const remainingAmount = (parseFloat(totalPremium) || 0) - totalPaidAmount;
  if(remainingAmount==0 && totalPaidAmount>0){
    updateData.status = 'payment completed';
  }

      // DEBUG: Log exactly what's being sent
      console.log("🚀 SENDING TO BACKEND:", {
        policyId,
        updateData,
        hasPaymentInfo: !!updateData.payment_info,
        hasPaymentLedger: !!updateData.payment_ledger,
        paymentLedgerLength: updateData.payment_ledger?.length || 0,
        insuranceQuotesLength: updateData.insurance_quotes?.length || 0
      });

      console.log("💰 Sending insurance_quotes to API:", updateData.insurance_quotes);
      console.log("💰 Sending payment_ledger to API:", updateData.payment_ledger || paymentLedger);
      console.log("📊 Previous Claim Status:", form.previousClaimTaken);
      console.log("💳 Payment Data being sent:", updateData.payment_info);

      const response = await axios.put(`${API_BASE_URL}/policies/${policyId}`, updateData, {
        headers: {
          "Content-Type": "application/json"
        }
      });
      
      console.log("✅ API Response:", response.data);
      
      setSaveMessage(isEditMode ? "✅ Policy updated successfully!" : "✅ Progress saved successfully!");
      
      return response.data;
    } catch (error) {
      console.error("❌ Error updating policy:", error);
      let errorMessage = "Error saving progress";
      
      if (error.response) {
        errorMessage = `Save error: ${error.response.status} - ${JSON.stringify(error.response.data)}`;
        console.error("❌ API Error details:", error.response.data);
      } else if (error.request) {
        errorMessage = "Network error: No response from server";
      } else {
        errorMessage = `Error: ${error.message}`;
      }
      
      setSaveMessage(`❌ ${errorMessage}`);
      throw error;
    } finally {
      setIsSaving(false);
    }
  };

  // ENHANCED handleSave function to accept payment data
  const handleSave = async (paymentData = null) => {
    if (!validateCurrentStep()) {
      setSaveMessage("❌ Please fix the validation errors before saving");
      return;
    }
    
    try {
      // If paymentData is provided, use it for update
      if (paymentData) {
        console.log("💾 Saving payment data:", paymentData);
        await updatePolicy(paymentData);
      } else {
        await updatePolicy();
      }
    } catch (error) {
      // Error handling is done in updatePolicy
    }
  };

  // NEW: Handle Save and Exit
  const handleSaveAndExit = async () => {
    try {
      setIsSaving(true);
      
      // Save current progress first
      if (policyId) {
        await updatePolicy();
      } else {
        await createPolicy();
      }
      
      // Navigate back to policies page after successful save
      setTimeout(() => {
        navigate("/policies");
      }, 1000);
      
    } catch (error) {
      console.error("❌ Error saving before exit:", error);
      setSaveMessage("❌ Error saving progress. Please try again.");
    } finally {
      setIsSaving(false);
    }
  };

  const handleFinish = async () => {
    if (!validateCurrentStep()) {
      setSaveMessage("❌ Please fix the validation errors before finishing");
      return;
    }

    try {
      setIsSaving(true);
      
      // Prepare customer details based on buyer type
      const customerDetails = {
        name: form.customerName,
        mobile: form.mobile,
        email: form.email,
        residenceAddress: form.residenceAddress,
        pincode: form.pincode,
        city: form.city,
        alternatePhone: form.alternatePhone || ""
      };

      // Add individual or corporate specific fields
      if (form.buyer_type === "individual") {
        customerDetails.age = form.age;
        customerDetails.gender = form.gender;
        customerDetails.panNumber = form.panNumber;
        customerDetails.aadhaarNumber = form.aadhaarNumber;
      } else if (form.buyer_type === "corporate") {
        customerDetails.companyName = form.companyName;
        customerDetails.contactPersonName = form.contactPersonName;
        customerDetails.companyPanNumber = form.companyPanNumber;
        customerDetails.gstNumber = form.gstNumber;
      }

      // Convert documents object to array for final save
      const documentsArray = Object.values(form.documents || {});

      // Calculate final payment status
      const totalPaid = paymentLedger.reduce((sum, payment) => sum + payment.amount, 0);
      const paymentStatus = totalPaid >= totalPremium ? 'Fully Paid' : 'Payment Pending';

      const finalData = {
        buyer_type: form.buyer_type,
        customer_details: customerDetails,
        nominee: {
          name: form.nomineeName,
          relation: form.relation,
          age: form.nomineeAge
        },
        refrence: {
          name: form.referenceName,
          phone: form.referencePhone
        },
        vehicle_details: {
          regNo: form.regNo,
          make: form.make,
          model: form.model,
          variant: form.variant,
          engineNo: form.engineNo,
          chassisNo: form.chassisNo,
          makeMonth: form.makeMonth,
          makeYear: form.makeYear
        },
        previous_policy: {
          insuranceCompany: form.previousInsuranceCompany || "",
          policyNumber: form.previousPolicyNumber || "",
          policyType: form.previousPolicyType || "",
          issueDate: form.previousIssueDate || "",
          dueDate: form.previousDueDate || "",
          claimTakenLastYear: form.previousClaimTaken || "no",
          ncbDiscount: form.previousNcbDiscount || 0
        },
        insurance_quote: {
          insurer: form.insurer,
          coverageType: form.coverageType,
          premium: form.premium,
          idv: form.idv,
          ncb: form.ncb,
          duration: form.duration
        },
        insurance_quotes: form.insuranceQuotes || [],
        policy_info: {
          policyIssued: form.policyIssued,
          insuranceCompany: form.insuranceCompany,
          policyNumber: form.policyNumber,
          covernoteNumber: form.covernoteNumber,
          issueDate: form.issueDate,
          dueDate: form.dueDate,
          ncbDiscount: form.ncbDiscount,
          insuranceDuration: form.insuranceDuration,
          idvAmount: form.idvAmount,
          totalPremium: form.totalPremium
        },
        documents: documentsArray,
        payment_info: {
          paymentMadeBy: form.paymentMadeBy,
          paymentMode: form.paymentMode,
          paymentAmount: form.paymentAmount,
          paymentDate: form.paymentDate,
          transactionId: form.transactionId,
          receiptDate: form.receiptDate,
          bankName: form.bankName,
          subvention_payment: form.subvention_payment || "No Subvention",
          paymentStatus: paymentStatus,
          totalPaidAmount: totalPaid
        },
        payment_ledger: paymentLedger,
        payout: {
          netPremium: form.netPremium || 0,
          odAmount: form.odAmount || 0,
          ncbAmount: form.ncbAmount || 0,
          subVention: form.subVention || 0,
          netAmount: (form.ncbAmount || 0) - (form.subVention || 0)
        },
        status: "completed",
        completed_at: Date.now(),
        ts: form.ts,
        created_by: form.created_by
      };

      console.log(`✅ Finalizing policy with previous claim:`, form.previousClaimTaken);
      console.log(`✅ Finalizing policy ${policyId} with complete data:`, finalData);
      console.log(`💰 Final payment ledger:`, paymentLedger);
      console.log(`💳 Final payment info:`, finalData.payment_info);

      const response = await axios.put(`${API_BASE_URL}/policies/${policyId}`, finalData, {
        headers: {
          "Content-Type": "application/json"
        }
      });

      setSaveMessage("✅ Policy completed successfully! Redirecting to policies page...");
      setIsCompleted(true);
      
      setTimeout(() => {
        navigate("/policies");
      }, 2000);
      
    } catch (error) {
      console.error("❌ Error completing policy:", error);
      setSaveMessage("❌ Error completing policy. Please try again.");
    } finally {
      setIsSaving(false);
    }
  };

  const nextStep = async () => {
    if (step === steps.length) {
      await handleFinish();
      return;
    }

    if (!validateCurrentStep()) {
      setSaveMessage("❌ Please fix the validation errors before proceeding");
      return;
    }

    try {
      await updatePolicy();
      setStep((s) => Math.min(s + 1, steps.length));
      setErrors({});
      setSaveMessage("");
    } catch (error) {
      console.log("Save failed, staying on current step");
    }
  };

  const prevStep = () => {
    setStep((s) => Math.max(s - 1, 1));
    setErrors({});
    setSaveMessage("");
  };

  const progressPercent = Math.round(((step - 1) / (steps.length - 1)) * 100);
  const nextLabel = step < steps.length ? `Next: ${steps[step]}` : "Finish";

  const stepProps = {
    form,
    handleChange,
    handleSave,
    isSaving,
    errors,
    onDocumentsUpdate: handleDocumentsUpdate,
    onInsuranceQuotesUpdate: handleInsuranceQuotesUpdate,
    isNcbEligible: form.previousClaimTaken !== "yes",
    acceptedQuote,
    onQuoteAccepted: handleQuoteAccepted,
    totalPremium,
    onNextStep: nextStep,
    paymentLedger,
    onPaymentLedgerUpdate: handlePaymentLedgerUpdate,
    isEditMode: !!id 
  };

  if (loadingPolicy) {
    return (
      <div className="flex-1 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen p-6">
        <div className="max-w-6xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h1 className="text-3xl font-extrabold text-gray-800">
                Edit Insurance Case #{id}
              </h1>
              <p className="text-sm text-gray-500">Loading policy data...</p>
            </div>
            <Link
              to="/policies"
              className="inline-flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-600 hover:shadow"
            >
              <FaChevronLeft /> Back to Cases
            </Link>
          </div>
          <div className="bg-white rounded-2xl border border-gray-200 shadow-sm p-8 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-500 mx-auto"></div>
            <p className="mt-3 text-gray-600">Loading policy data...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen p-6">
      <div className="max-w-6xl mx-auto">
        {saveMessage && (
          <div className={`mb-4 p-3 rounded-md ${
            saveMessage.includes("❌") || saveMessage.includes("Error") || saveMessage.includes("validation") 
              ? "bg-red-100 text-red-700 border border-red-300" 
              : saveMessage.includes("✅") || saveMessage.includes("completed successfully") || saveMessage.includes("successfully")
              ? "bg-green-100 text-green-700 border border-green-300"
              : "bg-purple-100 text-purple-700 border border-purple-300"
          }`}>
            {saveMessage}
            {isCompleted && (
              <div className="text-sm mt-1">
                Redirecting to policies page...
              </div>
            )}
          </div>
        )}

        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-extrabold text-gray-800">
              {isEditMode ? 'Edit Insurance Case' : 'New Insurance Case'} 
              {policyId && ` #${policyId}`}
            </h1>
            <p className="text-sm text-gray-500">
              {isEditMode ? 'Edit existing insurance case' : 'Create a new insurance case'}
              {isEditMode && " - All fields are pre-filled with existing data"}
            </p>
          </div>
          <Link
            to="/policies"
            className="inline-flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-600 hover:shadow"
          >
            <FaChevronLeft /> Back to Cases
          </Link>
        </div>

        <div className="bg-white rounded-2xl border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="text-sm text-gray-600">
              Step {step} of {steps.length}
            </div>
            <div className="text-sm text-gray-500">
              {progressPercent}% Complete
            </div>
          </div>

          <div className="w-full bg-gray-200 h-2 rounded-full overflow-hidden mb-6">
            <div
              className="h-2 bg-black rounded-full transition-all duration-300"
              style={{ width: `${progressPercent}%` }}
            />
          </div>

          <div className="flex items-center justify-between gap-4">
            {steps.map((title, idx) => {
              const i = idx + 1;
              const isCompleted = i < step;
              const isCurrent = i === step;

              return (
                <div
                  key={title}
                  className="flex-1 relative flex flex-col items-center"
                >
                  <div
                    className={`w-12 h-12 rounded-full flex items-center justify-center font-semibold text-sm transition-all duration-300 ${
                      isCompleted
                        ? "bg-green-500 text-white shadow-sm"
                        : isCurrent
                        ? "bg-white border-2 border-purple-600 text-purple-600 shadow-sm"
                        : "bg-gray-100 text-gray-500"
                    }`}
                  >
                    {isCompleted ? <FaCheck /> : i}
                  </div>
                  <div
                    className={`mt-2 text-xs text-center font-medium ${
                      isCompleted
                        ? "text-green-600"
                        : isCurrent
                        ? "text-purple-600"
                        : "text-gray-400"
                    }`}
                  >
                    {title}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {/* Step components */}
        {step === 1 && <CaseDetails {...stepProps} />}
        {step === 2 && <VehicleDetails {...stepProps} />}
        {step === 3 && <PreviousPolicyDetails {...stepProps} />}
        {step === 4 && <InsuranceQuotes {...stepProps} />}
        {step === 5 && <NewPolicyDetails {...stepProps} acceptedQuote={acceptedQuote} />}
        {step === 6 && <Documents {...stepProps} />}
        {step === 7 && <Payment {...stepProps} totalPremium={totalPremium} />}
        {step === 8 && <PayoutDetails {...stepProps} />}

        {/* FIXED FOOTER - Always visible with proper styling */}
        <div className="fixed bottom-0 left-0 right-0 bg-gray-50/95 backdrop-blur-sm border-t border-gray-200 p-4 shadow-lg z-50">
          <div className="max-w-6xl mx-auto">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <button
                  onClick={prevStep}
                  disabled={step === 1 || isCompleted || isSaving}
                  className="flex items-center gap-2 px-5 py-2 rounded-md border border-gray-300 bg-white text-sm hover:bg-gray-50 disabled:opacity-50 transition-colors"
                >
                  <FaChevronLeft /> Previous
                </button>
                
                {/* NEW: Save and Exit Button */}
                <button
                  onClick={handleSaveAndExit}
                  disabled={isSaving}
                  className="flex items-center gap-2 px-5 py-2 rounded-md border border-gray-300 bg-white text-sm hover:bg-gray-50 disabled:opacity-50 transition-colors"
                >
                  <FaSave className="text-gray-600" />
                  {isSaving ? "Saving..." : "Save & Exit"}
                </button>
                
                <div className="text-sm text-gray-500 hidden md:block">
                  Step {step} of {steps.length}
                </div>
              </div>

              <div className="flex items-center gap-4">
                <div className="text-sm text-gray-500 hidden md:block">
                  Progress: {progressPercent}%
                </div>
                
                <button
                  onClick={nextStep}
                  disabled={isCompleted || isSaving}
                  className="inline-flex items-center gap-3 px-5 py-2 rounded-md bg-purple-600 text-white text-sm hover:opacity-95 disabled:opacity-50 transition-colors"
                >
                  {isSaving ? "Processing..." : nextLabel} 
                  {!isSaving && step < steps.length && <FaChevronRight />}
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Add padding to bottom to account for fixed footer */}
        <div className="h-20"></div>
      </div>
    </div>
  );
};

export default NewPolicyPage;
