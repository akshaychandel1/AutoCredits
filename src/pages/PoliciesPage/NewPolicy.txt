const Payment = ({ form, handleChange, handleSave, isSaving, errors }) => {
  const [paymentData, setPaymentData] = useState({
    paymentMadeBy: "Customer",
    paymentMode: "Online Transfer/UPI",
    paymentAmount: "",
    paymentDate: "",
    transactionId: "",
    receiptDate: "",
    bankName: "",
  });

  const handlePaymentChange = (e) => {
    const { name, value } = e.target;
    setPaymentData((prev) => ({ ...prev, [name]: value }));
    
    // Also update the main form for validation
    handleChange(e);
  };

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaCreditCard />
          </div>
          <h3 className="text-lg font-semibold text-gray-800">
            Step 6: Payment
          </h3>
        </div>
        <button
          type="button"
          onClick={handleSave}
          disabled={isSaving}
          className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
        >
          <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
        </button>
      </div>

      <div className="bg-blue-50 border rounded-xl p-5 mb-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <p className="text-sm text-gray-500">Total Premium:</p>
          <p className="font-semibold text-lg">₹{form.totalPremium || 0}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Insurance Company:</p>
          <p className="font-semibold">{form.insuranceCompany || "Not specified"}</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Policy Duration:</p>
          <p className="font-semibold">{form.insuranceDuration || "1YR"}</p>
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Payment Information
        </h4>
        <div className="flex gap-6 mb-6">
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="paymentMadeBy"
              value="Customer"
              checked={form.paymentMadeBy === "Customer"}
              onChange={handleChange}
            />
            Customer
            <span className="text-gray-500 text-sm">
              (Cash, Cheque, or Online payment)
            </span>
          </label>
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="paymentMadeBy"
              value="In House"
              checked={form.paymentMadeBy === "In House"}
              onChange={handleChange}
            />
            In House
            <span className="text-gray-500 text-sm">
              (Deal adjustments or outstanding)
            </span>
          </label>
        </div>
        {errors.paymentMadeBy && <p className="text-red-500 text-xs mt-1 mb-3">{errors.paymentMadeBy}</p>}

        <div className="mb-6">
          <label className="block text-sm font-medium mb-1">
            Payment Mode *
          </label>
          <select
            name="paymentMode"
            value={form.paymentMode || ""}
            onChange={handleChange}
            className={`w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
              errors.paymentMode ? "border-red-500" : "border-gray-300"
            }`}
          >
            <option value="">Select payment mode</option>
            <option value="Online Transfer/UPI">Online Transfer/UPI</option>
            <option value="Cash">Cash</option>
            <option value="Cheque">Cheque</option>
            <option value="Credit/Debit Card">Credit/Debit Card</option>
          </select>
          {errors.paymentMode && <p className="text-red-500 text-xs mt-1">{errors.paymentMode}</p>}
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Payment Amount (₹) *
            </label>
            <input
              type="number"
              name="paymentAmount"
              value={form.paymentAmount || ""}
              onChange={handleChange}
              className={`w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.paymentAmount ? "border-red-500" : "border-gray-300"
              }`}
              placeholder="0"
            />
            {errors.paymentAmount && <p className="text-red-500 text-xs mt-1">{errors.paymentAmount}</p>}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Payment Date *
            </label>
            <input
              type="date"
              name="paymentDate"
              value={form.paymentDate || ""}
              onChange={handleChange}
              className={`w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.paymentDate ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.paymentDate && <p className="text-red-500 text-xs mt-1">{errors.paymentDate}</p>}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Transaction ID *
            </label>
            <input
              type="text"
              name="transactionId"
              value={form.transactionId || ""}
              onChange={handleChange}
              className={`w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.transactionId ? "border-red-500" : "border-gray-300"
              }`}
              placeholder="Enter transaction ID"
            />
            {errors.transactionId && <p className="text-red-500 text-xs mt-1">{errors.transactionId}</p>}
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Receipt Date *
            </label>
            <input
              type="date"
              name="receiptDate"
              value={form.receiptDate || ""}
              onChange={handleChange}
              className={`w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                errors.receiptDate ? "border-red-500" : "border-gray-300"
              }`}
            />
            {errors.receiptDate && <p className="text-red-500 text-xs mt-1">{errors.receiptDate}</p>}
          </div>
        </div>

        <div className="mt-4">
          <label className="block text-sm font-medium mb-1">
            Bank Name *
          </label>
          <input
            type="text"
            name="bankName"
            value={form.bankName || ""}
            onChange={handleChange}
            className={`w-full border rounded-md p-2 focus:ring-2 focus:ring-blue-500 focus:outline-none ${
              errors.bankName ? "border-red-500" : "border-gray-300"
            }`}
            placeholder="Enter bank name"
          />
          {errors.bankName && <p className="text-red-500 text-xs mt-1">{errors.bankName}</p>}
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Payment Summary
        </h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <p>
            <span className="text-gray-500">Payment By:</span>{" "}
            {form.paymentMadeBy || "Not set"}
          </p>
          <p>
            <span className="text-gray-500">Payment Mode:</span>{" "}
            {form.paymentMode || "Not set"}
          </p>
          <p>
            <span className="text-gray-500">Amount:</span> ₹
            {form.paymentAmount || 0}
          </p>
          <p>
            <span className="text-gray-500">Payment Date:</span>{" "}
            {form.paymentDate || "Not set"}
          </p>
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Payment Guidelines
        </h4>
        <ul className="list-disc pl-6 space-y-1 text-sm text-gray-600">
          <li>
            <span className="text-blue-600">Customer Payments:</span> Ensure all
            payment details are accurately recorded for accounting purposes.
          </li>
          <li>
            <span className="text-blue-600">Cheque Payments:</span> Verify
            cheque details and ensure sufficient funds before processing.
          </li>
          <li>
            <span className="text-blue-600">Online Payments:</span> Keep
            transaction ID for reference and reconciliation.
          </li>
          <li>
            <span className="text-blue-600">In-House Payments:</span> Used for
            deal adjustments or when payment is handled through other
            transactions.
          </li>
        </ul>
      </div>
    </div>
  );
};































































return (
    <div className="flex-1 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen p-6">
      <div className="max-w-6xl mx-auto">
        {saveMessage && (
          <div className={`mb-4 p-3 rounded-md ${
            saveMessage.includes("Error") || saveMessage.includes("validation") 
              ? "bg-red-100 text-red-700 border border-red-300" 
              : saveMessage.includes("completed successfully")
              ? "bg-green-100 text-green-700 border border-green-300"
              : "bg-blue-100 text-blue-700 border border-blue-300"
          }`}>
            {saveMessage}
            {isCompleted && (
              <div className="text-sm mt-1">
                Redirecting to policies page...
              </div>
            )}
          </div>
        )}

        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-extrabold text-gray-800">
              New Insurance Case {policyId && `#${policyId}`}
            </h1>
            <p className="text-sm text-gray-500">Create a new insurance case</p>
          </div>
          <Link
            to="/policies"
            className="inline-flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-600 hover:shadow"
          >
            <FaChevronLeft /> Back to Cases
          </Link>
        </div>

        <div className="bg-white rounded-2xl border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="text-sm text-gray-600">
              Step {step} of {steps.length}
            </div>
            <div className="text-sm text-gray-500">
              {progressPercent}% Complete
            </div>
          </div>

          <div className="w-full bg-gray-200 h-2 rounded-full overflow-hidden mb-6">
            <div
              className="h-2 bg-black rounded-full transition-all duration-300"
              style={{ width: `${progressPercent}%` }}
            />
          </div>

          <div className="flex items-center justify-between gap-4">
            {steps.map((title, idx) => {
              const i = idx + 1;
              const isCompleted = i < step;
              const isCurrent = i === step;

              return (
                <div
                  key={title}
                  className="flex-1 relative flex flex-col items-center"
                >
                  <div
                    className={`w-12 h-12 rounded-full flex items-center justify-center font-semibold text-sm ${
                      isCompleted
                        ? "bg-green-500 text-white"
                        : isCurrent
                        ? "bg-white border-2 border-blue-600 text-blue-600 shadow-sm"
                        : "bg-gray-100 text-gray-500"
                    }`}
                  >
                    {isCompleted ? <FaCheck /> : i}
                  </div>
                  <div
                    className={`mt-2 text-xs text-center ${
                      isCompleted
                        ? "text-green-600"
                        : isCurrent
                        ? "text-blue-600 font-semibold"
                        : "text-gray-400"
                    }`}
                  >
                    {title}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {step === 1 && <CaseDetails {...stepProps} />}
        {step === 2 && <VehicleDetails {...stepProps} />}
        {step === 3 && <InsuranceQuotes {...stepProps} />}
        {step === 4 && <NewPolicyDetails {...stepProps} />}
        {step === 5 && <Documents {...stepProps} />}
        {step === 6 && <Payment {...stepProps} />}

        <div className="mt-8 bg-transparent p-4 rounded-md flex items-center justify-between border-t border-gray-100">
          <div className="flex items-center gap-4">
            <button
              onClick={prevStep}
              disabled={step === 1 || isCompleted}
              className="flex items-center gap-2 px-5 py-2 rounded-md border border-gray-300 bg-white text-sm hover:bg-gray-50 disabled:opacity-50"
            >
              <FaChevronLeft /> Previous
            </button>
            <div className="text-sm text-gray-500">
              Step {step} of {steps.length}
            </div>
          </div>

          <div className="flex items-center gap-4">
            <div className="text-sm text-gray-500 hidden md:block">
              Progress: {progressPercent}%
            </div>
            <button
              onClick={nextStep}
              disabled={isCompleted || isSaving}
              className="inline-flex items-center gap-3 px-5 py-2 rounded-md bg-black text-white text-sm hover:opacity-95 disabled:opacity-50"
            >
              {isSaving ? "Processing..." : nextLabel} 
              {!isSaving && step < steps.length && <FaChevronRight />}
            </button>
          </div>
        </div>
      </div>
    </div>
  );





































// NewPolicyPage.jsx
import { useState } from "react";
import { Link } from "react-router-dom";
import axios from "axios";
import {
  FaCar,
  FaMapMarkerAlt,
  FaUser,
  FaPhone,
  FaEnvelope,
  FaSave,
  FaChevronLeft,
  FaChevronRight,
  FaCheck,
  FaFileInvoiceDollar,
  FaFileAlt,
  FaIdCard,
  FaFileUpload,
  FaCreditCard,
  FaUpload,
  FaTrash,
} from "react-icons/fa";

const steps = [
  "Case Details",
  "Vehicle Details",
  "Insurance Quotes",
  "New Policy Details",
  "Documents",
  "Payment",
];

const API_BASE_URL = "https://asia-south1-sge-parashstone.cloudfunctions.net/app/v1";

// ================== STEP 1: Case Details ==================
const CaseDetails = ({ form, handleChange, handleSave, isSaving }) => (
  <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
    <div className="flex items-start justify-between">
      <div className="flex items-center gap-3">
        <div className="p-2 rounded-full bg-gray-100 text-gray-700">
          <FaUser />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-800">
            Customer Information
          </h3>
          <p className="text-xs text-gray-500">
            Fill personal, contact and nominee details
          </p>
        </div>
      </div>
      <button
        type="button"
        onClick={handleSave}
        disabled={isSaving}
        className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
      >
        <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
      </button>
    </div>

    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
      {/* Buyer Type */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Buyer Type *
        </label>
        <div className="flex items-center gap-4">
          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="radio"
              name="buyer_type"
              value="individual"
              checked={form.buyer_type === "individual"}
              onChange={handleChange}
              className="form-radio"
            />
            <span>Individual</span>
          </label>
          <label className="inline-flex items-center gap-2 text-sm">
            <input
              type="radio"
              name="buyer_type"
              value="corporate"
              checked={form.buyer_type === "corporate"}
              onChange={handleChange}
              className="form-radio"
            />
            <span>Company</span>
          </label>
        </div>
      </div>

      {/* Mobile */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Mobile Number *
        </label>
        <div className="flex items-center gap-2">
          <span className="text-gray-500 px-3 py-2 border border-gray-200 rounded-l-md bg-gray-50">
            +91
          </span>
          <input
            type="text"
            name="mobile"
            value={form.mobile || ""}
            onChange={handleChange}
            placeholder="Enter 10-digit mobile number"
            className="w-full border border-gray-300 rounded-r-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>
      </div>

      {/* Customer Name */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          {form.buyer_type === "corporate"
            ? "Company Name *"
            : "Customer Name *"}
        </label>
        <div className="flex items-center">
          <FaUser className="text-gray-400 mr-2" />
          <input
            type="text"
            name="customerName"
            value={form.customerName || ""}
            onChange={handleChange}
            placeholder={
              form.buyer_type === "corporate"
                ? "Enter company name"
                : "Enter customer name"
            }
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>
      </div>

      {/* Email */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Email Address *
        </label>
        <div className="flex items-center">
          <FaEnvelope className="text-gray-400 mr-2" />
          <input
            type="email"
            name="email"
            value={form.email || ""}
            onChange={handleChange}
            placeholder="Enter email address"
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>
      </div>

      {/* Gender */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Gender *
        </label>
        <select
          name="gender"
          value={form.gender || ""}
          onChange={handleChange}
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        >
          <option value="">Select gender</option>
          <option value="male">Male</option>
          <option value="female">Female</option>
          <option value="other">Other</option>
        </select>
      </div>

      {/* Marital Status */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Marital Status *
        </label>
        <select
          name="maritalStatus"
          value={form.maritalStatus || ""}
          onChange={handleChange}
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        >
          <option value="">Select status</option>
          <option value="single">Single</option>
          <option value="married">Married</option>
        </select>
      </div>

      {/* DOB */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Date of Birth *
        </label>
        <input
          type="date"
          name="dob"
          value={form.dob || ""}
          onChange={handleChange}
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      {/* Occupation */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Occupation
        </label>
        <input
          type="text"
          name="occupation"
          value={form.occupation || ""}
          onChange={handleChange}
          placeholder="Enter occupation"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      {/* PAN */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          PAN Number
        </label>
        <input
          type="text"
          name="panNumber"
          value={form.panNumber || ""}
          onChange={handleChange}
          placeholder="ABCDE1234F"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      {/* Aadhaar */}
      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Aadhaar Number
        </label>
        <input
          type="text"
          name="aadhaarNumber"
          value={form.aadhaarNumber || ""}
          onChange={handleChange}
          placeholder="1234 5678 9012"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      {/* Address */}
      <div className="md:col-span-2">
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Residence Address *
        </label>
        <input
          type="text"
          name="residenceAddress"
          value={form.residenceAddress || ""}
          onChange={handleChange}
          placeholder="Enter complete address"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Pincode *
        </label>
        <input
          type="text"
          name="pincode"
          value={form.pincode || ""}
          onChange={handleChange}
          placeholder="123456"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          City *
        </label>
        <input
          type="text"
          name="city"
          value={form.city || ""}
          onChange={handleChange}
          placeholder="Enter city"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
        />
      </div>

      {/* Nominee Info */}
      <div className="md:col-span-2">
        <h4 className="text-md font-semibold mt-6">Nominee Information</h4>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-3">
          <input
            type="text"
            name="nomineeName"
            value={form.nomineeName || ""}
            onChange={handleChange}
            placeholder="Nominee Name"
            className="border rounded-md px-3 py-2 text-sm"
          />
          <select
            name="relation"
            value={form.relation || ""}
            onChange={handleChange}
            className="border rounded-md px-3 py-2 text-sm"
          >
            <option value="">Select relation</option>
            <option value="spouse">Spouse</option>
            <option value="child">Child</option>
            <option value="parent">Parent</option>
          </select>
          <input
            type="number"
            name="nomineeAge"
            value={form.nomineeAge || ""}
            onChange={handleChange}
            placeholder="Nominee Age"
            className="border rounded-md px-3 py-2 text-sm"
          />
        </div>
      </div>

      {/* Reference Info */}
      <div className="md:col-span-2">
        <h4 className="text-md font-semibold mt-6">Reference Information</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-3">
          <input
            type="text"
            name="referenceName"
            value={form.referenceName || ""}
            onChange={handleChange}
            placeholder="Reference Name"
            className="border rounded-md px-3 py-2 text-sm"
          />
          <input
            type="text"
            name="referencePhone"
            value={form.referencePhone || ""}
            onChange={handleChange}
            placeholder="Reference Phone Number"
            className="border rounded-md px-3 py-2 text-sm"
          />
        </div>
      </div>
    </div>
  </div>
);

// ================== STEP 2: Vehicle Details ==================
const VehicleDetails = ({ form, handleChange, handleSave, isSaving }) => (
  <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
    <div className="flex items-start justify-between">
      <div className="flex items-center gap-3">
        <div className="p-2 rounded-full bg-gray-100 text-gray-700">
          <FaCar />
        </div>
        <div>
          <h3 className="text-lg font-semibold text-gray-800">
            Vehicle Details
          </h3>
          <p className="text-xs text-gray-500">
            Provide accurate vehicle information
          </p>
        </div>
      </div>
      <button
        type="button"
        onClick={handleSave}
        disabled={isSaving}
        className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
      >
        <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
      </button>
    </div>

    <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-6">
      <div className="md:col-span-2">
        <label className="block mb-1 text-sm font-medium text-gray-600">
          <FaMapMarkerAlt className="inline-block mr-2 text-gray-500" />
          City *
        </label>
        <input
          type="text"
          name="city"
          value={form.city || ""}
          onChange={handleChange}
          placeholder="Enter city"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Vehicle Make *
        </label>
        <select
          name="make"
          value={form.make || ""}
          onChange={handleChange}
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
        >
          <option value="">Select make</option>
          <option value="Maruti">Maruti</option>
          <option value="Hyundai">Hyundai</option>
          <option value="Honda">Honda</option>
        </select>
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Vehicle Model *
        </label>
        <input
          type="text"
          name="model"
          value={form.model || ""}
          onChange={handleChange}
          placeholder="Select model"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Vehicle Variant *
        </label>
        <input
          type="text"
          name="variant"
          value={form.variant || ""}
          onChange={handleChange}
          placeholder="Select variant"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Engine Number *
        </label>
        <input
          type="text"
          name="engineNo"
          value={form.engineNo || ""}
          onChange={handleChange}
          placeholder="Enter engine number"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
        />
      </div>

      <div>
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Chassis Number *
        </label>
        <input
          type="text"
          name="chassisNo"
          value={form.chassisNo || ""}
          onChange={handleChange}
          placeholder="Enter chassis number"
          className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
        />
      </div>

      <div className="md:col-span-2">
        <label className="block mb-1 text-sm font-medium text-gray-600">
          Manufacture Date *
        </label>
        <div className="flex gap-3">
          <select
            name="makeMonth"
            value={form.makeMonth || ""}
            onChange={handleChange}
            className="w-1/2 border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          >
            <option value="">Month</option>
            {[
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
            ].map((m) => (
              <option key={m} value={m}>
                {m}
              </option>
            ))}
          </select>
          <input
            type="number"
            name="makeYear"
            value={form.makeYear || ""}
            onChange={handleChange}
            placeholder="Year"
            className="w-1/2 border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>
      </div>

      <div className="md:col-span-3">
        <div className="mt-4 p-3 rounded-md bg-gray-50 border border-gray-100 text-sm text-gray-600">
          <strong>Note:</strong> All vehicle details must be accurate as they
          will be verified during policy issuance.
        </div>
      </div>
    </div>
  </div>
);

// ================== STEP 3: Insurance Quotes ==================
const InsuranceQuotes = ({ form, handleChange, handleSave, isSaving }) => {
  const [quotes, setQuotes] = useState([]);
  const [showAddQuote, setShowAddQuote] = useState(false);
  const [newQuote, setNewQuote] = useState({
    zone: "Zone B",
    quoteInsurer: "",
    odDiscount: "50",
    idv: "",
    electricalAccessories: "0",
  });
  const [quoteError, setQuoteError] = useState("");

  const handleNewQuoteChange = (e) => {
    const { name, value } = e.target;
    setNewQuote((q) => ({ ...q, [name]: value }));
    if (quoteError) setQuoteError("");
  };

  const addQuote = () => {
    if (!newQuote.quoteInsurer || !newQuote.idv) {
      setQuoteError("Please fill insurance company and IDV amount");
      return;
    }

    setQuotes((q) => [...q, { ...newQuote }]);
    setNewQuote({
      zone: "Zone B",
      quoteInsurer: "",
      odDiscount: "50",
      idv: "",
      electricalAccessories: "0",
    });
    setShowAddQuote(false);
    setQuoteError("");
  };

  const cancelAdd = () => {
    setShowAddQuote(false);
    setNewQuote({
      zone: "Zone B",
      quoteInsurer: "",
      odDiscount: "50",
      idv: "",
      electricalAccessories: "0",
    });
    setQuoteError("");
  };

  const removeQuote = (i) => {
    setQuotes((q) => q.filter((_, idx) => idx !== i));
  };

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaFileInvoiceDollar />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Insurance Quotes
            </h3>
            <p className="text-xs text-gray-500">
              Compare quotes and select the best option
            </p>
          </div>
        </div>
        <button
          type="button"
          onClick={handleSave}
          disabled={isSaving}
          className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
        >
          <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
        </button>
      </div>

      <div className="mt-6 border rounded-md">
        <div className="flex items-center justify-between px-4 py-3 bg-white">
          <div className="text-sm font-medium">
            Insurance Quotes ({quotes.length})
          </div>
          <button
            type="button"
            onClick={() => setShowAddQuote(true)}
            className="inline-flex items-center gap-2 border px-3 py-1 rounded-md text-sm bg-white hover:shadow"
          >
            + Add Quote
          </button>
        </div>

        <div className="p-4 bg-gray-50">
          {showAddQuote && (
            <div className="mb-4 border rounded-md bg-white p-4">
              <h4 className="font-semibold mb-3">Add New Quote</h4>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label className="block mb-1 text-sm font-medium text-gray-600">
                    Zone *
                  </label>
                  <select
                    name="zone"
                    value={newQuote.zone}
                    onChange={handleNewQuoteChange}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  >
                    <option value="Zone A">Zone A (8 prominent cities)</option>
                    <option value="Zone B">Zone B (Rest of cities)</option>
                  </select>
                </div>

                <div>
                  <label className="block mb-1 text-sm font-medium text-gray-600">
                    Insurance Company *
                  </label>
                  <select
                    name="quoteInsurer"
                    value={newQuote.quoteInsurer}
                    onChange={handleNewQuoteChange}
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  >
                    <option value="">Select company</option>
                    <option value="ICICI">ICICI Lombard</option>
                    <option value="HDFC">HDFC Ergo</option>
                    <option value="Bajaj">Bajaj Allianz</option>
                  </select>
                </div>

                <div>
                  <label className="block mb-1 text-sm font-medium text-gray-600">
                    OD Discount (%)
                  </label>
                  <input
                    type="number"
                    name="odDiscount"
                    value={newQuote.odDiscount}
                    onChange={handleNewQuoteChange}
                    placeholder="OD Discount (%)"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="block mb-1 text-sm font-medium text-gray-600">
                    IDV Amount (₹) *
                  </label>
                  <input
                    type="number"
                    name="idv"
                    value={newQuote.idv}
                    onChange={handleNewQuoteChange}
                    placeholder="500000"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  />
                </div>

                <div>
                  <label className="block mb-1 text-sm font-medium text-gray-600">
                    Electrical Accessories (₹)
                  </label>
                  <input
                    type="number"
                    name="electricalAccessories"
                    value={newQuote.electricalAccessories}
                    onChange={handleNewQuoteChange}
                    placeholder="0"
                    className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  />
                </div>
              </div>

              {quoteError && (
                <p className="text-sm text-red-600 mt-3">{quoteError}</p>
              )}

              <div className="mt-4 flex items-center gap-3">
                <button
                  type="button"
                  onClick={addQuote}
                  className="bg-black text-white px-4 py-2 rounded-md text-sm hover:opacity-95"
                >
                  Add Quote
                </button>
                <button
                  type="button"
                  onClick={cancelAdd}
                  className="border px-4 py-2 rounded-md text-sm hover:bg-gray-50"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}

          {quotes.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              No quotes added yet. Click "Add Quote" to get started.
            </div>
          ) : (
            <div className="space-y-3">
              {quotes.map((q, i) => (
                <div
                  key={i}
                  className="flex items-center justify-between bg-white border rounded-md p-3"
                >
                  <div>
                    <div className="font-medium">
                      {q.quoteInsurer || "—"} &middot; {q.zone}
                    </div>
                    <div className="text-xs text-gray-500">
                      IDV: ₹{q.idv} • OD Discount: {q.odDiscount}% • Electrical:
                      ₹{q.electricalAccessories}
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <button
                      type="button"
                      onClick={() => removeQuote(i)}
                      className="text-sm text-red-600 hover:underline"
                    >
                      Remove
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            Insurance Company *
          </label>
          <select
            name="insurer"
            value={form.insurer || ""}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          >
            <option value="">Select insurer</option>
            <option value="ICICI">ICICI Lombard</option>
            <option value="HDFC">HDFC Ergo</option>
            <option value="Bajaj">Bajaj Allianz</option>
          </select>
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            Coverage Type *
          </label>
          <select
            name="coverageType"
            value={form.coverageType || ""}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          >
            <option value="">Select coverage</option>
            <option value="comprehensive">Comprehensive</option>
            <option value="thirdparty">Third Party</option>
          </select>
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            Premium Amount *
          </label>
          <input
            type="number"
            name="premium"
            value={form.premium || ""}
            onChange={handleChange}
            placeholder="Enter premium amount"
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            IDV Amount *
          </label>
          <input
            type="number"
            name="idv"
            value={form.idv || ""}
            onChange={handleChange}
            placeholder="Enter IDV amount"
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            NCB Discount (%)
          </label>
          <input
            type="number"
            name="ncb"
            value={form.ncb || ""}
            onChange={handleChange}
            placeholder="Enter NCB %"
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          />
        </div>

        <div>
          <label className="block mb-1 text-sm font-medium text-gray-600">
            Policy Duration *
          </label>
          <select
            name="duration"
            value={form.duration || ""}
            onChange={handleChange}
            className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
          >
            <option value="">Select duration</option>
            <option value="1">1 Year</option>
            <option value="2">2 Years</option>
            <option value="3">3 Years</option>
          </select>
        </div>
      </div>
    </div>
  );
};

// ================== STEP 4: New Policy Details ==================
const NewPolicyDetails = ({ form, handleChange, handleSave, isSaving }) => {
  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaFileAlt />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Step 7: New Policy Details
            </h3>
          </div>
        </div>
        <button
          type="button"
          onClick={handleSave}
          disabled={isSaving}
          className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
        >
          <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
        </button>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Policy Status
        </h4>
        <label className="block text-sm font-medium text-gray-600 mb-2">
          Policy Issued Status *
        </label>
        <div className="flex gap-6 items-center mb-3">
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="policyIssued"
              value="yes"
              checked={form.policyIssued === "yes"}
              onChange={handleChange}
              className="h-4 w-4"
            />
            Yes - Policy Issued
          </label>
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="policyIssued"
              value="no"
              checked={form.policyIssued === "no"}
              onChange={handleChange}
              className="h-4 w-4"
            />
            No - Pending
          </label>
        </div>
        <div
          className={`text-sm px-4 py-3 rounded-md border 
    ${
      form.policyIssued === "yes"
        ? "bg-green-50 border-green-300 text-green-700"
        : form.policyIssued === "no"
        ? "bg-red-50 border-red-300 text-red-700"
        : "bg-yellow-50 border-yellow-300 text-yellow-700"
    }`}
        >
          {form.policyIssued === "yes" ? (
            <strong>Policy Issued:</strong>
          ) : form.policyIssued === "no" ? (
            <strong>Policy Pending:</strong>
          ) : (
            <strong>Status Unknown:</strong>
          )}{" "}
          {form.policyIssued === "yes"
            ? "Policy is successfully issued by the insurance company."
            : form.policyIssued === "no"
            ? "Policy details can be updated once the policy is issued by the insurance company."
            : "Please select policy status."}
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Policy Information
        </h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Insurance Company *
            </label>
            <input
              type="text"
              name="insuranceCompany"
              value={form.insuranceCompany || ""}
              onChange={handleChange}
              placeholder="Enter insurance company name"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Policy Number / Covernote Number
            </label>
            <input
              type="text"
              name="policyNumber"
              value={form.policyNumber || ""}
              onChange={handleChange}
              placeholder="Policy Number"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
            <input
              type="text"
              name="covernoteNumber"
              value={form.covernoteNumber || ""}
              onChange={handleChange}
              placeholder="Covernote Number (Alternative)"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm mt-2"
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Issue Date
            </label>
            <input
              type="date"
              name="issueDate"
              value={form.issueDate || ""}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Due Date
            </label>
            <input
              type="date"
              name="dueDate"
              value={form.dueDate || ""}
              onChange={handleChange}
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
            <p className="text-xs text-gray-500 mt-1">
              Auto-calculated based on issue date and duration
            </p>
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              NCB Discount (%)
            </label>
            <input
              type="number"
              name="ncbDiscount"
              value={form.ncbDiscount || ""}
              onChange={handleChange}
              placeholder="0"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
            <p className="text-xs text-gray-500 mt-1">
              From customer requirements
            </p>
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Insurance Duration
            </label>
            <input
              type="text"
              name="insuranceDuration"
              value={form.insuranceDuration || ""}
              onChange={handleChange}
              placeholder="From customer requirements"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              IDV Amount (₹) *
            </label>
            <input
              type="number"
              name="idvAmount"
              value={form.idvAmount || ""}
              onChange={handleChange}
              placeholder="From accepted quote"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
          </div>
          <div>
            <label className="block mb-1 text-sm font-medium text-gray-600">
              Total Premium (₹) *
            </label>
            <input
              type="number"
              name="totalPremium"
              value={form.totalPremium || ""}
              onChange={handleChange}
              placeholder="From accepted quote"
              className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
            />
          </div>
        </div>
      </div>

      <div className="border rounded-xl p-5">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Policy Guidelines
        </h4>
        <ul className="list-disc pl-5 text-sm text-gray-600 space-y-2">
          <li>
            Policy details can be updated even after saving – they're not final
            until policy is issued.
          </li>
          <li>
            Due date is automatically calculated based on issue date and policy
            duration.
          </li>
          <li>
            IDV and premium amounts are pre-filled from the accepted quote but
            can be adjusted if needed.
          </li>
          <li>
            Policy or covernote number is required only when the policy is
            actually issued.
          </li>
        </ul>
      </div>
    </div>
  );
};

// ================== STEP 5: Documents ==================
// ================== STEP 5: Documents ==================
const Documents = ({ form, handleChange, handleSave, isSaving }) => {
  const [uploadedFiles, setUploadedFiles] = useState([]);
  const [uploading, setUploading] = useState(false);
  const [uploadProgress, setUploadProgress] = useState({});

  // Handle file selection
  const handleFiles = async (e) => {
    const files = Array.from(e.target.files);
    
    // Create file objects with metadata
    const newFiles = files.map(file => ({
      file,
      id: Date.now() + Math.random(),
      name: file.name,
      size: file.size,
      type: file.type,
      status: 'pending', // pending, uploading, uploaded, error
      url: null,
      uploadProgress: 0
    }));

    setUploadedFiles(prev => [...prev, ...newFiles]);
    
    // Auto-upload new files
    await uploadFiles(newFiles);
  };

  // Upload single file
  const uploadFile = async (fileObj) => {
    try {
      // Update status to uploading
      setUploadedFiles(prev => 
        prev.map(f => 
          f.id === fileObj.id 
            ? { ...f, status: 'uploading', uploadProgress: 0 }
            : f
        )
      );

      const formData = new FormData();
      formData.append('file', fileObj.file);

      // const response = await axios.post(
      //   'https://files-znpbsleyva-el.a.run.app',
      //   formData,
      //   {
      //     headers: {
      //       'Content-Type': 'multipart/form-data',
      //     },
      //     onUploadProgress: (progressEvent) => {
      //       const progress = Math.round(
      //         (progressEvent.loaded * 100) / progressEvent.total
      //       );
            
      //       setUploadedFiles(prev => 
      //         prev.map(f => 
      //           f.id === fileObj.id 
      //             ? { ...f, uploadProgress: progress }
      //             : f
      //         )
      //       );
      //     },
      //     timeout: 30000 // 30 seconds timeout
      //   }
      // );
      let config = {
  method: 'post',
  maxBodyLength: Infinity,
  url: 'https://asia-south1-acillp-8c3f8.cloudfunctions.net/files',
  headers: { 
    'Content-Type': 'multipart/form-data',
  },
  data : formData
};

const response = await axios.request(config);

      // Update with successful response
      setUploadedFiles(prev => 
        prev.map(f => 
          f.id === fileObj.id 
            ? { 
                ...f, 
                status: 'uploaded', 
                uploadProgress: 100,
                url: response.data.path || response.data.path, // Adjust based on your API response
                response: response.data
              }
            : f
        )
      );
      // const [form,setForm] = useState([]);
      // form.documents=uploadedFiles.map((e)=>e.url);
      // handleChange(form);
      handleChange({
  target: {
    name: 'documents',
    value: uploadedFiles.map((e)=>e.url)
  }
});
      return response.data;
    } catch (error) {
      console.error(`Error uploading file ${fileObj.name}:`, error);
      
      setUploadedFiles(prev => 
        prev.map(f => 
          f.id === fileObj.id 
            ? { 
                ...f, 
                status: 'error', 
                error: error.message || 'Upload failed'
              }
            : f
        )
      );
      
      throw error;
    }
  };

  // Upload multiple files in sequence (to avoid overwhelming the server)
  const uploadFiles = async (files) => {
    setUploading(true);
    
    try {
      // Upload files sequentially to avoid rate limiting
      for (const fileObj of files) {
        if (fileObj.status === 'pending') {
          await uploadFile(fileObj);
        }
      }
    } catch (error) {
      console.error('Error in batch upload:', error);
    } finally {
      setUploading(false);
    }
  };

  // Retry failed uploads
  const retryUpload = async (fileId) => {
    const fileObj = uploadedFiles.find(f => f.id === fileId);
    if (fileObj) {
      await uploadFile(fileObj);
    }
  };

  // Retry all failed uploads
  const retryAllFailed = async () => {
    const failedFiles = uploadedFiles.filter(f => f.status === 'error');
    await uploadFiles(failedFiles);
  };

  // Remove file from list
  const removeFile = (fileId) => {
    setUploadedFiles(prev => prev.filter(f => f.id !== fileId));
  };

  // Format file size
  const formatFileSize = (bytes) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  // Get file icon based on type
  const getFileIcon = (fileType) => {
    if (fileType.includes('image')) return '🖼️';
    if (fileType.includes('pdf')) return '📄';
    if (fileType.includes('word') || fileType.includes('document')) return '📝';
    if (fileType.includes('excel') || fileType.includes('spreadsheet')) return '📊';
    return '📎';
  };

  // Get status color
  const getStatusColor = (status) => {
    switch (status) {
      case 'uploaded': return 'text-green-600';
      case 'uploading': return 'text-blue-600';
      case 'error': return 'text-red-600';
      default: return 'text-gray-600';
    }
  };

  // Get status text
  const getStatusText = (file) => {
    switch (file.status) {
      case 'uploaded': return 'Uploaded';
      case 'uploading': return `Uploading... ${file.uploadProgress}%`;
      case 'error': return `Failed: ${file.error}`;
      default: return 'Pending';
    }
  };

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaFileAlt />
          </div>
          <div>
            <h3 className="text-lg font-semibold text-gray-800">
              Step 5: Documents
            </h3>
            <p className="text-xs text-gray-500">
              Upload and manage policy documents
            </p>
          </div>
        </div>
        <button
          type="button"
          onClick={handleSave}
          disabled={isSaving}
          className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
        >
          <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
        </button>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Document Requirements
        </h4>
        <div className="flex flex-wrap gap-4">
          <span className="inline-flex items-center gap-2 px-3 py-1 bg-red-50 text-red-700 rounded-full text-sm">
            <FaCheck /> Mandatory Documents
          </span>
          <span className="inline-flex items-center gap-2 px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm">
            <FaCheck /> Optional Documents
          </span>
        </div>
      </div>

      <div className="border rounded-xl p-5">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h4 className="text-md font-semibold text-gray-700">
              Upload Documents
            </h4>
            <p className="text-sm text-gray-500 mt-1">
              {uploadedFiles.length} files • {
                uploadedFiles.filter(f => f.status === 'uploaded').length
              } uploaded
            </p>
          </div>
          
          {uploadedFiles.some(f => f.status === 'error') && (
            <button
              type="button"
              onClick={retryAllFailed}
              disabled={uploading}
              className="flex items-center gap-2 px-4 py-2 bg-red-100 text-red-700 rounded-md text-sm hover:bg-red-200 disabled:opacity-50"
            >
              <FaUpload /> Retry Failed Uploads
            </button>
          )}
        </div>

        {/* Upload Area */}
        <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center mb-6 hover:border-gray-400 transition-colors">
          <div className="flex justify-center mb-4 text-gray-500">
            <FaUpload size={40} />
          </div>
          <p className="text-gray-600 font-medium mb-2">
            Drag and drop files here
          </p>
          <p className="text-gray-400 text-sm mb-4">
            or click to browse your files
          </p>
          
          <input
            type="file"
            multiple
            onChange={handleFiles}
            className="hidden"
            id="file-upload"
            accept=".pdf,.jpg,.jpeg,.png,.doc,.docx,.xls,.xlsx"
          />
          <label
            htmlFor="file-upload"
            className="inline-flex items-center gap-2 px-6 py-3 bg-black text-white rounded-md text-sm font-medium hover:bg-gray-800 cursor-pointer transition-colors"
          >
            <FaFileUpload /> Choose Files
          </label>
          
          <p className="text-gray-400 text-xs mt-4">
            Supported: PDF, JPG, PNG, DOC, DOCX, XLS, XLSX (Max 10MB each)
          </p>
        </div>

        {/* Uploaded Files List */}
        {uploadedFiles.length > 0 && (
          <div className="mt-6">
            <h5 className="text-md font-semibold text-gray-700 mb-4">
              Uploaded Files
            </h5>
            
            <div className="space-y-3">
              {uploadedFiles.map((file) => (
                <div
                  key={file.id}
                  className="flex items-center justify-between p-4 border rounded-lg bg-gray-50 hover:bg-white transition-colors"
                >
                  <div className="flex items-center gap-3 flex-1 min-w-0">
                    <span className="text-xl">
                      {getFileIcon(file.type)}
                    </span>
                    
                    <div className="flex-1 min-w-0">
                      <div className="flex items-center gap-2">
                        <p className="font-medium text-sm truncate">
                          {file.name}
                        </p>
                        <span className="text-xs text-gray-500">
                          ({formatFileSize(file.size)})
                        </span>
                      </div>
                      
                      <div className="flex items-center gap-2 mt-1">
                        <span className={`text-xs font-medium ${getStatusColor(file.status)}`}>
                          {getStatusText(file)}
                        </span>
                        
                        {file.status === 'uploading' && (
                          <div className="flex-1 max-w-xs bg-gray-200 rounded-full h-1.5">
                            <div 
                              className="bg-blue-600 h-1.5 rounded-full transition-all duration-300"
                              style={{ width: `${file.uploadProgress}%` }}
                            />
                          </div>
                        )}
                      </div>
                    </div>
                  </div>

                  <div className="flex items-center gap-2">
                    {file.status === 'error' && (
                      <button
                        type="button"
                        onClick={() => retryUpload(file.id)}
                        disabled={uploading}
                        className="p-1 text-blue-600 hover:text-blue-800 disabled:opacity-50"
                        title="Retry upload"
                      >
                        <FaUpload />
                      </button>
                    )}
                    
                    {file.status === 'uploaded' && file.url && (
                      <a
                        href={file.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="p-1 text-green-600 hover:text-green-800"
                        title="View file"
                      >
                        <FaFileAlt />
                      </a>
                    )}
                    
                    <button
                      onClick={() => removeFile(file.id)}
                      disabled={file.status === 'uploading'}
                      className="p-1 text-red-600 hover:text-red-800 disabled:opacity-50"
                      title="Remove file"
                    >
                      <FaTrash />
                    </button>
                  </div>
                </div>
              ))}
            </div>

            {/* Upload Summary */}
            <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                <div>
                  <span className="text-gray-600">Total:</span>
                  <span className="font-medium ml-2">{uploadedFiles.length}</span>
                </div>
                <div>
                  <span className="text-gray-600">Uploaded:</span>
                  <span className="font-medium text-green-600 ml-2">
                    {uploadedFiles.filter(f => f.status === 'uploaded').length}
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">Uploading:</span>
                  <span className="font-medium text-blue-600 ml-2">
                    {uploadedFiles.filter(f => f.status === 'uploading').length}
                  </span>
                </div>
                <div>
                  <span className="text-gray-600">Failed:</span>
                  <span className="font-medium text-red-600 ml-2">
                    {uploadedFiles.filter(f => f.status === 'error').length}
                  </span>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
// ================== STEP 6: Payment ==================
const Payment = ({ form, handleChange, handleSave, isSaving }) => {
  const [paymentData, setPaymentData] = useState({
    paymentMadeBy: "Customer",
    paymentMode: "Online Transfer/UPI",
    paymentAmount: "",
    paymentDate: "",
    transactionId: "",
    receiptDate: "",
    bankName: "",
  });

  const handlePaymentChange = (e) => {
    const { name, value } = e.target;
    setPaymentData((prev) => ({ ...prev, [name]: value }));
  };

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaCreditCard />
          </div>
          <h3 className="text-lg font-semibold text-gray-800">
            Step 6: Payment
          </h3>
        </div>
        <button
          type="button"
          onClick={handleSave}
          disabled={isSaving}
          className="flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-700 hover:shadow transition disabled:opacity-50"
        >
          <FaSave /> {isSaving ? "Saving..." : "Save Progress"}
        </button>
      </div>

      <div className="bg-blue-50 border rounded-xl p-5 mb-6 flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div>
          <p className="text-sm text-gray-500">Total Premium:</p>
          <p className="font-semibold text-lg">₹0</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Insurance Company:</p>
          <p className="font-semibold">Not specified</p>
        </div>
        <div>
          <p className="text-sm text-gray-500">Policy Duration:</p>
          <p className="font-semibold">1YR</p>
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Payment Information
        </h4>
        <div className="flex gap-6 mb-6">
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="paymentMadeBy"
              value="Customer"
              checked={paymentData.paymentMadeBy === "Customer"}
              onChange={handlePaymentChange}
            />
            Customer
            <span className="text-gray-500 text-sm">
              (Cash, Cheque, or Online payment)
            </span>
          </label>
          <label className="flex items-center gap-2">
            <input
              type="radio"
              name="paymentMadeBy"
              value="In House"
              checked={paymentData.paymentMadeBy === "In House"}
              onChange={handlePaymentChange}
            />
            In House
            <span className="text-gray-500 text-sm">
              (Deal adjustments or outstanding)
            </span>
          </label>
        </div>

        <div className="mb-6">
          <label className="block text-sm font-medium mb-1">
            Payment Mode *
          </label>
          <select
            name="paymentMode"
            value={paymentData.paymentMode}
            onChange={handlePaymentChange}
            className="w-full border rounded-md p-2"
          >
            <option>Online Transfer/UPI</option>
            <option>Cash</option>
            <option>Cheque</option>
            <option>Credit/Debit Card</option>
          </select>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium mb-1">
              Payment Amount (₹) *
            </label>
            <input
              type="number"
              name="paymentAmount"
              value={paymentData.paymentAmount}
              onChange={handlePaymentChange}
              className="w-full border rounded-md p-2"
              placeholder="0"
            />
            <p className="text-red-500 text-xs mt-1">
              {paymentData.paymentAmount
                ? ""
                : "Valid payment amount is required"}
            </p>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Payment Date *
            </label>
            <input
              type="date"
              name="paymentDate"
              value={paymentData.paymentDate}
              onChange={handlePaymentChange}
              className="w-full border rounded-md p-2"
            />
            <p className="text-red-500 text-xs mt-1">
              {paymentData.paymentDate ? "" : "Payment date is required"}
            </p>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Transaction ID *
            </label>
            <input
              type="text"
              name="transactionId"
              value={paymentData.transactionId}
              onChange={handlePaymentChange}
              className="w-full border rounded-md p-2"
              placeholder="Enter transaction ID"
            />
            <p className="text-red-500 text-xs mt-1">
              {paymentData.transactionId ? "" : "Transaction ID is required"}
            </p>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">
              Receipt Date *
            </label>
            <input
              type="date"
              name="receiptDate"
              value={paymentData.receiptDate}
              onChange={handlePaymentChange}
              className="w-full border rounded-md p-2"
            />
            <p className="text-red-500 text-xs mt-1">
              {paymentData.receiptDate ? "" : "Receipt date is required"}
            </p>
          </div>
        </div>

        <div className="mt-4">
          <label className="block text-sm font-medium mb-1">
            Bank Name *
          </label>
          <input
            type="text"
            name="bankName"
            value={paymentData.bankName}
            onChange={handlePaymentChange}
            className="w-full border rounded-md p-2"
            placeholder="Enter bank name"
          />
          <p className="text-red-500 text-xs mt-1">
            {paymentData.bankName ? "" : "Bank name is required"}
          </p>
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Payment Summary
        </h4>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <p>
            <span className="text-gray-500">Payment By:</span>
            {paymentData.paymentMadeBy}
          </p>
          <p>
            <span className="text-gray-500">Payment Mode:</span>
            {paymentData.paymentMode}
          </p>
          <p>
            <span className="text-gray-500">Amount:</span> ₹
            {paymentData.paymentAmount || 0}
          </p>
          <p>
            <span className="text-gray-500">Payment Date:</span>
            {paymentData.paymentDate || "Not set"}
          </p>
        </div>
      </div>

      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-3">
          Payment Guidelines
        </h4>
        <ul className="list-disc pl-6 space-y-1 text-sm text-gray-600">
          <li>
            <span className="text-blue-600">Customer Payments:</span> Ensure all
            payment details are accurately recorded for accounting purposes.
          </li>
          <li>
            <span className="text-blue-600">Cheque Payments:</span> Verify
            cheque details and ensure sufficient funds before processing.
          </li>
          <li>
            <span className="text-blue-600">Online Payments:</span> Keep
            transaction ID for reference and reconciliation.
          </li>
          <li>
            <span className="text-blue-600">In-House Payments:</span> Used for
            deal adjustments or when payment is handled through other
            transactions.
          </li>
        </ul>
      </div>
    </div>
  );
};

// ================== MAIN COMPONENT ==================
const NewPolicyPage = () => {
  const [step, setStep] = useState(1);
  const [form, setForm] = useState({
    buyer_type: "individual",
    insurance_category: "motor",
    status: "draft",
    ts: Date.now(),
    created_by: "ADMIN123" // Replace with actual user ID
  });
  const [policyId, setPolicyId] = useState(null);
  const [isSaving, setIsSaving] = useState(false);
  const [saveMessage, setSaveMessage] = useState("");

  const handleChange = (e) => {
    const { name, value, type } = e.target;
    if (type === "radio") {
      setForm((f) => ({ ...f, [name]: value }));
      return;
    }
    setForm((f) => ({ ...f, [name]: value }));
  };

  // Create initial policy (POST request)
  const createPolicy = async () => {
    try {
      setIsSaving(true);
      // if(!policyId){
      //  setPolicyId(Date.now().toString());
      // }
      
      // Prepare data according to your exact API schema
      const policyData = {
        // _id: policyId,
        buyer_type: form.buyer_type || "individual",
        customer_details: {
          name: form.customerName || "",
          mobile: form.mobile || "",
          email: form.email || "",
          gender: form.gender || "",
          maritalStatus: form.maritalStatus || "",
          dob: form.dob || "",
          occupation: form.occupation || "",
          panNumber: form.panNumber || "",
          aadhaarNumber: form.aadhaarNumber || "",
          residenceAddress: form.residenceAddress || "",
          pincode: form.pincode || "",
          city: form.city || ""
        },
        nominee: {
          name: form.nomineeName || "",
          relation: form.relation || "",
          age: form.nomineeAge || ""
        },
        refrence: { // Note: Using the exact spelling from your API schema
          name: form.referenceName || "",
          phone: form.referencePhone || ""
        },
        insurance_category: form.insurance_category || "motor",
        assigned_to: "",
        vehicle_details: {},
        insurance_quote: {},
        previous_policy: "",
        status: form.status || "draft",
        policy_info: {},
        payment_info: {},
        ts: Date.now(),
        created_by: form.created_by || "user123"
      };

      console.log("Creating policy with data:", policyData);

      const response = await axios.post(`${API_BASE_URL}/policies`, JSON.stringify(policyData),{
        headers:{
          "Content-Type": "application/json"
        }

      });
      
      if (response.data && response.data.id) {
        setPolicyId(response.data.id);
        setSaveMessage("Policy created successfully!");
        return response.data.id;
      } else {
        throw new Error("No policy ID in response");
      }
    } catch (error) {
      console.error("Error creating policy:", error);
      let errorMessage = "Error creating policy";
      
      if (error.response) {
        console.error("Server response:", error.response.data);
        errorMessage = `Server error: ${error.response.status}`;
      } else if (error.request) {
        errorMessage = "Network error: No response from server";
      } else {
        errorMessage = `Error: ${error.message}`;
      }
      
      setSaveMessage(errorMessage);
      throw error;
    } finally {
      setIsSaving(false);
    }
  };

  // Update policy (PUT request)
  const updatePolicy = async () => {
    try {
      setIsSaving(true);
      
      // If no policy ID exists, create one first
      if (!policyId) {
        const newPolicyId = await createPolicy();
        if (!newPolicyId) return;
        return; // Return after creation
      }

      let updateData = {};
      
      // Map step data according to your API schema
      switch (step) {
        case 1: // Case Details
          updateData = {
            buyer_type: form.buyer_type,
            customer_details: {
              name: form.customerName,
              mobile: form.mobile,
              email: form.email,
              gender: form.gender,
              maritalStatus: form.maritalStatus,
              dob: form.dob,
              occupation: form.occupation,
              panNumber: form.panNumber,
              aadhaarNumber: form.aadhaarNumber,
              residenceAddress: form.residenceAddress,
              pincode: form.pincode,
              city: form.city
            },
            nominee: {
              name: form.nomineeName,
              relation: form.relation,
              age: form.nomineeAge
            },
            refrence: {
              name: form.referenceName,
              phone: form.referencePhone
            }
          };
          break;
        case 2: // Vehicle Details
          updateData = {
            vehicle_details: {
              city: form.city,
              make: form.make,
              model: form.model,
              variant: form.variant,
              engineNo: form.engineNo,
              chassisNo: form.chassisNo,
              makeMonth: form.makeMonth,
              makeYear: form.makeYear
            }
          };
          break;
        case 3: // Insurance Quotes
          updateData = {
            insurance_quote: {
              insurer: form.insurer,
              coverageType: form.coverageType,
              premium: form.premium,
              idv: form.idv,
              ncb: form.ncb,
              duration: form.duration
            }
          };
          break;
        case 4: // New Policy Details
          updateData = {
            policy_info: {
              policyIssued: form.policyIssued,
              insuranceCompany: form.insuranceCompany,
              policyNumber: form.policyNumber,
              covernoteNumber: form.covernoteNumber,
              issueDate: form.issueDate,
              dueDate: form.dueDate,
              ncbDiscount: form.ncbDiscount,
              insuranceDuration: form.insuranceDuration,
              idvAmount: form.idvAmount,
              totalPremium: form.totalPremium
            }
          };
          break;
        case 5: // Documents
        // console.log(form.documents);
        console.log(form.documents);
        // console.log(uploadedFiles); 
        // return;
        // if(form.documents.length==0){
        //   // console.log(error.message);
        //   setSaveMessage(`$[LENGTH]; ${form.documents}`);
        //   return;
        // }
          updateData = {
            documents: form.documents || {}
          };
          break;
        case 6: // Payment
          updateData = {
            payment_info: {
              paymentMadeBy: form.paymentMadeBy,
              paymentMode: form.paymentMode,
              paymentAmount: form.paymentAmount,
              paymentDate: form.paymentDate,
              transactionId: form.transactionId,
              receiptDate: form.receiptDate,
              bankName: form.bankName
            },
            status: "completed"
          };
          break;
        default:
          updateData = form;
      }

      console.log(`Updating policy ${policyId} with:`, updateData);

      const response = await axios.put(`${API_BASE_URL}/policies/${policyId}`, JSON.stringify(updateData),{
        headers:{
          "Content-Type":"application/json"
        }
      });
      setSaveMessage("Progress saved successfully!");
      
    } catch (error) {
      console.error("Error updating policy:", error);
      let errorMessage = "Error saving progress";
      
      if (error.response) {
        errorMessage = `Save error: ${error.response.status}`;
      } else if (error.request) {
        errorMessage = "Network error";
      } else {
        errorMessage = `Error: ${error.message}`;
      }
      
      setSaveMessage(errorMessage);
      throw error;
    } finally {
      setIsSaving(false);
    }
  };

  const handleSave = () => {
    updatePolicy();
  };

  const nextStep = async () => {
    try {
      await updatePolicy();
      setStep((s) => Math.min(s + 1, steps.length));
    } catch (error) {
      console.log("Save failed, staying on current step");
    }
  };

  const prevStep = () => setStep((s) => Math.max(s - 1, 1));

  const progressPercent = Math.round(((step - 1) / (steps.length - 1)) * 100);
  const nextLabel = step < steps.length ? `Next: ${steps[step]}` : "Finish";

  const stepProps = {
    form,
    handleChange,
    handleSave,
    isSaving
  };

  return (
    <div className="flex-1 bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen p-6">
      <div className="max-w-6xl mx-auto">
        {saveMessage && (
          <div className={`mb-4 p-3 rounded-md ${
            saveMessage.includes("Error") 
              ? "bg-red-100 text-red-700 border border-red-300" 
              : "bg-green-100 text-green-700 border border-green-300"
          }`}>
            {saveMessage}
          </div>
        )}

        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-extrabold text-gray-800">
              New Insurance Case {policyId && `#${policyId}`}
            </h1>
            <p className="text-sm text-gray-500">Create a new insurance case</p>
          </div>
          <Link
            to="/policies"
            className="inline-flex items-center gap-2 bg-white border px-3 py-2 rounded-md text-sm text-gray-600 hover:shadow"
          >
            <FaChevronLeft /> Back to Cases
          </Link>
        </div>

        <div className="bg-white rounded-2xl border border-gray-200 shadow-sm p-6 mb-8">
          <div className="flex items-center justify-between mb-4">
            <div className="text-sm text-gray-600">
              Step {step} of {steps.length}
            </div>
            <div className="text-sm text-gray-500">
              {progressPercent}% Complete
            </div>
          </div>

          <div className="w-full bg-gray-200 h-2 rounded-full overflow-hidden mb-6">
            <div
              className="h-2 bg-black rounded-full transition-all duration-300"
              style={{ width: `${progressPercent}%` }}
            />
          </div>

          <div className="flex items-center justify-between gap-4">
            {steps.map((title, idx) => {
              const i = idx + 1;
              const isCompleted = i < step;
              const isCurrent = i === step;

              return (
                <div
                  key={title}
                  className="flex-1 relative flex flex-col items-center"
                >
                  <div
                    className={`w-12 h-12 rounded-full flex items-center justify-center font-semibold text-sm ${
                      isCompleted
                        ? "bg-green-500 text-white"
                        : isCurrent
                        ? "bg-white border-2 border-blue-600 text-blue-600 shadow-sm"
                        : "bg-gray-100 text-gray-500"
                    }`}
                  >
                    {isCompleted ? <FaCheck /> : i}
                  </div>
                  <div
                    className={`mt-2 text-xs text-center ${
                      isCompleted
                        ? "text-green-600"
                        : isCurrent
                        ? "text-blue-600 font-semibold"
                        : "text-gray-400"
                    }`}
                  >
                    {title}
                  </div>
                </div>
              );
            })}
          </div>
        </div>

        {step === 1 && <CaseDetails {...stepProps} />}
        {step === 2 && <VehicleDetails {...stepProps} />}
        {step === 3 && <InsuranceQuotes {...stepProps} />}
        {step === 4 && <NewPolicyDetails {...stepProps} />}
        {step === 5 && <Documents {...stepProps} />}
        {step === 6 && <Payment {...stepProps} />}

        <div className="mt-8 bg-transparent p-4 rounded-md flex items-center justify-between border-t border-gray-100">
          <div className="flex items-center gap-4">
            <button
              onClick={prevStep}
              disabled={step === 1}
              className="flex items-center gap-2 px-5 py-2 rounded-md border border-gray-300 bg-white text-sm hover:bg-gray-50 disabled:opacity-50"
            >
              <FaChevronLeft /> Previous
            </button>
            <div className="text-sm text-gray-500">
              Step {step} of {steps.length}
            </div>
          </div>

          <div className="flex items-center gap-4">
            <div className="text-sm text-gray-500 hidden md:block">
              Progress: {progressPercent}%
            </div>
            <button
              onClick={nextStep}
              // disabled={step === steps.length}
              className="inline-flex items-center gap-3 px-5 py-2 rounded-md bg-black text-white text-sm hover:opacity-95 disabled:opacity-50"
            >
              {nextLabel} <FaChevronRight />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NewPolicyPage;