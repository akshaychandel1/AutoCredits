import { useEffect, useState } from "react";
import { FiSearch, FiPlus } from "react-icons/fi";

const PoliciesPage = () => {
  const [policies, setPolicies] = useState([]);
  const [search, setSearch] = useState("");
  const [filter, setFilter] = useState("");
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Fetch policies from API
  useEffect(() => {
    const fetchPolicies = async () => {
      try {
        setLoading(true);
        setError(null);

        // ðŸ‘‡ Replace with your real API endpoint
        const response = await fetch("/api/policies");
        if (!response.ok) {
          throw new Error("Failed to fetch policies");
        }

        const data = await response.json();
        setPolicies(data); // expecting array of {id, customer, type, premium, status}
      } catch (err) {
        setError(err.message || "Something went wrong");
      } finally {
        setLoading(false);
      }
    };

    fetchPolicies();
  }, []);

  // Filter + Search
  const filteredPolicies = policies.filter(
    (p) =>
      (filter ? p.status === filter : true) &&
      (search
        ? p.customer?.toLowerCase().includes(search.toLowerCase()) ||
          p.id?.toLowerCase().includes(search.toLowerCase())
        : true)
  );

  return (
    <div className="flex-1 p-6 bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6 gap-4">
        <h1 className="text-2xl font-bold text-gray-800">Insurance Policies</h1>
        <button className="flex items-center gap-2 bg-red-600 text-white px-4 py-2 rounded-lg shadow hover:bg-red-700 transition">
          <FiPlus className="text-lg" /> New Policy
        </button>
      </div>

      {/* Search + Filter */}
      <div className="flex flex-col md:flex-row items-stretch md:items-center justify-between mb-6 gap-4">
        {/* Search */}
        <div className="relative w-full md:w-1/3">
          <FiSearch className="absolute top-3 left-3 text-gray-400" />
          <input
            type="text"
            placeholder="Search by Policy ID or Customer..."
            value={search}
            onChange={(e) => setSearch(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-red-500 focus:outline-none"
          />
        </div>

        {/* Filter */}
        <select
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="w-full md:w-40 border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-red-500 focus:outline-none"
        >
          <option value="">All Status</option>
          <option value="Active">Active</option>
          <option value="Pending">Pending</option>
          <option value="Expired">Expired</option>
        </select>
      </div>

      {/* Table / Loading / Error */}
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        {loading ? (
          <div className="p-6 text-center text-gray-500">Loading policies...</div>
        ) : error ? (
          <div className="p-6 text-center text-red-600">{error}</div>
        ) : (
          <table className="w-full border-collapse">
            <thead className="bg-gray-100 text-gray-700 text-sm">
              <tr>
                <th className="text-left py-3 px-4">Policy ID</th>
                <th className="text-left py-3 px-4">Customer</th>
                <th className="text-left py-3 px-4">Type</th>
                <th className="text-left py-3 px-4">Premium</th>
                <th className="text-left py-3 px-4">Status</th>
              </tr>
            </thead>
            <tbody>
              {filteredPolicies.length > 0 ? (
                filteredPolicies.map((policy) => (
                  <tr key={policy.id} className="border-t hover:bg-gray-50 transition">
                    <td className="py-3 px-4 font-medium text-gray-700">{policy.id}</td>
                    <td className="py-3 px-4">{policy.customer}</td>
                    <td className="py-3 px-4">{policy.type}</td>
                    <td className="py-3 px-4">{policy.premium}</td>
                    <td className="py-3 px-4">
                      <span
                        className={`px-3 py-1 rounded-full text-xs font-semibold ${
                          policy.status === "Active"
                            ? "bg-green-100 text-green-700"
                            : policy.status === "Pending"
                            ? "bg-yellow-100 text-yellow-700"
                            : "bg-red-100 text-red-700"
                        }`}
                      >
                        {policy.status}
                      </span>
                    </td>
                  </tr>
                ))
              ) : (
                <tr>
                  <td colSpan="5" className="py-6 text-center text-gray-500">
                    No policies found.
                  </td>
                </tr>
              )}
            </tbody>
          </table>
        )}
      </div>
    </div>
  );
};

export default PoliciesPage;
