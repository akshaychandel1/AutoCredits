const Payment = ({ 
  form, 
  handleChange, 
  handleSave, 
  isSaving, 
  errors, 
  paymentHistory = [], 
  totalPremium, 
  onNextStep, 
  paymentLedger: propPaymentLedger, 
  onPaymentLedgerUpdate,
  acceptedQuote
}) => {
  // Format number in Indian digit format (e.g., 10,00,000)
  const formatIndianNumber = (number) => {
    if (!number && number !== 0) return '0';
    
    const num = parseFloat(number);
    if (isNaN(num)) return '0';
    
    // Handle decimal numbers
    const [integerPart, decimalPart] = num.toFixed(2).split('.');
    
    // Indian numbering system: 1,00,000 format
    const lastThree = integerPart.substring(integerPart.length - 3);
    const otherNumbers = integerPart.substring(0, integerPart.length - 3);
    
    if (otherNumbers !== '') {
      const formatted = otherNumbers.replace(/\B(?=(\d{2})+(?!\d))/g, ",") + "," + lastThree;
      return decimalPart ? `${formatted}.${decimalPart}` : formatted;
    }
    
    return decimalPart ? `${lastThree}.${decimalPart}` : lastThree;
  };

  // Comprehensive list of Indian banks for auto-suggest
  const indianBanks = [
    "State Bank of India",
    "HDFC Bank",
    "ICICI Bank",
    "Punjab National Bank",
    "Bank of Baroda",
    "Canara Bank",
    "Axis Bank",
    "Union Bank of India",
    "Bank of India",
    "Indian Bank",
    "Central Bank of India",
    "IndusInd Bank",
    "Kotak Mahindra Bank",
    "Yes Bank",
    "IDBI Bank",
    "IDFC First Bank",
    "Bandhan Bank",
    "Federal Bank",
    "RBL Bank",
    "South Indian Bank",
    "Karnataka Bank",
    "Karur Vysya Bank",
    "City Union Bank",
    "DCB Bank",
    "Jammu & Kashmir Bank",
    "Dhanlaxmi Bank",
    "DBS Bank India",
    "Citibank India",
    "Standard Chartered Bank",
    "HSBC Bank India",
    "Deutsche Bank",
    "Baroda Rajasthan Kshetriya Gramin Bank",
    "Andhra Pradesh Grameena Vikas Bank",
    "Andhra Pragathi Grameena Bank",
    "Saptagiri Grameena Bank",
    "Chaitanya Godavari Grameena Bank",
    "Assam Gramin Vikash Bank",
    "Madhya Bihar Gramin Bank",
    "Bihar Gramin Bank",
    "Chhattisgarh Rajya Gramin Bank",
    "Saurashtra Gramin Bank",
    "Baroda Gujarat Gramin Bank",
    "Himachal Pradesh Gramin Bank",
    "Ellaquai Dehati Bank",
    "Jammu and Kashmir Grameen Bank",
    "Jharkhand Rajya Gramin Bank",
    "Karnataka Gramin Bank",
    "Karnataka Vikas Grameena Bank",
    "Kerala Gramin Bank",
    "Madhya Pradesh Gramin Bank",
    "Maharashtra Gramin Bank",
    "Manipur Rural Bank",
    "Meghalaya Rural Bank",
    "Mizoram Rural Bank",
    "Nagaland Rural Bank",
    "Odisha Gramya Bank",
    "Puduvai Bharathiar Grama Bank",
    "Punjab Gramin Bank",
    "Rajasthan Marudhara Gramin Bank",
    "Tamil Nadu Grama Bank",
    "Telangana Grameena Bank",
    "Tripura Gramin Bank",
    "Uttar Bihar Gramin Bank",
    "Uttarakhand Gramin Bank",
    "Uttar Pradesh Gramin Bank",
    "West Bengal Gramin Bank"
  ];

  // State for bank suggestions
  const [bankSuggestions, setBankSuggestions] = useState([]);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [activeBankIndex, setActiveBankIndex] = useState(-1);

  // State for editing payment
  const [editingPayment, setEditingPayment] = useState(null);
  const [editFormData, setEditFormData] = useState({});

  // Use the final premium amount directly from acceptedQuote
  const finalPremiumAmount = acceptedQuote?.totalPremium || 0;

  // Calculate total customer payments (both direct and via in house)
  const calculateTotalCustomerPayments = () => {
    return paymentLedger
      .filter(payment => payment.paymentMadeBy === "Customer")
      .reduce((sum, payment) => sum + payment.amount, 0);
  };

  // Calculate remaining amount that customer can pay
  const calculateCustomerRemainingAmount = () => {
    const totalCustomerPayments = calculateTotalCustomerPayments();
    return Math.max(finalPremiumAmount - totalCustomerPayments, 0);
  };

  // Calculate payment progress percentage (based only on customer payments)
  const calculatePaymentProgress = () => {
    const totalCustomerPayments = calculateTotalCustomerPayments();
    return finalPremiumAmount > 0 ? Math.min((totalCustomerPayments / finalPremiumAmount) * 100, 100) : 0;
  };

  // Calculate overall payment status (based only on customer payments)
  const calculateOverallPaymentStatus = () => {
    const totalCustomerPayments = calculateTotalCustomerPayments();
    return totalCustomerPayments >= finalPremiumAmount ? 'Fully Paid' : 'Payment Pending';
  };
  
  // Payment modes for Customer (includes subvention)
  const customerPaymentModeOptions = [
    "Online Transfer/UPI",
    "Cash",
    "Cheque",
    "Credit/Debit Card",
    "Subvention"
  ];

  // Payment modes for In House (excludes subvention)
  const inHousePaymentModeOptions = [
    "Online Transfer/UPI",
    "Cash",
    "Cheque",
    "Credit/Debit Card"
  ];

  // Payment made by options
  const paymentMadeByOptions = [
    { value: "Customer", label: "Customer" },
    { value: "In House", label: "In House" }
  ];

  // State for payment ledger - use prop if provided, otherwise local state
  const [paymentLedger, setPaymentLedger] = useState(propPaymentLedger || paymentHistory || []);
  
  // State for auto credit amount - always equal to final premium amount
  const [autoCreditAmount, setAutoCreditAmount] = useState(finalPremiumAmount || "");

  // Check if auto credit entry exists and get its status
  const getAutoCreditEntry = () => {
    return paymentLedger.find(payment => payment.type === "auto_credit");
  };

  // Calculate auto credit status based on customer payments
  const calculateAutoCreditStatus = () => {
    const totalCustomerPayments = calculateTotalCustomerPayments();
    const autoCreditEntry = getAutoCreditEntry();
    
    if (!autoCreditEntry) return 'Not Created';
    
    if (totalCustomerPayments >= finalPremiumAmount) {
      return 'Completed';
    } else {
      return 'Pending';
    }
  };

  // Handle bank name input change with auto-suggest
  const handleBankNameChange = (e, bankType = 'customer') => {
    const value = e.target.value;
    
    // Update the form state
    if (bankType === 'customer') {
      handleChange({
        target: {
          name: 'customerBankName',
          value: value
        }
      });
    } else if (bankType === 'inHouse') {
      handleChange({
        target: {
          name: 'inHouseBankName',
          value: value
        }
      });
    } else if (bankType === 'autoCredit') {
      handleChange({
        target: {
          name: 'autoCreditBankName',
          value: value
        }
      });
    }
    
    // Show suggestions if input is not empty
    if (value.length > 0) {
      const filteredBanks = indianBanks.filter(bank =>
        bank.toLowerCase().includes(value.toLowerCase())
      );
      setBankSuggestions(filteredBanks);
      setShowSuggestions(true);
      setActiveBankIndex(-1);
    } else {
      setShowSuggestions(false);
      setBankSuggestions([]);
    }
  };

  // Handle bank suggestion selection
  const handleBankSelect = (bankName, bankType = 'customer') => {
    if (bankType === 'customer') {
      handleChange({
        target: {
          name: 'customerBankName',
          value: bankName
        }
      });
    } else if (bankType === 'inHouse') {
      handleChange({
        target: {
          name: 'inHouseBankName',
          value: bankName
        }
      });
    } else if (bankType === 'autoCredit') {
      handleChange({
        target: {
          name: 'autoCreditBankName',
          value: bankName
        }
      });
    }
    setShowSuggestions(false);
    setBankSuggestions([]);
    setActiveBankIndex(-1);
  };

  // Handle keyboard navigation for bank suggestions
  const handleBankKeyDown = (e, bankType = 'customer') => {
    if (!showSuggestions) return;

    let bankFieldValue;
    if (bankType === 'customer') {
      bankFieldValue = form.customerBankName;
    } else if (bankType === 'inHouse') {
      bankFieldValue = form.inHouseBankName;
    } else if (bankType === 'autoCredit') {
      bankFieldValue = form.autoCreditBankName;
    }

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault();
        setActiveBankIndex(prev => 
          prev < bankSuggestions.length - 1 ? prev + 1 : prev
        );
        break;
      case 'ArrowUp':
        e.preventDefault();
        setActiveBankIndex(prev => prev > 0 ? prev - 1 : -1);
        break;
      case 'Enter':
        e.preventDefault();
        if (activeBankIndex >= 0 && bankSuggestions[activeBankIndex]) {
          handleBankSelect(bankSuggestions[activeBankIndex], bankType);
        }
        break;
      case 'Escape':
        setShowSuggestions(false);
        setActiveBankIndex(-1);
        break;
      default:
        break;
    }
  };

  // Close suggestions when clicking outside
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (!event.target.closest('.bank-suggestions-container')) {
        setShowSuggestions(false);
        setActiveBankIndex(-1);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  // Handle radio button change
  const handleRadioChange = (fieldName, value) => {
    handleChange({ 
      target: { 
        name: fieldName, 
        value: value 
      } 
    });
  };

  // Handle auto credit amount change
  const handleAutoCreditChange = (e) => {
    const value = e.target.value;
    setAutoCreditAmount(value);
    handleChange({
      target: {
        name: 'autoCreditAmount',
        value: value
      }
    });
  };

  // EDIT PAYMENT FUNCTIONS - FIXED VERSION
  const handleEditPayment = (payment) => {
    console.log("Editing payment:", payment);
    setEditingPayment(payment.id);
    setEditFormData({
      date: payment.date,
      description: payment.description,
      amount: payment.amount,
      mode: payment.mode,
      status: payment.status,
      transactionId: payment.transactionId || '',
      bankName: payment.bankName || '',
      paymentMadeBy: payment.paymentMadeBy,
      receiptDate: payment.receiptDate || payment.date,
      payoutBy: payment.payoutBy
    });
  };

  const handleEditFormChange = (e) => {
    const { name, value } = e.target;
    setEditFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSaveEdit = async () => {
    console.log("Saving edited payment:", editFormData);
    
    if (!editFormData.amount || !editFormData.date || !editFormData.mode) {
      alert("Please fill all required fields (Amount, Date, and Payment Mode)");
      return;
    }

    try {
      const updatedLedger = paymentLedger.map(payment => 
        payment.id === editingPayment 
          ? { 
              ...payment, 
              ...editFormData,
              amount: parseFloat(editFormData.amount) || 0
            }
          : payment
      );

      console.log("Updated ledger:", updatedLedger);

      // Update auto credit status if needed
      const updatedLedgerWithAutoCreditStatus = updateAutoCreditStatus(updatedLedger);
      
      setPaymentLedger(updatedLedgerWithAutoCreditStatus);
      
      // Notify parent component about ledger update
      if (onPaymentLedgerUpdate) {
        onPaymentLedgerUpdate(updatedLedgerWithAutoCreditStatus);
      }
      
      // Update payment status and totals
      const totalCustomerPayments = calculateTotalCustomerPayments();
      const paymentStatus = totalCustomerPayments >= finalPremiumAmount ? 'Fully Paid' : 'Payment Pending';

      const paymentData = {
        payment_info: {
          paymentMadeBy: form.paymentMadeBy || "Customer",
          paymentMode: form.paymentMode || "",
          paymentAmount: parseFloat(form.paymentAmount) || 0,
          paymentDate: form.paymentDate || '',
          transactionId: form.transactionId || '',
          receiptDate: form.receiptDate || '',
          bankName: form.bankName || '',
          subvention_payment: form.paymentMode?.includes('Subvention') ? form.paymentMode : "No Subvention",
          paymentStatus: paymentStatus,
          totalPaidAmount: totalCustomerPayments
        },
        payment_ledger: updatedLedgerWithAutoCreditStatus
      };

      console.log("Saving payment data:", paymentData);

      // Save to backend
      await handleSave(paymentData);
      
      // Close edit form
      setEditingPayment(null);
      setEditFormData({});
      
      alert("Payment updated successfully!");
      
    } catch (error) {
      console.error('Error saving edited payment:', error);
      alert('Error saving edited payment. Please try again.');
    }
  };

  const handleCancelEdit = () => {
    setEditingPayment(null);
    setEditFormData({});
  };

  // Add payment to ledger function for Customer
  const addCustomerPaymentToLedger = async () => {
    if (!form.customerPaymentAmount || !form.customerPaymentDate || !form.customerPaymentMode) {
      alert("Please fill all required payment fields for Customer payment");
      return;
    }

    const paymentAmount = parseFloat(form.customerPaymentAmount);
    const customerRemainingAmount = calculateCustomerRemainingAmount();

    // Check if payment amount exceeds remaining amount
    if (paymentAmount > customerRemainingAmount) {
      alert(`Payment amount cannot exceed remaining amount of ₹${formatIndianNumber(customerRemainingAmount)}`);
      return;
    }

    const newPayment = {
      id: Date.now().toString() + '_customer',
      date: form.customerPaymentDate,
      description: `Customer Payment - ${form.customerPaymentMode}`,
      amount: paymentAmount,
      mode: form.customerPaymentMode,
      status: 'Completed',
      transactionId: form.customerTransactionId || 'N/A',
      bankName: form.customerBankName || 'N/A',
      paymentMadeBy: "Customer",
      receiptDate: form.customerReceiptDate || form.customerPaymentDate,
      payoutBy: "Customer",
      type: "customer_payment"
    };

    const updatedLedger = [...paymentLedger, newPayment];
    
    // Update auto credit status if it exists
    const updatedLedgerWithAutoCreditStatus = updateAutoCreditStatus(updatedLedger);
    
    setPaymentLedger(updatedLedgerWithAutoCreditStatus);
    
    // Notify parent component about ledger update
    if (onPaymentLedgerUpdate) {
      onPaymentLedgerUpdate(updatedLedgerWithAutoCreditStatus);
    }
    
    // Update payment status and totals
    const totalCustomerPayments = calculateTotalCustomerPayments();
    const paymentStatus = totalCustomerPayments >= finalPremiumAmount ? 'Fully Paid' : 'Payment Pending';

    const paymentData = {
      payment_info: {
        paymentMadeBy: "Customer",
        paymentMode: form.customerPaymentMode,
        paymentAmount: paymentAmount,
        paymentDate: form.customerPaymentDate,
        transactionId: form.customerTransactionId || '',
        receiptDate: form.customerReceiptDate || form.customerPaymentDate,
        bankName: form.customerBankName || '',
        subvention_payment: form.customerPaymentMode.includes('Subvention') ? form.customerPaymentMode : "No Subvention",
        paymentStatus: paymentStatus,
        totalPaidAmount: totalCustomerPayments
      },
      payment_ledger: updatedLedgerWithAutoCreditStatus
    };

    console.log("💰 Adding Customer payment to ledger:", paymentData);

    try {
      // Save to backend
      await handleSave(paymentData);
      
      // Clear customer payment form (keep payment mode for convenience)
      handleChange({ target: { name: 'customerPaymentAmount', value: '' } });
      handleChange({ target: { name: 'customerPaymentDate', value: '' } });
      handleChange({ target: { name: 'customerTransactionId', value: '' } });
      handleChange({ target: { name: 'customerReceiptDate', value: '' } });
      handleChange({ target: { name: 'customerBankName', value: '' } });
      
    } catch (error) {
      console.error('Error saving customer payment:', error);
      alert('Error saving customer payment. Please try again.');
    }
  };

  // Add payment to ledger function for In House
  const addInHousePaymentToLedger = async () => {
    if (!form.inHousePaymentAmount || !form.inHousePaymentDate || !form.inHousePaymentMode || 
        !form.autoCreditPaymentMode || !form.autoCreditPaymentDate) {
      alert("Please fill all required payment fields for In House payment");
      return;
    }

    const paymentAmount = parseFloat(form.inHousePaymentAmount);
    const customerRemainingAmount = calculateCustomerRemainingAmount();

    // Check if payment amount exceeds remaining amount
    if (paymentAmount > customerRemainingAmount) {
      alert(`Payment amount cannot exceed remaining amount of ₹${formatIndianNumber(customerRemainingAmount)}`);
      return;
    }

    // Check if auto credit entry already exists for this premium
    const existingAutoCredit = getAutoCreditEntry();

    let updatedLedger = [...paymentLedger];

    // Add auto credit entry only if it doesn't exist
    if (!existingAutoCredit) {
      const autoCreditPayment = {
        id: Date.now().toString() + '_auto_credit',
        date: form.autoCreditPaymentDate,
        description: `Auto Credit to Insurance Company - ${form.autoCreditPaymentMode}`,
        amount: finalPremiumAmount,
        mode: form.autoCreditPaymentMode,
        status: 'Pending', // Initially pending until customer pays full amount
        transactionId: form.autoCreditTransactionId || 'N/A',
        bankName: form.autoCreditBankName || 'N/A',
        paymentMadeBy: "In House",
        receiptDate: form.autoCreditPaymentDate,
        payoutBy: "Auto Credit to Insurance Company",
        type: "auto_credit"
      };
      updatedLedger.push(autoCreditPayment);
    }

    // Create customer payment entry (money received from customer)
    const customerPaymentEntry = {
      id: Date.now().toString() + '_inhouse_customer',
      date: form.inHousePaymentDate,
      description: `Customer Payment via In House - ${form.inHousePaymentMode}`,
      amount: paymentAmount,
      mode: form.inHousePaymentMode,
      status: 'Completed',
      transactionId: form.inHouseTransactionId || 'N/A',
      bankName: form.inHouseBankName || 'N/A',
      paymentMadeBy: "Customer",
      receiptDate: form.inHouseReceiptDate || form.inHousePaymentDate,
      payoutBy: "In House",
      type: "customer_payment_via_inhouse"
    };

    updatedLedger.push(customerPaymentEntry);
    
    // Update auto credit status based on total customer payments
    const updatedLedgerWithAutoCreditStatus = updateAutoCreditStatus(updatedLedger);
    
    setPaymentLedger(updatedLedgerWithAutoCreditStatus);
    
    // Notify parent component about ledger update
    if (onPaymentLedgerUpdate) {
      onPaymentLedgerUpdate(updatedLedgerWithAutoCreditStatus);
    }
    
    // Update payment status and totals
    const totalCustomerPayments = calculateTotalCustomerPayments();
    const paymentStatus = totalCustomerPayments >= finalPremiumAmount ? 'Fully Paid' : 'Payment Pending';

    const paymentData = {
      payment_info: {
        paymentMadeBy: "In House",
        autoCreditAmount: finalPremiumAmount,
        autoCreditPaymentMode: form.autoCreditPaymentMode,
        autoCreditPaymentDate: form.autoCreditPaymentDate,
        autoCreditTransactionId: form.autoCreditTransactionId || '',
        autoCreditBankName: form.autoCreditBankName || '',
        paymentMode: form.inHousePaymentMode,
        paymentAmount: paymentAmount,
        paymentDate: form.inHousePaymentDate,
        transactionId: form.inHouseTransactionId || '',
        receiptDate: form.inHouseReceiptDate || form.inHousePaymentDate,
        bankName: form.inHouseBankName || '',
        subvention_payment: "No Subvention", // In House payments don't have subvention
        paymentStatus: paymentStatus,
        totalPaidAmount: totalCustomerPayments
      },
      payment_ledger: updatedLedgerWithAutoCreditStatus
    };

    console.log("💰 Adding In House payment to ledger:", paymentData);

    try {
      // Save to backend
      await handleSave(paymentData);
      
      // Clear in house payment form (keep payment mode for convenience)
      handleChange({ target: { name: 'inHousePaymentAmount', value: '' } });
      handleChange({ target: { name: 'inHousePaymentDate', value: '' } });
      handleChange({ target: { name: 'inHouseTransactionId', value: '' } });
      handleChange({ target: { name: 'inHouseReceiptDate', value: '' } });
      handleChange({ target: { name: 'inHouseBankName', value: '' } });
      
    } catch (error) {
      console.error('Error saving in house payment:', error);
      alert('Error saving in house payment. Please try again.');
    }
  };

  // Update auto credit status based on total customer payments
  const updateAutoCreditStatus = (ledger) => {
    const totalCustomerPayments = ledger
      .filter(payment => payment.paymentMadeBy === "Customer")
      .reduce((sum, payment) => sum + payment.amount, 0);
    
    const autoCreditEntry = ledger.find(payment => payment.type === "auto_credit");
    
    if (autoCreditEntry) {
      const newStatus = totalCustomerPayments >= finalPremiumAmount ? 'Completed' : 'Pending';
      
      return ledger.map(payment => 
        payment.type === "auto_credit" 
          ? { ...payment, status: newStatus }
          : payment
      );
    }
    
    return ledger;
  };

  // DELETE PAYMENT FUNCTION
  const deletePaymentFromLedger = async (paymentId) => {
    if (!window.confirm("Are you sure you want to delete this payment?")) {
      return;
    }

    const paymentToDelete = paymentLedger.find(payment => payment.id === paymentId);
    let updatedLedger = paymentLedger.filter(payment => payment.id !== paymentId);
    
    // Update auto credit status after deletion
    updatedLedger = updateAutoCreditStatus(updatedLedger);
    
    setPaymentLedger(updatedLedger);
    
    // Notify parent component about ledger update
    if (onPaymentLedgerUpdate) {
      onPaymentLedgerUpdate(updatedLedger);
    }
    
    // Update payment status and totals
    const totalCustomerPayments = calculateTotalCustomerPayments();
    const paymentStatus = totalCustomerPayments >= finalPremiumAmount ? 'Fully Paid' : 'Payment Pending';

    const paymentData = {
      payment_info: {
        paymentMadeBy: form.paymentMadeBy,
        paymentMode: form.paymentMode,
        paymentAmount: 0,
        paymentDate: form.paymentDate || '',
        transactionId: form.transactionId || '',
        receiptDate: form.receiptDate || '',
        bankName: form.bankName || '',
        subvention_payment: "No Subvention",
        paymentStatus: paymentStatus,
        totalPaidAmount: totalCustomerPayments
      },
      payment_ledger: updatedLedger
    };

    console.log("🗑️ Updated payment data after deletion:", paymentData);

    try {
      // Save updated data to backend
      await handleSave(paymentData);
      
      // Update form state with new totals
      handleChange({
        target: {
          name: 'paymentStatus',
          value: paymentStatus
        }
      });

      handleChange({
        target: {
          name: 'totalPaidAmount',
          value: totalCustomerPayments
        }
      });

    } catch (error) {
      console.error('Error deleting payment:', error);
      alert('Error deleting payment. Please try again.');
    }
  };

  // Handle next step
  const handleNextStep = async () => {
    const totalCustomerPayments = calculateTotalCustomerPayments();
    const paymentStatus = totalCustomerPayments >= finalPremiumAmount ? 'Fully Paid' : 'Payment Pending';
    
    const finalPaymentData = {
      payment_info: {
        paymentMadeBy: form.paymentMadeBy,
        paymentMode: form.paymentMode,
        paymentAmount: parseFloat(form.paymentAmount) || 0,
        paymentDate: form.paymentDate,
        transactionId: form.transactionId || '',
        receiptDate: form.receiptDate || '',
        bankName: form.bankName || '',
        subvention_payment: form.paymentMode.includes('Subvention') ? form.paymentMode : "No Subvention",
        paymentStatus: paymentStatus,
        totalPaidAmount: totalCustomerPayments
      },
      payment_ledger: paymentLedger
    };

    console.log("💰 Final payment data before next step:", finalPaymentData);

    // Update payment status in form
    handleChange({
      target: {
        name: 'paymentStatus',
        value: paymentStatus
      }
    });

    handleChange({
      target: {
        name: 'totalPaidAmount',
        value: totalCustomerPayments
      }
    });

    // Save current state before proceeding
    try {
      await handleSave(finalPaymentData);
      
      setTimeout(() => {
        if (onNextStep && typeof onNextStep === 'function') {
          onNextStep();
        } else {
          console.error('onNextStep is not a function');
        }
      }, 1000);
      
    } catch (error) {
      console.error('Error saving before next step:', error);
    }
  };

  // Calculate total subvention amount from ledger
  const calculateTotalSubvention = () => {
    const subventionModes = [
      "Bank Subvention", 
      "Dealer Subvention",
      "Manufacturer Subvention",
      "Special Offer Subvention",
      "Subvention" // Generic subvention
    ];
    
    return paymentLedger
      .filter(payment => 
        subventionModes.some(mode => 
          payment.mode?.toLowerCase().includes(mode.toLowerCase()) ||
          payment.description?.toLowerCase().includes('subvention')
        ) && payment.paymentMadeBy === "Customer"
      )
      .reduce((sum, payment) => sum + payment.amount, 0);
  };

  // Calculate money distribution
  const calculateAutoCreditAmountTotal = () => {
    return paymentLedger
      .filter(payment => payment.payoutBy === "Auto Credit to Insurance Company")
      .reduce((sum, payment) => sum + payment.amount, 0);
  };

  const calculateCustomerReceivedAmount = () => {
    return paymentLedger
      .filter(payment => payment.payoutBy === "Customer")
      .reduce((sum, payment) => sum + payment.amount, 0);
  };

  const calculateInHouseReceivedAmount = () => {
    return paymentLedger
      .filter(payment => payment.payoutBy === "In House")
      .reduce((sum, payment) => sum + payment.amount, 0);
  };

  // Check if auto credit entry exists
  const autoCreditExists = paymentLedger.some(payment => payment.type === "auto_credit");
  const autoCreditStatus = calculateAutoCreditStatus();
  const totalCustomerPayments = calculateTotalCustomerPayments();
  const customerRemainingAmount = calculateCustomerRemainingAmount();
  const paymentProgress = calculatePaymentProgress();
  const overallPaymentStatus = calculateOverallPaymentStatus();

  // Ensure form fields are properly initialized
  useEffect(() => {
    const initialFields = {
      paymentMadeBy: form.paymentMadeBy || "Customer",
      customerPaymentMode: form.customerPaymentMode || "",
      customerPaymentAmount: form.customerPaymentAmount || "",
      customerPaymentDate: form.customerPaymentDate || "",
      customerTransactionId: form.customerTransactionId || "",
      customerReceiptDate: form.customerReceiptDate || "",
      customerBankName: form.customerBankName || "",
      inHousePaymentMode: form.inHousePaymentMode || "",
      inHousePaymentAmount: form.inHousePaymentAmount || "",
      inHousePaymentDate: form.inHousePaymentDate || "",
      inHouseTransactionId: form.inHouseTransactionId || "",
      inHouseReceiptDate: form.inHouseReceiptDate || "",
      inHouseBankName: form.inHouseBankName || "",
      autoCreditPaymentMode: form.autoCreditPaymentMode || "",
      autoCreditPaymentDate: form.autoCreditPaymentDate || "",
      autoCreditTransactionId: form.autoCreditTransactionId || "",
      autoCreditBankName: form.autoCreditBankName || "",
      autoCreditAmount: form.autoCreditAmount || finalPremiumAmount,
      subvention_payment: form.subvention_payment || "No Subvention"
    };
    
    Object.keys(initialFields).forEach(key => {
      if (!form[key] && initialFields[key] !== "") {
        handleChange({
          target: {
            name: key,
            value: initialFields[key]
          }
        });
      }
    });
    
    if (finalPremiumAmount) {
      setAutoCreditAmount(finalPremiumAmount);
    }
  }, [finalPremiumAmount]);

  // Update ledger when propPaymentLedger changes
  useEffect(() => {
    if (propPaymentLedger && propPaymentLedger.length >= 0) {
      setPaymentLedger(propPaymentLedger);
    }
  }, [propPaymentLedger]);

  const paymentStatusColor = overallPaymentStatus === 'Fully Paid' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800';
  
  const totalSubvention = calculateTotalSubvention();
  const customerReceived = calculateCustomerReceivedAmount();
  const inHouseReceived = calculateInHouseReceivedAmount();
  const autoCreditTotal = calculateAutoCreditAmountTotal();

  // Bank Suggestions Component
  const BankSuggestions = ({ bankType = 'customer' }) => {
    if (!showSuggestions || bankSuggestions.length === 0) return null;

    return (
      <div className="absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-y-auto">
        {bankSuggestions.map((bank, index) => (
          <div
            key={bank}
            className={`px-3 py-2 cursor-pointer hover:bg-gray-100 ${
              index === activeBankIndex ? 'bg-blue-50 border border-blue-200' : ''
            } ${index !== bankSuggestions.length - 1 ? 'border-b border-gray-100' : ''}`}
            onClick={() => handleBankSelect(bank, bankType)}
            onMouseEnter={() => setActiveBankIndex(index)}
          >
            <div className="text-sm text-gray-800">{bank}</div>
          </div>
        ))}
      </div>
    );
  };

  // Edit Form Component - FIXED VERSION
  const EditPaymentForm = ({ payment, onSave, onCancel }) => {
    const [localEditForm, setLocalEditForm] = useState(editFormData);

    const handleLocalChange = (e) => {
      const { name, value } = e.target;
      setLocalEditForm(prev => ({
        ...prev,
        [name]: value
      }));
      
      // Also update the main editFormData
      setEditFormData(prev => ({
        ...prev,
        [name]: value
      }));
    };

    const handleLocalSave = () => {
      // Validate required fields
      if (!localEditForm.amount || !localEditForm.date || !localEditForm.mode) {
        alert("Please fill all required fields (Amount, Date, and Payment Mode)");
        return;
      }
      
      console.log("Saving local form:", localEditForm);
      onSave(localEditForm);
    };

    // Get appropriate payment mode options based on who made the payment
    const getPaymentModeOptions = () => {
      return localEditForm.paymentMadeBy === "Customer" 
        ? customerPaymentModeOptions 
        : inHousePaymentModeOptions;
    };

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-lg font-semibold mb-4">Edit Payment</h3>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Date *</label>
              <input
                type="date"
                name="date"
                value={localEditForm.date}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Amount (₹) *</label>
              <input
                type="number"
                name="amount"
                value={localEditForm.amount}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                required
                min="0"
                step="0.01"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Payment Mode *</label>
              <select
                name="mode"
                value={localEditForm.mode}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                required
              >
                <option value="">Select payment mode</option>
                {getPaymentModeOptions().map(option => (
                  <option key={option} value={option}>{option}</option>
                ))}
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Status</label>
              <select
                name="status"
                value={localEditForm.status}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              >
                <option value="Completed">Completed</option>
                <option value="Pending">Pending</option>
              </select>
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Transaction ID</label>
              <input
                type="text"
                name="transactionId"
                value={localEditForm.transactionId}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                placeholder="Enter transaction ID"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Bank Name</label>
              <input
                type="text"
                name="bankName"
                value={localEditForm.bankName}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                placeholder="Enter bank name"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Description</label>
              <input
                type="text"
                name="description"
                value={localEditForm.description}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
                placeholder="Enter description"
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Receipt Date</label>
              <input
                type="date"
                name="receiptDate"
                value={localEditForm.receiptDate}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Payment Made By</label>
              <select
                name="paymentMadeBy"
                value={localEditForm.paymentMadeBy}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm bg-gray-50"
                disabled // Keep this disabled as we shouldn't change who made the payment
              >
                <option value="Customer">Customer</option>
                <option value="In House">In House</option>
              </select>
              <p className="text-xs text-gray-500 mt-1">Cannot be changed</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">Payout By</label>
              <select
                name="payoutBy"
                value={localEditForm.payoutBy}
                onChange={handleLocalChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm"
              >
                <option value="Customer">Customer</option>
                <option value="In House">In House</option>
                <option value="Auto Credit to Insurance Company">Auto Credit to Insurance Company</option>
              </select>
            </div>
          </div>

          {/* Show current values for reference */}
          <div className="mb-4 p-3 bg-gray-50 rounded-md">
            <h4 className="text-sm font-medium text-gray-700 mb-2">Current Values:</h4>
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div><span className="text-gray-600">Amount:</span> ₹{formatIndianNumber(payment.amount)}</div>
              <div><span className="text-gray-600">Date:</span> {payment.date}</div>
              <div><span className="text-gray-600">Mode:</span> {payment.mode}</div>
              <div><span className="text-gray-600">Status:</span> {payment.status}</div>
            </div>
          </div>
          
          <div className="flex justify-end gap-3">
            <button
              onClick={onCancel}
              className="px-4 py-2 text-sm border border-gray-300 rounded-md hover:bg-gray-50 transition-colors"
            >
              Cancel
            </button>
            <button
              onClick={handleLocalSave}
              className="px-4 py-2 text-sm bg-purple-600 text-white rounded-md hover:bg-purple-700 transition-colors"
            >
              Save Changes
            </button>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="bg-white shadow-sm rounded-2xl border border-gray-200 p-6 mb-6">
      <div className="flex items-start justify-between mb-6">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-full bg-gray-100 text-gray-700">
            <FaCreditCard />
          </div>
          <h3 className="text-lg font-semibold text-gray-800">
            7: Payment
          </h3>
        </div>
        <div className={`px-3 py-1 rounded-full text-sm font-medium ${paymentStatusColor}`}>
          {overallPaymentStatus}
        </div>
      </div>

      {/* Payment Summary Card */}
      <div className="bg-purple-50 border rounded-xl p-5 mb-6">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <p className="text-sm text-gray-500">Final Premium:</p>
            <p className="font-semibold text-lg text-blue-600">₹{formatIndianNumber(finalPremiumAmount)}</p>
            <p className="text-xs text-gray-500 mt-1">
              {acceptedQuote ? `From ${acceptedQuote.insuranceCompany}` : 'From accepted quote'}
            </p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Total Customer Paid:</p>
            <p className="font-semibold text-lg text-green-600">
              ₹{formatIndianNumber(totalCustomerPayments)}
            </p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Subvention Amount:</p>
            <p className="font-semibold text-lg text-blue-600">₹{formatIndianNumber(totalSubvention)}</p>
            <p className="text-xs text-gray-500 mt-1">For payout calculation</p>
          </div>
          <div>
            <p className="text-sm text-gray-500">Remaining Amount:</p>
            <p className={`font-semibold text-lg ${customerRemainingAmount > 0 ? 'text-red-600' : 'text-green-600'}`}>
              ₹{formatIndianNumber(customerRemainingAmount)}
            </p>
          </div>
        </div>
        
        {/* Subvention Breakdown */}
        {totalSubvention > 0 && (
          <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
            <p className="text-sm font-semibold text-blue-800 mb-2">Subvention Breakdown</p>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="text-gray-600">Total Subvention:</span>
                <span className="font-semibold text-blue-600 ml-2">₹{formatIndianNumber(totalSubvention)}</span>
              </div>
              <div>
                <span className="text-gray-600">Net Premium:</span>
                <span className="font-semibold ml-2">₹{formatIndianNumber(finalPremiumAmount - totalSubvention)}</span>
              </div>
              <div>
                <span className="text-gray-600">Customer Pays:</span>
                <span className="font-semibold text-green-600 ml-2">₹{formatIndianNumber(finalPremiumAmount - totalSubvention)}</span>
              </div>
            </div>
          </div>
        )}
        
        {/* Payout Distribution */}
        <div className="mt-4 grid grid-cols-1 md:grid-cols-4 gap-4 p-3 bg-white rounded-lg border">
          <div className="text-center">
            <p className="text-sm text-gray-500">Auto Credit to Insurance Co.</p>
            <p className="font-semibold text-green-600">₹{formatIndianNumber(autoCreditTotal)}</p>
            {autoCreditExists && (
              <p className={`text-xs mt-1 ${
                autoCreditStatus === 'Completed' ? 'text-green-600' : 'text-yellow-600'
              }`}>
                {autoCreditStatus === 'Completed' ? '✓ Completed' : '⏳ Pending - Customer paid ₹' + formatIndianNumber(totalCustomerPayments) + '/' + formatIndianNumber(finalPremiumAmount)}
              </p>
            )}
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-500">Total Customer Payments</p>
            <p className="font-semibold text-blue-600">₹{formatIndianNumber(totalCustomerPayments)}</p>
            <p className="text-xs text-gray-500 mt-1">All payments from customer</p>
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-500">Subvention Amount</p>
            <p className="font-semibold text-purple-600">₹{formatIndianNumber(totalSubvention)}</p>
            <p className="text-xs text-gray-500 mt-1">Paid by third parties</p>
          </div>
          <div className="text-center">
            <p className="text-sm text-gray-500">Received by In House</p>
            <p className="font-semibold text-orange-600">₹{formatIndianNumber(inHouseReceived)}</p>
            <p className="text-xs text-gray-500 mt-1">Handled by in-house team</p>
          </div>
        </div>
        
        {/* Progress Bar - Only considers customer payments */}
        <div className="mt-4">
          <div className="flex justify-between text-sm text-gray-600 mb-1">
            <span>Payment Progress (Customer Payments Only)</span>
            <span>{Math.round(paymentProgress)}%</span>
          </div>
          <div className="w-full bg-gray-200 rounded-full h-2">
            <div 
              className={`h-2 rounded-full transition-all duration-300 ${
                customerRemainingAmount <= 0 ? 'bg-green-600' : 'bg-yellow-500'
              }`}
              style={{ 
                width: `${paymentProgress}%` 
              }}
            ></div>
          </div>
          <p className="text-xs text-gray-500 mt-1">
            Progress based only on customer payments: ₹{formatIndianNumber(totalCustomerPayments)} / ₹{formatIndianNumber(finalPremiumAmount)}
          </p>
        </div>
      </div>

      {/* Payment Made By Radio Buttons */}
      <div className="border rounded-xl p-5 mb-6">
        <h4 className="text-md font-semibold text-gray-700 mb-4">
          Payment Made By
        </h4>
        <div className="flex gap-6">
          {paymentMadeByOptions.map((option) => (
            <label key={option.value} className="flex items-center gap-2 cursor-pointer">
              <input
                type="radio"
                name="paymentMadeBy"
                value={option.value}
                checked={form.paymentMadeBy === option.value}
                onChange={() => handleRadioChange('paymentMadeBy', option.value)}
                className="w-4 h-4 text-purple-600 focus:ring-purple-500"
              />
              <span className="text-sm font-medium text-gray-700">{option.label}</span>
            </label>
          ))}
        </div>
        {errors.paymentMadeBy && <p className="text-red-500 text-xs mt-2">{errors.paymentMadeBy}</p>}
      </div>

      {/* Customer Payment Section */}
      {form.paymentMadeBy === "Customer" && (
        <div className="border rounded-xl p-5 mb-6">
          <h4 className="text-md font-semibold text-gray-700 mb-4">
            Customer Payment
          </h4>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">
                Payment Mode *
              </label>
              <select
                name="customerPaymentMode"
                value={form.customerPaymentMode || ""}
                onChange={handleChange}
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.customerPaymentMode ? "border-red-500" : "border-gray-300"
                }`}
              >
                <option value="">Select payment mode</option>
                {customerPaymentModeOptions.map((option) => (
                  <option key={option} value={option}>
                    {option}
                  </option>
                ))}
              </select>
              {errors.customerPaymentMode && <p className="text-red-500 text-xs mt-1">{errors.customerPaymentMode}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">
                Payment Amount (₹) *
              </label>
              <input
                type="number"
                name="customerPaymentAmount"
                value={form.customerPaymentAmount || ""}
                onChange={handleChange}
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.customerPaymentAmount ? "border-red-500" : "border-gray-300"
                }`}
                placeholder="0"
                max={customerRemainingAmount}
              />
              {errors.customerPaymentAmount && <p className="text-red-500 text-xs mt-1">{errors.customerPaymentAmount}</p>}
              <p className="text-xs text-gray-500 mt-1">
                Maximum: ₹{formatIndianNumber(customerRemainingAmount)} (Customer can pay up to ₹{formatIndianNumber(finalPremiumAmount)} total)
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">
                Payment Date *
              </label>
              <input
                type="date"
                name="customerPaymentDate"
                value={form.customerPaymentDate || ""}
                onChange={handleChange}
                className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                  errors.customerPaymentDate ? "border-red-500" : "border-gray-300"
                }`}
              />
              {errors.customerPaymentDate && <p className="text-red-500 text-xs mt-1">{errors.customerPaymentDate}</p>}
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-600 mb-1">
                Transaction ID
              </label>
              <input
                type="text"
                name="customerTransactionId"
                value={form.customerTransactionId || ""}
                onChange={handleChange}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
                placeholder="Enter transaction ID (optional)"
              />
              <p className="text-xs text-gray-500 mt-1">Optional for cash payments</p>
            </div>

            <div className="bank-suggestions-container relative">
              <label className="block text-sm font-medium text-gray-600 mb-1">
                Bank Name
              </label>
              <input
                type="text"
                name="customerBankName"
                value={form.customerBankName || ""}
                onChange={(e) => handleBankNameChange(e, 'customer')}
                onKeyDown={(e) => handleBankKeyDown(e, 'customer')}
                className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
                placeholder="Start typing bank name..."
                autoComplete="off"
              />
              <BankSuggestions bankType="customer" />
              <p className="text-xs text-gray-500 mt-1">Required for bank transfers</p>
            </div>
          </div>

          {/* Add Payment Button */}
          <div className="mt-6 flex justify-end">
            <button
              type="button"
              onClick={addCustomerPaymentToLedger}
              disabled={!form.customerPaymentAmount || !form.customerPaymentDate || !form.customerPaymentMode}
              className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <FaPlus /> Add Customer Payment to Ledger
            </button>
          </div>
        </div>
      )}

      {/* In House Payment Section */}
      {form.paymentMadeBy === "In House" && (
        <div className="border rounded-xl p-5 mb-6">
          <h4 className="text-md font-semibold text-gray-700 mb-4">
            In House Payment
          </h4>

          {/* Auto Credit to Insurance Company */}
          <div className="mb-6 p-4 border border-gray-200 rounded-lg">
            <h5 className="text-sm font-semibold text-gray-800 mb-3">Auto Credit to Insurance Company</h5>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Amount (₹) *
                </label>
                <input
                  type="number"
                  name="autoCreditAmount"
                  value={autoCreditAmount || ""}
                  onChange={handleAutoCreditChange}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm bg-gray-50 focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  placeholder="Enter auto credit amount"
                  readOnly
                />
                <p className="text-xs text-gray-500 mt-1">
                  Auto credit amount equals final premium: ₹{formatIndianNumber(finalPremiumAmount)}
                </p>
                {autoCreditExists && (
                  <p className={`text-xs mt-1 ${
                    autoCreditStatus === 'Completed' ? 'text-green-600' : 'text-yellow-600'
                  }`}>
                    {autoCreditStatus === 'Completed' 
                      ? '✓ Auto credit completed - Customer paid full amount' 
                      : `⏳ Auto credit pending - Customer paid ₹${formatIndianNumber(totalCustomerPayments)}/${formatIndianNumber(finalPremiumAmount)}`}
                  </p>
                )}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Payment Mode *
                </label>
                <select
                  name="autoCreditPaymentMode"
                  value={form.autoCreditPaymentMode || ""}
                  onChange={handleChange}
                  className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                    errors.autoCreditPaymentMode ? "border-red-500" : "border-gray-300"
                  }`}
                >
                  <option value="">Select payment mode</option>
                  {inHousePaymentModeOptions.map((option) => (
                    <option key={option} value={option}>
                      {option}
                    </option>
                  ))}
                </select>
                {errors.autoCreditPaymentMode && <p className="text-red-500 text-xs mt-1">{errors.autoCreditPaymentMode}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Payment Date *
                </label>
                <input
                  type="date"
                  name="autoCreditPaymentDate"
                  value={form.autoCreditPaymentDate || ""}
                  onChange={handleChange}
                  className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none ${
                    errors.autoCreditPaymentDate ? "border-red-500" : "border-gray-300"
                  }`}
                />
                {errors.autoCreditPaymentDate && <p className="text-red-500 text-xs mt-1">{errors.autoCreditPaymentDate}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Transaction ID
                </label>
                <input
                  type="text"
                  name="autoCreditTransactionId"
                  value={form.autoCreditTransactionId || ""}
                  onChange={handleChange}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  placeholder="Enter transaction ID (optional)"
                />
                <p className="text-xs text-gray-500 mt-1">Optional for cash payments</p>
              </div>

              <div className="bank-suggestions-container relative">
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Bank Name
                </label>
                <input
                  type="text"
                  name="autoCreditBankName"
                  value={form.autoCreditBankName || ""}
                  onChange={(e) => handleBankNameChange(e, 'autoCredit')}
                  onKeyDown={(e) => handleBankKeyDown(e, 'autoCredit')}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:outline-none"
                  placeholder="Start typing bank name..."
                  autoComplete="off"
                />
                <BankSuggestions bankType="autoCredit" />
                <p className="text-xs text-gray-500 mt-1">Required for bank transfers</p>
              </div>
            </div>
          </div>

          {/* Payment Made by Customer */}
          <div className="p-4 border border-gray-200 rounded-lg">
            <h5 className="text-sm font-semibold text-gray-800 mb-3">Payment Made by Customer</h5>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Payment Mode *
                </label>
                <select
                  name="inHousePaymentMode"
                  value={form.inHousePaymentMode || ""}
                  onChange={handleChange}
                  className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                    errors.inHousePaymentMode ? "border-red-500" : "border-gray-300"
                  }`}
                >
                  <option value="">Select payment mode</option>
                  {customerPaymentModeOptions.map((option) => (
                    <option key={option} value={option}>
                      {option}
                    </option>
                  ))}
                </select>
                {errors.inHousePaymentMode && <p className="text-red-500 text-xs mt-1">{errors.inHousePaymentMode}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Payment Amount (₹) *
                </label>
                <input
                  type="number"
                  name="inHousePaymentAmount"
                  value={form.inHousePaymentAmount || ""}
                  onChange={handleChange}
                  className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                    errors.inHousePaymentAmount ? "border-red-500" : "border-gray-300"
                  }`}
                  placeholder="0"
                  max={customerRemainingAmount}
                />
                {errors.inHousePaymentAmount && <p className="text-red-500 text-xs mt-1">{errors.inHousePaymentAmount}</p>}
                <p className="text-xs text-gray-500 mt-1">
                  Maximum: ₹{formatIndianNumber(customerRemainingAmount)} (Customer can pay up to ₹{formatIndianNumber(finalPremiumAmount)} total)
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Payment Date *
                </label>
                <input
                  type="date"
                  name="inHousePaymentDate"
                  value={form.inHousePaymentDate || ""}
                  onChange={handleChange}
                  className={`w-full border rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none ${
                    errors.inHousePaymentDate ? "border-red-500" : "border-gray-300"
                  }`}
                />
                {errors.inHousePaymentDate && <p className="text-red-500 text-xs mt-1">{errors.inHousePaymentDate}</p>}
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Transaction ID
                </label>
                <input
                  type="text"
                  name="inHouseTransactionId"
                  value={form.inHouseTransactionId || ""}
                  onChange={handleChange}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
                  placeholder="Enter transaction ID (optional)"
                />
                <p className="text-xs text-gray-500 mt-1">Optional for cash payments</p>
              </div>

              <div className="bank-suggestions-container relative">
                <label className="block text-sm font-medium text-gray-600 mb-1">
                  Bank Name
                </label>
                <input
                  type="text"
                  name="inHouseBankName"
                  value={form.inHouseBankName || ""}
                  onChange={(e) => handleBankNameChange(e, 'inHouse')}
                  onKeyDown={(e) => handleBankKeyDown(e, 'inHouse')}
                  className="w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:outline-none"
                  placeholder="Start typing bank name..."
                  autoComplete="off"
                />
                <BankSuggestions bankType="inHouse" />
                <p className="text-xs text-gray-500 mt-1">Required for bank transfers</p>
              </div>
            </div>
          </div>

          {/* Add Payment Button */}
          <div className="mt-6 flex justify-end">
            <button
              type="button"
              onClick={addInHousePaymentToLedger}
              disabled={!form.inHousePaymentAmount || !form.inHousePaymentDate || !form.inHousePaymentMode || 
                       !form.autoCreditPaymentMode || !form.autoCreditPaymentDate}
              className="inline-flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              <FaPlus /> Add Customer Payment via In House
            </button>
          </div>
        </div>
      )}

      {/* Payment Ledger Section */}
      <div className="border rounded-xl p-5">
        <div className="flex items-center justify-between mb-4">
          <h4 className="text-md font-semibold text-gray-700">
            Payment Ledger
          </h4>
          <div className="flex items-center gap-4">
            <span className="text-sm text-gray-500">
              {paymentLedger.length} payment(s) recorded
            </span>
            <span className={`px-2 py-1 rounded-full text-xs font-medium ${paymentStatusColor}`}>
              {overallPaymentStatus}
            </span>
          </div>
        </div>
        
        {paymentLedger.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full text-sm">
              <thead>
                <tr className="bg-gray-50">
                  <th className="text-left p-3 font-medium text-gray-600">Date</th>
                  <th className="text-left p-3 font-medium text-gray-600">Description</th>
                  <th className="text-left p-3 font-medium text-gray-600">Payment Mode</th>
                  <th className="text-left p-3 font-medium text-gray-600">Made By</th>
                  <th className="text-left p-3 font-medium text-gray-600">Payout By</th>
                  <th className="text-right p-3 font-medium text-gray-600">Amount</th>
                  <th className="text-left p-3 font-medium text-gray-600">Status</th>
                  <th className="text-center p-3 font-medium text-gray-600">Actions</th>
                </tr>
              </thead>
              <tbody>
                {paymentLedger.map((payment) => (
                  <tr key={payment.id} className="border-b border-gray-100 hover:bg-gray-50">
                    <td className="p-3 text-gray-700">{payment.date}</td>
                    <td className="p-3 text-gray-700">{payment.description}</td>
                    <td className="p-3 text-gray-700">
                      {payment.mode}
                      {payment.mode.includes('Subvention') && (
                        <span className="ml-2 px-1 bg-blue-100 text-blue-800 text-xs rounded">Subvention</span>
                      )}
                    </td>
                    <td className="p-3 text-gray-700">{payment.paymentMadeBy}</td>
                    <td className="p-3 text-gray-700">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
                        payment.payoutBy === "Auto Credit to Insurance Company" 
                          ? "bg-green-100 text-green-800"
                          : payment.payoutBy === "Customer"
                          ? "bg-blue-100 text-blue-800"
                          : "bg-purple-100 text-purple-800"
                      }`}>
                        {payment.payoutBy}
                      </span>
                    </td>
                    <td className="p-3 text-right text-green-600 font-medium">₹{formatIndianNumber(payment.amount)}</td>
                    <td className="p-3">
                      <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${
                        payment.status === 'Completed' 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-yellow-100 text-yellow-800'
                      }`}>
                        {payment.status}
                      </span>
                    </td>
                    <td className="p-3 text-center">
                      <div className="flex gap-2 justify-center">
                        <button
                          onClick={() => handleEditPayment(payment)}
                          className="inline-flex items-center gap-1 px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-md hover:bg-blue-200 transition-colors"
                          title="Edit payment"
                        >
                          <FaEdit /> Edit
                        </button>
                        <button
                          onClick={() => deletePaymentFromLedger(payment.id)}
                          className="inline-flex items-center gap-1 px-3 py-1 text-xs bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors"
                          title="Delete payment"
                        >
                          <FaTrash /> Delete
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
              <tfoot>
                <tr className="bg-gray-50">
                  <td colSpan="5" className="p-3 text-right font-medium text-gray-700">Total Customer Paid:</td>
                  <td className="p-3 text-right font-bold text-gray-800">
                    ₹{formatIndianNumber(totalCustomerPayments)}
                  </td>
                  <td className="p-3">
                    <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${paymentStatusColor}`}>
                      {overallPaymentStatus}
                    </span>
                  </td>
                  <td className="p-3"></td>
                </tr>
              </tfoot>
            </table>
          </div>
        ) : (
          <div className="text-center py-8 text-gray-500">
            <FaReceipt className="mx-auto text-3xl mb-3 text-gray-300" />
            <p>No payment records found</p>
            <p className="text-sm">Add payments using the form above</p>
          </div>
        )}
      </div>

      {/* Edit Payment Modal */}
      {editingPayment && (
        <EditPaymentForm
          payment={paymentLedger.find(p => p.id === editingPayment)}
          onSave={handleSaveEdit}
          onCancel={handleCancelEdit}
        />
      )}

      {/* Next Step Button */}
      <div className="mt-6 flex justify-between items-center">
        <div className="text-sm text-gray-600">
          {paymentLedger.length > 0 ? (
            customerRemainingAmount <= 0 ? (
              <span className="text-green-600">✅ All customer payments completed</span>
            ) : (
              <span className="text-yellow-600">⚠️ ₹{formatIndianNumber(customerRemainingAmount)} payment pending from customer</span>
            )
          ) : (
            <span className="text-red-600">Please add at least one payment</span>
          )}
        </div>
        
        <button
          onClick={handleNextStep}
          disabled={paymentLedger.length === 0 || isSaving}
          className="inline-flex items-center gap-2 px-6 py-2 bg-purple-600 text-white rounded-md hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
        >
          {isSaving ? "Saving..." : "Proceed to Payout"} 
          <FaArrowRight />
        </button>
      </div>
    </div>
  );
};